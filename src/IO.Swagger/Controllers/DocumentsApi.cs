/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DocumentsApiController : ControllerBase
    { 
        /// <summary>
        /// Deletes multiple documents from a package.
        /// </summary>
        /// <remarks>Deletes multiple existing documents from a specified package. Documents are identified by the documentID.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="body">The payload should contain a list of document ids.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Validation error</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/api/packages/{packageId}/documents")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDelete")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Validation error")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDelete([FromRoute][Required]string packageId, [FromBody]List<string> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Deletes a document from a package.
        /// </summary>
        /// <remarks>Deletes a document from a specified package.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Validation error</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/api/packages/{packageId}/documents/{documentId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdDelete")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Validation error")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdDelete([FromRoute][Required]string packageId, [FromRoute][Required]string documentId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Retrieves a specified document.
        /// </summary>
        /// <remarks>Retrieves all information related to a given document, including ID, name, description, presentation index, any associated data elements, approvals and fields.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/packages/{packageId}/documents/{documentId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Document), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdGet([FromRoute][Required]string packageId, [FromRoute][Required]string documentId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Document));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"description\" : \"description\",\n  \"index\" : 6,\n  \"externalSigned\" : false,\n  \"imprintFields\" : [ {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"top\" : 1.2315135367772556,\n    \"left\" : 4.145608029883936,\n    \"subtype\" : \"LABEL\",\n    \"editable\" : true,\n    \"name\" : \"name\",\n    \"width\" : 7.386281948385884,\n    \"id\" : \"id\",\n    \"page\" : 2,\n    \"type\" : \"INPUT\",\n    \"value\" : \"value\",\n    \"height\" : 1.0246457001441578\n  }, {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"top\" : 1.2315135367772556,\n    \"left\" : 4.145608029883936,\n    \"subtype\" : \"LABEL\",\n    \"editable\" : true,\n    \"name\" : \"name\",\n    \"width\" : 7.386281948385884,\n    \"id\" : \"id\",\n    \"page\" : 2,\n    \"type\" : \"INPUT\",\n    \"value\" : \"value\",\n    \"height\" : 1.0246457001441578\n  } ],\n  \"extract\" : true,\n  \"pages\" : [ {\n    \"top\" : 9.965781217890562,\n    \"left\" : 4.965218492984954,\n    \"width\" : 5.025004791520295,\n    \"index\" : 7,\n    \"id\" : \"id\",\n    \"version\" : 1,\n    \"height\" : 9.369310271410669\n  }, {\n    \"top\" : 9.965781217890562,\n    \"left\" : 4.965218492984954,\n    \"width\" : 5.025004791520295,\n    \"index\" : 7,\n    \"id\" : \"id\",\n    \"version\" : 1,\n    \"height\" : 9.369310271410669\n  } ],\n  \"size\" : 1,\n  \"signerVerificationToken\" : \"signerVerificationToken\",\n  \"tagged\" : true,\n  \"approvals\" : [ {\n    \"role\" : \"role\",\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"name\" : \"name\",\n    \"enforceCaptureSignature\" : true,\n    \"accepted\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"signed\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"optional\" : true,\n    \"id\" : \"id\",\n    \"fields\" : [ null, null ]\n  }, {\n    \"role\" : \"role\",\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"name\" : \"name\",\n    \"enforceCaptureSignature\" : true,\n    \"accepted\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"signed\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"optional\" : true,\n    \"id\" : \"id\",\n    \"fields\" : [ null, null ]\n  } ],\n  \"name\" : \"name\",\n  \"signedHash\" : \"signedHash\",\n  \"id\" : \"id\",\n  \"fields\" : [ {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"binding\" : \"binding\",\n    \"type\" : \"SIGNATURE\",\n    \"extract\" : true,\n    \"top\" : 9.301444243932576,\n    \"left\" : 2.3021358869347655,\n    \"subtype\" : \"FULLNAME\",\n    \"name\" : \"name\",\n    \"width\" : 7.061401241503109,\n    \"id\" : \"id\",\n    \"page\" : 5,\n    \"value\" : \"value\",\n    \"validation\" : {\n      \"minimumRequired\" : 5,\n      \"minLength\" : 1,\n      \"pattern\" : \"pattern\",\n      \"errorMessage\" : \"errorMessage\",\n      \"errorCode\" : 6,\n      \"maxLength\" : 0,\n      \"required\" : true,\n      \"enum\" : [ \"enum\", \"enum\" ],\n      \"group\" : \"group\"\n    },\n    \"extractAnchor\" : {\n      \"topOffset\" : 100,\n      \"anchorPoint\" : \"TOPLEFT\",\n      \"width\" : 200,\n      \"leftOffset\" : 20,\n      \"characterIndex\" : 3,\n      \"index\" : 2,\n      \"text\" : \"Signature:\",\n      \"height\" : 50\n    },\n    \"height\" : 3.616076749251911\n  }, {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"binding\" : \"binding\",\n    \"type\" : \"SIGNATURE\",\n    \"extract\" : true,\n    \"top\" : 9.301444243932576,\n    \"left\" : 2.3021358869347655,\n    \"subtype\" : \"FULLNAME\",\n    \"name\" : \"name\",\n    \"width\" : 7.061401241503109,\n    \"id\" : \"id\",\n    \"page\" : 5,\n    \"value\" : \"value\",\n    \"validation\" : {\n      \"minimumRequired\" : 5,\n      \"minLength\" : 1,\n      \"pattern\" : \"pattern\",\n      \"errorMessage\" : \"errorMessage\",\n      \"errorCode\" : 6,\n      \"maxLength\" : 0,\n      \"required\" : true,\n      \"enum\" : [ \"enum\", \"enum\" ],\n      \"group\" : \"group\"\n    },\n    \"extractAnchor\" : {\n      \"topOffset\" : 100,\n      \"anchorPoint\" : \"TOPLEFT\",\n      \"width\" : 200,\n      \"leftOffset\" : 20,\n      \"characterIndex\" : 3,\n      \"index\" : 2,\n      \"text\" : \"Signature:\",\n      \"height\" : 50\n    },\n    \"height\" : 3.616076749251911\n  } ],\n  \"extractionTypes\" : [ \"extractionTypes\", \"extractionTypes\" ],\n  \"status\" : \"status\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Document>(exampleJson)
                        : default(Document);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Applies a layout to a document.
        /// </summary>
        /// <remarks>Applies a specific layout to a specified document. At least one parameter needs to be applied, either layoutID, or layoutName.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <param name="layoutId">The unique layout id.</param>
        /// <param name="layoutName">The unique layout name.</param>
        /// <param name="removeOutOfBound"></param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/packages/{packageId}/documents/{documentId}/layout")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdLayoutPost")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdLayoutPost([FromRoute][Required]string packageId, [FromRoute][Required]string documentId, [FromQuery]string layoutId, [FromQuery]string layoutName, [FromQuery]bool? removeOutOfBound)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Retrieves the original PDF document.
        /// </summary>
        /// <remarks>Retrieves the original PDF document that was included in a package.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/packages/{packageId}/documents/{documentId}/original")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdOriginalGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(byte[]), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdOriginalGet([FromRoute][Required]string packageId, [FromRoute][Required]string documentId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(byte[]));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<byte[]>(exampleJson)
                        : default(byte[]);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves a specific document in PDF form.
        /// </summary>
        /// <remarks>Retrieves a specific document. This function always returns the PDF version of the document, even if the document was originally submitted in a different format.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <param name="flatten">Flatten the pdf.</param>
        /// <param name="utf8">utf8</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/packages/{packageId}/documents/{documentId}/pdf")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdPdfGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(byte[]), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdPdfGet([FromRoute][Required]string packageId, [FromRoute][Required]string documentId, [FromQuery]bool? flatten, [FromQuery]string utf8)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(byte[]));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<byte[]>(exampleJson)
                        : default(byte[]);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates a single document.
        /// </summary>
        /// <remarks>Updates a single, specified document. This endpoint accepts multi-part data, or the JSON structure of a document.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/packages/{packageId}/documents/{documentId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Document), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdPost([FromRoute][Required]string packageId, [FromRoute][Required]string documentId, [FromBody]Document body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Document));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"description\" : \"description\",\n  \"index\" : 6,\n  \"externalSigned\" : false,\n  \"imprintFields\" : [ {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"top\" : 1.2315135367772556,\n    \"left\" : 4.145608029883936,\n    \"subtype\" : \"LABEL\",\n    \"editable\" : true,\n    \"name\" : \"name\",\n    \"width\" : 7.386281948385884,\n    \"id\" : \"id\",\n    \"page\" : 2,\n    \"type\" : \"INPUT\",\n    \"value\" : \"value\",\n    \"height\" : 1.0246457001441578\n  }, {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"top\" : 1.2315135367772556,\n    \"left\" : 4.145608029883936,\n    \"subtype\" : \"LABEL\",\n    \"editable\" : true,\n    \"name\" : \"name\",\n    \"width\" : 7.386281948385884,\n    \"id\" : \"id\",\n    \"page\" : 2,\n    \"type\" : \"INPUT\",\n    \"value\" : \"value\",\n    \"height\" : 1.0246457001441578\n  } ],\n  \"extract\" : true,\n  \"pages\" : [ {\n    \"top\" : 9.965781217890562,\n    \"left\" : 4.965218492984954,\n    \"width\" : 5.025004791520295,\n    \"index\" : 7,\n    \"id\" : \"id\",\n    \"version\" : 1,\n    \"height\" : 9.369310271410669\n  }, {\n    \"top\" : 9.965781217890562,\n    \"left\" : 4.965218492984954,\n    \"width\" : 5.025004791520295,\n    \"index\" : 7,\n    \"id\" : \"id\",\n    \"version\" : 1,\n    \"height\" : 9.369310271410669\n  } ],\n  \"size\" : 1,\n  \"signerVerificationToken\" : \"signerVerificationToken\",\n  \"tagged\" : true,\n  \"approvals\" : [ {\n    \"role\" : \"role\",\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"name\" : \"name\",\n    \"enforceCaptureSignature\" : true,\n    \"accepted\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"signed\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"optional\" : true,\n    \"id\" : \"id\",\n    \"fields\" : [ null, null ]\n  }, {\n    \"role\" : \"role\",\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"name\" : \"name\",\n    \"enforceCaptureSignature\" : true,\n    \"accepted\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"signed\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"optional\" : true,\n    \"id\" : \"id\",\n    \"fields\" : [ null, null ]\n  } ],\n  \"name\" : \"name\",\n  \"signedHash\" : \"signedHash\",\n  \"id\" : \"id\",\n  \"fields\" : [ {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"binding\" : \"binding\",\n    \"type\" : \"SIGNATURE\",\n    \"extract\" : true,\n    \"top\" : 9.301444243932576,\n    \"left\" : 2.3021358869347655,\n    \"subtype\" : \"FULLNAME\",\n    \"name\" : \"name\",\n    \"width\" : 7.061401241503109,\n    \"id\" : \"id\",\n    \"page\" : 5,\n    \"value\" : \"value\",\n    \"validation\" : {\n      \"minimumRequired\" : 5,\n      \"minLength\" : 1,\n      \"pattern\" : \"pattern\",\n      \"errorMessage\" : \"errorMessage\",\n      \"errorCode\" : 6,\n      \"maxLength\" : 0,\n      \"required\" : true,\n      \"enum\" : [ \"enum\", \"enum\" ],\n      \"group\" : \"group\"\n    },\n    \"extractAnchor\" : {\n      \"topOffset\" : 100,\n      \"anchorPoint\" : \"TOPLEFT\",\n      \"width\" : 200,\n      \"leftOffset\" : 20,\n      \"characterIndex\" : 3,\n      \"index\" : 2,\n      \"text\" : \"Signature:\",\n      \"height\" : 50\n    },\n    \"height\" : 3.616076749251911\n  }, {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"binding\" : \"binding\",\n    \"type\" : \"SIGNATURE\",\n    \"extract\" : true,\n    \"top\" : 9.301444243932576,\n    \"left\" : 2.3021358869347655,\n    \"subtype\" : \"FULLNAME\",\n    \"name\" : \"name\",\n    \"width\" : 7.061401241503109,\n    \"id\" : \"id\",\n    \"page\" : 5,\n    \"value\" : \"value\",\n    \"validation\" : {\n      \"minimumRequired\" : 5,\n      \"minLength\" : 1,\n      \"pattern\" : \"pattern\",\n      \"errorMessage\" : \"errorMessage\",\n      \"errorCode\" : 6,\n      \"maxLength\" : 0,\n      \"required\" : true,\n      \"enum\" : [ \"enum\", \"enum\" ],\n      \"group\" : \"group\"\n    },\n    \"extractAnchor\" : {\n      \"topOffset\" : 100,\n      \"anchorPoint\" : \"TOPLEFT\",\n      \"width\" : 200,\n      \"leftOffset\" : 20,\n      \"characterIndex\" : 3,\n      \"index\" : 2,\n      \"text\" : \"Signature:\",\n      \"height\" : 50\n    },\n    \"height\" : 3.616076749251911\n  } ],\n  \"extractionTypes\" : [ \"extractionTypes\", \"extractionTypes\" ],\n  \"status\" : \"status\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Document>(exampleJson)
                        : default(Document);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates the specified document.
        /// </summary>
        /// <remarks>Updates the specified document.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/api/packages/{packageId}/documents/{documentId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Document), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdPut([FromRoute][Required]string packageId, [FromRoute][Required]string documentId, [FromBody]Document body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Document));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"description\" : \"description\",\n  \"index\" : 6,\n  \"externalSigned\" : false,\n  \"imprintFields\" : [ {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"top\" : 1.2315135367772556,\n    \"left\" : 4.145608029883936,\n    \"subtype\" : \"LABEL\",\n    \"editable\" : true,\n    \"name\" : \"name\",\n    \"width\" : 7.386281948385884,\n    \"id\" : \"id\",\n    \"page\" : 2,\n    \"type\" : \"INPUT\",\n    \"value\" : \"value\",\n    \"height\" : 1.0246457001441578\n  }, {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"top\" : 1.2315135367772556,\n    \"left\" : 4.145608029883936,\n    \"subtype\" : \"LABEL\",\n    \"editable\" : true,\n    \"name\" : \"name\",\n    \"width\" : 7.386281948385884,\n    \"id\" : \"id\",\n    \"page\" : 2,\n    \"type\" : \"INPUT\",\n    \"value\" : \"value\",\n    \"height\" : 1.0246457001441578\n  } ],\n  \"extract\" : true,\n  \"pages\" : [ {\n    \"top\" : 9.965781217890562,\n    \"left\" : 4.965218492984954,\n    \"width\" : 5.025004791520295,\n    \"index\" : 7,\n    \"id\" : \"id\",\n    \"version\" : 1,\n    \"height\" : 9.369310271410669\n  }, {\n    \"top\" : 9.965781217890562,\n    \"left\" : 4.965218492984954,\n    \"width\" : 5.025004791520295,\n    \"index\" : 7,\n    \"id\" : \"id\",\n    \"version\" : 1,\n    \"height\" : 9.369310271410669\n  } ],\n  \"size\" : 1,\n  \"signerVerificationToken\" : \"signerVerificationToken\",\n  \"tagged\" : true,\n  \"approvals\" : [ {\n    \"role\" : \"role\",\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"name\" : \"name\",\n    \"enforceCaptureSignature\" : true,\n    \"accepted\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"signed\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"optional\" : true,\n    \"id\" : \"id\",\n    \"fields\" : [ null, null ]\n  }, {\n    \"role\" : \"role\",\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"name\" : \"name\",\n    \"enforceCaptureSignature\" : true,\n    \"accepted\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"signed\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"optional\" : true,\n    \"id\" : \"id\",\n    \"fields\" : [ null, null ]\n  } ],\n  \"name\" : \"name\",\n  \"signedHash\" : \"signedHash\",\n  \"id\" : \"id\",\n  \"fields\" : [ {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"binding\" : \"binding\",\n    \"type\" : \"SIGNATURE\",\n    \"extract\" : true,\n    \"top\" : 9.301444243932576,\n    \"left\" : 2.3021358869347655,\n    \"subtype\" : \"FULLNAME\",\n    \"name\" : \"name\",\n    \"width\" : 7.061401241503109,\n    \"id\" : \"id\",\n    \"page\" : 5,\n    \"value\" : \"value\",\n    \"validation\" : {\n      \"minimumRequired\" : 5,\n      \"minLength\" : 1,\n      \"pattern\" : \"pattern\",\n      \"errorMessage\" : \"errorMessage\",\n      \"errorCode\" : 6,\n      \"maxLength\" : 0,\n      \"required\" : true,\n      \"enum\" : [ \"enum\", \"enum\" ],\n      \"group\" : \"group\"\n    },\n    \"extractAnchor\" : {\n      \"topOffset\" : 100,\n      \"anchorPoint\" : \"TOPLEFT\",\n      \"width\" : 200,\n      \"leftOffset\" : 20,\n      \"characterIndex\" : 3,\n      \"index\" : 2,\n      \"text\" : \"Signature:\",\n      \"height\" : 50\n    },\n    \"height\" : 3.616076749251911\n  }, {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"binding\" : \"binding\",\n    \"type\" : \"SIGNATURE\",\n    \"extract\" : true,\n    \"top\" : 9.301444243932576,\n    \"left\" : 2.3021358869347655,\n    \"subtype\" : \"FULLNAME\",\n    \"name\" : \"name\",\n    \"width\" : 7.061401241503109,\n    \"id\" : \"id\",\n    \"page\" : 5,\n    \"value\" : \"value\",\n    \"validation\" : {\n      \"minimumRequired\" : 5,\n      \"minLength\" : 1,\n      \"pattern\" : \"pattern\",\n      \"errorMessage\" : \"errorMessage\",\n      \"errorCode\" : 6,\n      \"maxLength\" : 0,\n      \"required\" : true,\n      \"enum\" : [ \"enum\", \"enum\" ],\n      \"group\" : \"group\"\n    },\n    \"extractAnchor\" : {\n      \"topOffset\" : 100,\n      \"anchorPoint\" : \"TOPLEFT\",\n      \"width\" : 200,\n      \"leftOffset\" : 20,\n      \"characterIndex\" : 3,\n      \"index\" : 2,\n      \"text\" : \"Signature:\",\n      \"height\" : 50\n    },\n    \"height\" : 3.616076749251911\n  } ],\n  \"extractionTypes\" : [ \"extractionTypes\", \"extractionTypes\" ],\n  \"status\" : \"status\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Document>(exampleJson)
                        : default(Document);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Signs all documents in a package.
        /// </summary>
        /// <remarks>Signs all documents in a specified package.</remarks>
        /// <param name="body">The documents should include only the ids, and the autograph string, if there are handwritten signatures.</param>
        /// <param name="packageId">The unique package id.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/packages/{packageId}/documents/signed_documents")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdSignedDocumentsPost")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdSignedDocumentsPost([FromBody]SignedDocuments body, [FromRoute][Required]string packageId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Adds a new document to an existing package.
        /// </summary>
        /// <remarks>Adds a new document to an existing package by using a document resource.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/packages/{packageId}/documents")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Document), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsPost([FromRoute][Required]string packageId, [FromBody]Document body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Document));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"description\" : \"description\",\n  \"index\" : 6,\n  \"externalSigned\" : false,\n  \"imprintFields\" : [ {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"top\" : 1.2315135367772556,\n    \"left\" : 4.145608029883936,\n    \"subtype\" : \"LABEL\",\n    \"editable\" : true,\n    \"name\" : \"name\",\n    \"width\" : 7.386281948385884,\n    \"id\" : \"id\",\n    \"page\" : 2,\n    \"type\" : \"INPUT\",\n    \"value\" : \"value\",\n    \"height\" : 1.0246457001441578\n  }, {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"top\" : 1.2315135367772556,\n    \"left\" : 4.145608029883936,\n    \"subtype\" : \"LABEL\",\n    \"editable\" : true,\n    \"name\" : \"name\",\n    \"width\" : 7.386281948385884,\n    \"id\" : \"id\",\n    \"page\" : 2,\n    \"type\" : \"INPUT\",\n    \"value\" : \"value\",\n    \"height\" : 1.0246457001441578\n  } ],\n  \"extract\" : true,\n  \"pages\" : [ {\n    \"top\" : 9.965781217890562,\n    \"left\" : 4.965218492984954,\n    \"width\" : 5.025004791520295,\n    \"index\" : 7,\n    \"id\" : \"id\",\n    \"version\" : 1,\n    \"height\" : 9.369310271410669\n  }, {\n    \"top\" : 9.965781217890562,\n    \"left\" : 4.965218492984954,\n    \"width\" : 5.025004791520295,\n    \"index\" : 7,\n    \"id\" : \"id\",\n    \"version\" : 1,\n    \"height\" : 9.369310271410669\n  } ],\n  \"size\" : 1,\n  \"signerVerificationToken\" : \"signerVerificationToken\",\n  \"tagged\" : true,\n  \"approvals\" : [ {\n    \"role\" : \"role\",\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"name\" : \"name\",\n    \"enforceCaptureSignature\" : true,\n    \"accepted\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"signed\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"optional\" : true,\n    \"id\" : \"id\",\n    \"fields\" : [ null, null ]\n  }, {\n    \"role\" : \"role\",\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"name\" : \"name\",\n    \"enforceCaptureSignature\" : true,\n    \"accepted\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"signed\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"optional\" : true,\n    \"id\" : \"id\",\n    \"fields\" : [ null, null ]\n  } ],\n  \"name\" : \"name\",\n  \"signedHash\" : \"signedHash\",\n  \"id\" : \"id\",\n  \"fields\" : [ {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"binding\" : \"binding\",\n    \"type\" : \"SIGNATURE\",\n    \"extract\" : true,\n    \"top\" : 9.301444243932576,\n    \"left\" : 2.3021358869347655,\n    \"subtype\" : \"FULLNAME\",\n    \"name\" : \"name\",\n    \"width\" : 7.061401241503109,\n    \"id\" : \"id\",\n    \"page\" : 5,\n    \"value\" : \"value\",\n    \"validation\" : {\n      \"minimumRequired\" : 5,\n      \"minLength\" : 1,\n      \"pattern\" : \"pattern\",\n      \"errorMessage\" : \"errorMessage\",\n      \"errorCode\" : 6,\n      \"maxLength\" : 0,\n      \"required\" : true,\n      \"enum\" : [ \"enum\", \"enum\" ],\n      \"group\" : \"group\"\n    },\n    \"extractAnchor\" : {\n      \"topOffset\" : 100,\n      \"anchorPoint\" : \"TOPLEFT\",\n      \"width\" : 200,\n      \"leftOffset\" : 20,\n      \"characterIndex\" : 3,\n      \"index\" : 2,\n      \"text\" : \"Signature:\",\n      \"height\" : 50\n    },\n    \"height\" : 3.616076749251911\n  }, {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"binding\" : \"binding\",\n    \"type\" : \"SIGNATURE\",\n    \"extract\" : true,\n    \"top\" : 9.301444243932576,\n    \"left\" : 2.3021358869347655,\n    \"subtype\" : \"FULLNAME\",\n    \"name\" : \"name\",\n    \"width\" : 7.061401241503109,\n    \"id\" : \"id\",\n    \"page\" : 5,\n    \"value\" : \"value\",\n    \"validation\" : {\n      \"minimumRequired\" : 5,\n      \"minLength\" : 1,\n      \"pattern\" : \"pattern\",\n      \"errorMessage\" : \"errorMessage\",\n      \"errorCode\" : 6,\n      \"maxLength\" : 0,\n      \"required\" : true,\n      \"enum\" : [ \"enum\", \"enum\" ],\n      \"group\" : \"group\"\n    },\n    \"extractAnchor\" : {\n      \"topOffset\" : 100,\n      \"anchorPoint\" : \"TOPLEFT\",\n      \"width\" : 200,\n      \"leftOffset\" : 20,\n      \"characterIndex\" : 3,\n      \"index\" : 2,\n      \"text\" : \"Signature:\",\n      \"height\" : 50\n    },\n    \"height\" : 3.616076749251911\n  } ],\n  \"extractionTypes\" : [ \"extractionTypes\", \"extractionTypes\" ],\n  \"status\" : \"status\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Document>(exampleJson)
                        : default(Document);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Reorders the documents in a package.
        /// </summary>
        /// <remarks>Reorders the documents in a package.</remarks>
        /// <param name="body">The list of every Document ID and its position within the list.</param>
        /// <param name="packageId">The unique package id.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/api/packages/{packageId}/documents")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsPut([FromBody]List<DocumentReordering> body, [FromRoute][Required]string packageId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{ }";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Object>(exampleJson)
                        : default(Object);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates a signature confirmation.
        /// </summary>
        /// <remarks>Confirms that the application can execute the signing process on the document.</remarks>
        /// <param name="body">The document object (it might include only the id) and the autograph string, if there are handwritten signatures.</param>
        /// <param name="packageId">The unique package id.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/packages/{packageId}/documents/signConfirm")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsSignConfirmPost")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsSignConfirmPost([FromBody]SignedDocument body, [FromRoute][Required]string packageId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Retrieves Document Visibility information.
        /// </summary>
        /// <remarks>Retrieves information about which recipients can view specific documents in a package during a Signing Ceremony.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/packages/{packageId}/documents/visibility")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsVisibilityGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2009), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsVisibilityGet([FromRoute][Required]string packageId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2009));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"configurations\" : [ {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"roleUids\" : [ \"roleUids\", \"roleUids\" ],\n    \"documentUid\" : \"documentUid\",\n    \"name\" : \"name\",\n    \"id\" : \"id\"\n  }, {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"roleUids\" : [ \"roleUids\", \"roleUids\" ],\n    \"documentUid\" : \"documentUid\",\n    \"name\" : \"name\",\n    \"id\" : \"id\"\n  } ],\n  \"name\" : \"name\",\n  \"id\" : \"id\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse2009>(exampleJson)
                        : default(InlineResponse2009);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates Document Visibility.
        /// </summary>
        /// <remarks>Retrieves information about which recipients can view specific documents in a package during a Signing Ceremony. The response is a Document Visibility object that contains a list of configurations. Each configuration has&amp;#58; (1) the Document ID of a specific document; (2) a list of Role IDs of the signers who can view the document. Note that&amp;#58; Documents not in the Document Visibility object are visible to all recipients. The Package Owner can always see all documents in the package, regardless of its Document Visibility configuration.</remarks>
        /// <param name="body">The document visibility object.</param>
        /// <param name="packageId">The unique package id.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/packages/{packageId}/documents/visibility")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsVisibilityPost")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsVisibilityPost([FromBody]DocumentVisibility body, [FromRoute][Required]string packageId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Retrieves zipped documents.
        /// </summary>
        /// <remarks>Retrieves a zipped file that contains all documents that were added to the package.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="flatten">Flatten the pdf.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/packages/{packageId}/documents/zip")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsZipGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(byte[]), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsZipGet([FromRoute][Required]string packageId, [FromQuery]bool? flatten)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(byte[]));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<byte[]>(exampleJson)
                        : default(byte[]);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
