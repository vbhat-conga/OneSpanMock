/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class RemindersApiController : ControllerBase
    { 
        /// <summary>
        /// Deletes the Reminder Schedule of a package.
        /// </summary>
        /// <remarks>Deletes the Reminder Schedule of the specified package.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <response code="204">OK. Empty Reminder Schedule.</response>
        /// <response code="400">Validation error</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/api/packages/{packageId}/reminders")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdRemindersDelete")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Validation error")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdRemindersDelete([FromRoute][Required]string packageId)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Retrieves the Reminder Schedule of a package.
        /// </summary>
        /// <remarks>Retrieve the Reminder Schedule of a package. A Reminder Schedule for the package must already exist.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <response code="200">OK</response>
        /// <response code="204">OK. Empty Reminder Schedule.</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/packages/{packageId}/reminders")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdRemindersGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(PackageReminderSchedule), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdRemindersGet([FromRoute][Required]string packageId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PackageReminderSchedule));

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"reminders\" : [ {\n    \"date\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"sentDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"date\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"sentDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"intervalInDays\" : 0,\n  \"startInDaysDelay\" : 1,\n  \"packageId\" : \"packageId\",\n  \"repetitionsCount\" : 6\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PackageReminderSchedule>(exampleJson)
                        : default(PackageReminderSchedule);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates a Reminder Schedule for a package.
        /// </summary>
        /// <remarks>The user can only create a reminder schedule on packages that are not yet sent. All reminders are created automatically by the system when a package is sent.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/packages/{packageId}/reminders")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdRemindersPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(PackageReminderSchedule), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdRemindersPost([FromRoute][Required]string packageId, [FromBody]PackageReminderSchedule body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PackageReminderSchedule));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"reminders\" : [ {\n    \"date\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"sentDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"date\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"sentDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"intervalInDays\" : 0,\n  \"startInDaysDelay\" : 1,\n  \"packageId\" : \"packageId\",\n  \"repetitionsCount\" : 6\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PackageReminderSchedule>(exampleJson)
                        : default(PackageReminderSchedule);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates the Reminder Schedule of a package.
        /// </summary>
        /// <remarks>Updates the Reminder Schedule of a specified package. This resource is not available for packages whose status is SENT.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/api/packages/{packageId}/reminders")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdRemindersPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(PackageReminderSchedule), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdRemindersPut([FromRoute][Required]string packageId, [FromBody]PackageReminderSchedule body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PackageReminderSchedule));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"reminders\" : [ {\n    \"date\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"sentDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  }, {\n    \"date\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"sentDate\" : \"2000-01-23T04:56:07.000+00:00\"\n  } ],\n  \"intervalInDays\" : 0,\n  \"startInDaysDelay\" : 1,\n  \"packageId\" : \"packageId\",\n  \"repetitionsCount\" : 6\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PackageReminderSchedule>(exampleJson)
                        : default(PackageReminderSchedule);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
