/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AuthenticationTokensApiController : ControllerBase
    { 
        /// <summary>
        /// Creates a new sender authentication token.
        /// </summary>
        /// <remarks>Creates a token that can be used to obtain a valid session for the owner of an existing package, so they can edit the package using the Designer view, and then distribute it for signing. The destination must be a valid destination for a sender and is restricted to a particular package. It is single-use, and expires after 30 minutes (though this is configurable). This token allows you to login through a get to the /auth?senderAuthenticationToken&#x3D;VALUE&amp;target&#x3D;http://environment/destination.</remarks>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/authenticationTokens/sender")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiAuthenticationTokensSeenderPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(SenderAuthenticationToken), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiAuthenticationTokensSeenderPost([FromBody]SenderAuthenticationToken body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SenderAuthenticationToken));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"packageId\" : \"packageId\",\n  \"value\" : \"value\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SenderAuthenticationToken>(exampleJson)
                        : default(SenderAuthenticationToken);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates a new multi-use signer authentication token.
        /// </summary>
        /// <remarks>Creates a token that can be used to obtain a valid session for a particular signer of an existing package, so they can sign the package. This token is restricted to a single package, and expires after 30 minutes (though this is configurable). However, it can be used multiple times. This token allows you to login through a get to the /auth?senderAuthenticationToken&#x3D;VALUE&amp;target&#x3D;http://environment/destination. The destination must be a valid destination for a signer.</remarks>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/authenticationTokens/signer/multiUse")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiAuthenticationTokensSignerMultiUsePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(SignerAuthenticationToken), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiAuthenticationTokensSignerMultiUsePost([FromBody]SignerAuthenticationToken body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SignerAuthenticationToken));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"signerId\" : \"signerId\",\n  \"sessionFields\" : {\n    \"fields\" : {\n      \"key\" : { }\n    }\n  },\n  \"packageId\" : \"packageId\",\n  \"value\" : \"value\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SignerAuthenticationToken>(exampleJson)
                        : default(SignerAuthenticationToken);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates a new single use signer authentication token.
        /// </summary>
        /// <remarks>Creates a token that can be used to obtain a valid session for a particular signer of an existing package, so they can sign the package. This token is restricted to a single package. It is single-use, and expires after 30 minutes (though this is configurable). This token allows you to login through a get to the /auth?senderAuthenticationToken&#x3D;VALUE&amp;target&#x3D;http://environment/destination. The destination must be a valid destination for a signer.</remarks>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/authenticationTokens/signer/singleUse")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiAuthenticationTokensSignerSingleUsePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(SignerAuthenticationToken), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiAuthenticationTokensSignerSingleUsePost([FromBody]SignerAuthenticationToken body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SignerAuthenticationToken));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"signerId\" : \"signerId\",\n  \"sessionFields\" : {\n    \"fields\" : {\n      \"key\" : { }\n    }\n  },\n  \"packageId\" : \"packageId\",\n  \"value\" : \"value\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<SignerAuthenticationToken>(exampleJson)
                        : default(SignerAuthenticationToken);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates a new authentication token.
        /// </summary>
        /// <remarks>Creates a token that can be used to obtain a valid session for a particular user of the system. This token is single-use, and expires after 30 minutes (though this is configurable). This token allows you to login through a get to the /auth?senderAuthenticationToken&#x3D;VALUE&amp;target&#x3D;http://environment/destination.</remarks>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/authenticationTokens/user")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiAuthenticationTokensUserPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse20010), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiAuthenticationTokensUserPost()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse20010));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"value\" : \"ZDk5ZjllYTYtMDUzYy00MzE4LTk4OGUtMWQ3ZjE3NmFjNzhk\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse20010>(exampleJson)
                        : default(InlineResponse20010);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
