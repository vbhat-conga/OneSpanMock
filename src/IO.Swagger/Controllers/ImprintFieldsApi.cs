/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ImprintFieldsApiController : ControllerBase
    { 
        /// <summary>
        /// Deletes all imprint fields assigned to the document.
        /// </summary>
        /// <remarks>Deletes all imprint fields assigned to the document.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/api/packages/{packageId}/documents/{documentId}/imprint-fields")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdImprintFieldsDelete")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdImprintFieldsDelete([FromRoute][Required]string packageId, [FromRoute][Required]string documentId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Deletes existing imprint field.
        /// </summary>
        /// <remarks>Deletes existing imprint field.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <param name="fieldId">The unique field id.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Validation error</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/api/packages/{packageId}/documents/{documentId}/imprint-fields/{fieldId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdImprintFieldsFieldIdDelete")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Validation error")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdImprintFieldsFieldIdDelete([FromRoute][Required]string packageId, [FromRoute][Required]string documentId, [FromRoute][Required]string fieldId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Retrieves existing imprint field.
        /// </summary>
        /// <remarks>Retrieves existing imprint field.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <param name="fieldId">The unique field id.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Validation error</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/packages/{packageId}/documents/{documentId}/imprint-fields/{fieldId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdImprintFieldsFieldIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ImprintField), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Validation error")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdImprintFieldsFieldIdGet([FromRoute][Required]string packageId, [FromRoute][Required]string documentId, [FromRoute][Required]string fieldId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ImprintField));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"top\" : 1.2315135367772556,\n  \"left\" : 4.145608029883936,\n  \"subtype\" : \"LABEL\",\n  \"editable\" : true,\n  \"name\" : \"name\",\n  \"width\" : 7.386281948385884,\n  \"id\" : \"id\",\n  \"page\" : 2,\n  \"type\" : \"INPUT\",\n  \"value\" : \"value\",\n  \"height\" : 1.0246457001441578\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ImprintField>(exampleJson)
                        : default(ImprintField);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates existing imprint field.
        /// </summary>
        /// <remarks>Updates existing imprint field. Note that the JSON Field ID will be ignored and replaced by the one from the query parameter.</remarks>
        /// <param name="body">The sample payload.</param>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <param name="fieldId">The unique field id.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Validation error</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/api/packages/{packageId}/documents/{documentId}/imprint-fields/{fieldId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdImprintFieldsFieldIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(ImprintField), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Validation error")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdImprintFieldsFieldIdPut([FromBody]ImprintField body, [FromRoute][Required]string packageId, [FromRoute][Required]string documentId, [FromRoute][Required]string fieldId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ImprintField));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"top\" : 1.2315135367772556,\n  \"left\" : 4.145608029883936,\n  \"subtype\" : \"LABEL\",\n  \"editable\" : true,\n  \"name\" : \"name\",\n  \"width\" : 7.386281948385884,\n  \"id\" : \"id\",\n  \"page\" : 2,\n  \"type\" : \"INPUT\",\n  \"value\" : \"value\",\n  \"height\" : 1.0246457001441578\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ImprintField>(exampleJson)
                        : default(ImprintField);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates new imprint field with an autogenerated id.
        /// </summary>
        /// <remarks>Creates new imprint field with an autogenerated id.</remarks>
        /// <param name="body">The sample payload.</param>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Validation error</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/packages/{packageId}/documents/{documentId}/imprint-fields")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdImprintFieldsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ImprintField), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Validation error")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdImprintFieldsPost([FromBody]ImprintField body, [FromRoute][Required]string packageId, [FromRoute][Required]string documentId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ImprintField));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"top\" : 1.2315135367772556,\n  \"left\" : 4.145608029883936,\n  \"subtype\" : \"LABEL\",\n  \"editable\" : true,\n  \"name\" : \"name\",\n  \"width\" : 7.386281948385884,\n  \"id\" : \"id\",\n  \"page\" : 2,\n  \"type\" : \"INPUT\",\n  \"value\" : \"value\",\n  \"height\" : 1.0246457001441578\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ImprintField>(exampleJson)
                        : default(ImprintField);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
