/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ApprovalsApiController : ControllerBase
    { 
        /// <summary>
        /// Deletes an existing approval.
        /// </summary>
        /// <remarks>Deletes a specific approval that already exists for a package or document.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <param name="approvalId">The unique approval id.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Validation error</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/api/packages/{packageId}/documents/{documentId}/approvals/{approvalId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdApprovalsApporvalIdDelete")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Validation error")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdApprovalsApporvalIdDelete([FromRoute][Required]string packageId, [FromRoute][Required]string documentId, [FromRoute][Required]string approvalId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates the conditions for a given field
        /// </summary>
        /// <remarks>Updates the conditions for a given field. In addition to the array of conditions, the payload should contain all Field properties. The value of the field is replaced by this payload.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <param name="approvalId">The unique approval id.</param>
        /// <param name="fieldId">The unique field id.</param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Validation error</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/api/packages/{packageId}/documents/{documentId}/approvals/{approvalId}/fields/{fieldId}/conditionalFields")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdApprovalsApporvalIdFieldsFieldIdConditionalFieldsPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConditionalFields), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Validation error")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdApprovalsApporvalIdFieldsFieldIdConditionalFieldsPut([FromRoute][Required]string packageId, [FromRoute][Required]string documentId, [FromRoute][Required]string approvalId, [FromRoute][Required]string fieldId, [FromBody]ConditionalFields body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConditionalFields));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ConditionalFields>(exampleJson)
                        : default(ConditionalFields);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Deletes an existing field related to an existing approval.
        /// </summary>
        /// <remarks>Deletes an existing field that has already been added to an existing approval.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <param name="approvalId">The unique approval id.</param>
        /// <param name="fieldId">The unique field id.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/api/packages/{packageId}/documents/{documentId}/approvals/{approvalId}/fields/{fieldId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdApprovalsApporvalIdFieldsFieldIdDelete")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdApprovalsApporvalIdFieldsFieldIdDelete([FromRoute][Required]string packageId, [FromRoute][Required]string documentId, [FromRoute][Required]string approvalId, [FromRoute][Required]string fieldId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Retrieves an existing field related to an existing approval.
        /// </summary>
        /// <remarks>Retrieves a field that exists on an already created approval.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <param name="approvalId">The unique approval id.</param>
        /// <param name="fieldId">The unique field id.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Validation error</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/packages/{packageId}/documents/{documentId}/approvals/{approvalId}/fields/{fieldId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdApprovalsApporvalIdFieldsFieldIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Field), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Validation error")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdApprovalsApporvalIdFieldsFieldIdGet([FromRoute][Required]string packageId, [FromRoute][Required]string documentId, [FromRoute][Required]string approvalId, [FromRoute][Required]string fieldId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Field));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"binding\" : \"binding\",\n  \"type\" : \"SIGNATURE\",\n  \"extract\" : true,\n  \"top\" : 9.301444243932576,\n  \"left\" : 2.3021358869347655,\n  \"subtype\" : \"FULLNAME\",\n  \"name\" : \"name\",\n  \"width\" : 7.061401241503109,\n  \"id\" : \"id\",\n  \"page\" : 5,\n  \"value\" : \"value\",\n  \"validation\" : {\n    \"minimumRequired\" : 5,\n    \"minLength\" : 1,\n    \"pattern\" : \"pattern\",\n    \"errorMessage\" : \"errorMessage\",\n    \"errorCode\" : 6,\n    \"maxLength\" : 0,\n    \"required\" : true,\n    \"enum\" : [ \"enum\", \"enum\" ],\n    \"group\" : \"group\"\n  },\n  \"extractAnchor\" : {\n    \"topOffset\" : 100,\n    \"anchorPoint\" : \"TOPLEFT\",\n    \"width\" : 200,\n    \"leftOffset\" : 20,\n    \"characterIndex\" : 3,\n    \"index\" : 2,\n    \"text\" : \"Signature:\",\n    \"height\" : 50\n  },\n  \"height\" : 3.616076749251911\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Field>(exampleJson)
                        : default(Field);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates a new field related to an existing approval.
        /// </summary>
        /// <remarks>Creates a new field that can then be added to an existing approval.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <param name="approvalId">The unique approval id.</param>
        /// <param name="fieldId">The unique field id.</param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Validation error</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/packages/{packageId}/documents/{documentId}/approvals/{approvalId}/fields/{fieldId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdApprovalsApporvalIdFieldsFieldIdPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Validation error")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdApprovalsApporvalIdFieldsFieldIdPost([FromRoute][Required]string packageId, [FromRoute][Required]string documentId, [FromRoute][Required]string approvalId, [FromRoute][Required]string fieldId, [FromBody]Field body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Updates an existing field related to an existing approval.
        /// </summary>
        /// <remarks>Updates an existing field related to an existing approval. Note that the JSON Field ID will be ignored and replaced by the one from the query parameter.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <param name="approvalId">The unique approval id.</param>
        /// <param name="fieldId">The unique field id.</param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Validation error</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/api/packages/{packageId}/documents/{documentId}/approvals/{approvalId}/fields/{fieldId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdApprovalsApporvalIdFieldsFieldIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Field), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Validation error")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdApprovalsApporvalIdFieldsFieldIdPut([FromRoute][Required]string packageId, [FromRoute][Required]string documentId, [FromRoute][Required]string approvalId, [FromRoute][Required]string fieldId, [FromBody]Field body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Field));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"binding\" : \"binding\",\n  \"type\" : \"SIGNATURE\",\n  \"extract\" : true,\n  \"top\" : 9.301444243932576,\n  \"left\" : 2.3021358869347655,\n  \"subtype\" : \"FULLNAME\",\n  \"name\" : \"name\",\n  \"width\" : 7.061401241503109,\n  \"id\" : \"id\",\n  \"page\" : 5,\n  \"value\" : \"value\",\n  \"validation\" : {\n    \"minimumRequired\" : 5,\n    \"minLength\" : 1,\n    \"pattern\" : \"pattern\",\n    \"errorMessage\" : \"errorMessage\",\n    \"errorCode\" : 6,\n    \"maxLength\" : 0,\n    \"required\" : true,\n    \"enum\" : [ \"enum\", \"enum\" ],\n    \"group\" : \"group\"\n  },\n  \"extractAnchor\" : {\n    \"topOffset\" : 100,\n    \"anchorPoint\" : \"TOPLEFT\",\n    \"width\" : 200,\n    \"leftOffset\" : 20,\n    \"characterIndex\" : 3,\n    \"index\" : 2,\n    \"text\" : \"Signature:\",\n    \"height\" : 50\n  },\n  \"height\" : 3.616076749251911\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Field>(exampleJson)
                        : default(Field);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates a new field with an autogenerated name related to an existing approval.
        /// </summary>
        /// <remarks>Creates a new field for an existing approval. The new field is created with an autogenerated name.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <param name="approvalId">The unique approval id.</param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Validation error</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/packages/{packageId}/documents/{documentId}/approvals/{approvalId}/fields")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdApprovalsApporvalIdFieldsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Field), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Validation error")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdApprovalsApporvalIdFieldsPost([FromRoute][Required]string packageId, [FromRoute][Required]string documentId, [FromRoute][Required]string approvalId, [FromBody]Field body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Field));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"binding\" : \"binding\",\n  \"type\" : \"SIGNATURE\",\n  \"extract\" : true,\n  \"top\" : 9.301444243932576,\n  \"left\" : 2.3021358869347655,\n  \"subtype\" : \"FULLNAME\",\n  \"name\" : \"name\",\n  \"width\" : 7.061401241503109,\n  \"id\" : \"id\",\n  \"page\" : 5,\n  \"value\" : \"value\",\n  \"validation\" : {\n    \"minimumRequired\" : 5,\n    \"minLength\" : 1,\n    \"pattern\" : \"pattern\",\n    \"errorMessage\" : \"errorMessage\",\n    \"errorCode\" : 6,\n    \"maxLength\" : 0,\n    \"required\" : true,\n    \"enum\" : [ \"enum\", \"enum\" ],\n    \"group\" : \"group\"\n  },\n  \"extractAnchor\" : {\n    \"topOffset\" : 100,\n    \"anchorPoint\" : \"TOPLEFT\",\n    \"width\" : 200,\n    \"leftOffset\" : 20,\n    \"characterIndex\" : 3,\n    \"index\" : 2,\n    \"text\" : \"Signature:\",\n    \"height\" : 50\n  },\n  \"height\" : 3.616076749251911\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Field>(exampleJson)
                        : default(Field);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates an existing approval.
        /// </summary>
        /// <remarks>Updates a specific approval that has already been created for a package or document.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <param name="approvalId">The unique approval id.</param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Validation error</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/api/packages/{packageId}/documents/{documentId}/approvals/{approvalId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdApprovalsApporvalIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Approval), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Validation error")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdApprovalsApporvalIdPut([FromRoute][Required]string packageId, [FromRoute][Required]string documentId, [FromRoute][Required]string approvalId, [FromBody]Approval body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Approval));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"role\" : \"role\",\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"name\" : \"name\",\n  \"enforceCaptureSignature\" : true,\n  \"accepted\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"signed\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"optional\" : true,\n  \"id\" : \"id\",\n  \"fields\" : [ null, null ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Approval>(exampleJson)
                        : default(Approval);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves an existing approval.
        /// </summary>
        /// <remarks>Retrieves an approval that already exists for a package, or document.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <param name="approvalId">The unique approval id.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/packages/{packageId}/documents/{documentId}/approvals/{approvalId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdApprovalsApprovalIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Approval), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdApprovalsApprovalIdGet([FromRoute][Required]string packageId, [FromRoute][Required]string documentId, [FromRoute][Required]string approvalId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Approval));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"role\" : \"role\",\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"name\" : \"name\",\n  \"enforceCaptureSignature\" : true,\n  \"accepted\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"signed\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"optional\" : true,\n  \"id\" : \"id\",\n  \"fields\" : [ null, null ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Approval>(exampleJson)
                        : default(Approval);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates a new approval.
        /// </summary>
        /// <remarks>Creates a new approval for a package or document. Note that text anchor extraction cannot be used in this API call.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Validation error</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/packages/{packageId}/documents/{documentId}/approvals/")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdApprovalsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Approval), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Validation error")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdApprovalsPost([FromRoute][Required]string packageId, [FromRoute][Required]string documentId, [FromBody]Approval body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Approval));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"role\" : \"role\",\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"name\" : \"name\",\n  \"enforceCaptureSignature\" : true,\n  \"accepted\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"signed\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"optional\" : true,\n  \"id\" : \"id\",\n  \"fields\" : [ null, null ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Approval>(exampleJson)
                        : default(Approval);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates an existing approval.
        /// </summary>
        /// <remarks>Updates the approval requests that already exist on a package, or a document.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Validation error</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/api/packages/{packageId}/documents/{documentId}/approvals/")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdApprovalsPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Approval>), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Validation error")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdApprovalsPut([FromRoute][Required]string packageId, [FromRoute][Required]string documentId, [FromBody]List<Approval> body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Approval>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"role\" : \"role\",\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"name\" : \"name\",\n  \"enforceCaptureSignature\" : true,\n  \"accepted\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"signed\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"optional\" : true,\n  \"id\" : \"id\",\n  \"fields\" : [ null, null ]\n}, {\n  \"role\" : \"role\",\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"name\" : \"name\",\n  \"enforceCaptureSignature\" : true,\n  \"accepted\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"signed\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"optional\" : true,\n  \"id\" : \"id\",\n  \"fields\" : [ null, null ]\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Approval>>(exampleJson)
                        : default(List<Approval>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves all signable approvals.
        /// </summary>
        /// <remarks>Retrieves all aprovals that are eligible for signing.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="documentId">The unique document id.</param>
        /// <param name="signerId">The unique signer id.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Access Denied error</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/packages/{packageId}/documents/{documentId}/signers/{signerId}/approvals")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdDocumentsDocumentIdSignersSignerIdApprovalsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Approval>), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Access Denied error")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdDocumentsDocumentIdSignersSignerIdApprovalsGet([FromRoute][Required]string packageId, [FromRoute][Required]string documentId, [FromRoute][Required]string signerId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Approval>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"role\" : \"role\",\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"name\" : \"name\",\n  \"enforceCaptureSignature\" : true,\n  \"accepted\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"signed\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"optional\" : true,\n  \"id\" : \"id\",\n  \"fields\" : [ null, null ]\n}, {\n  \"role\" : \"role\",\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"name\" : \"name\",\n  \"enforceCaptureSignature\" : true,\n  \"accepted\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"signed\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"optional\" : true,\n  \"id\" : \"id\",\n  \"fields\" : [ null, null ]\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Approval>>(exampleJson)
                        : default(List<Approval>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
