/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SubAccountsApiController : ControllerBase
    { 
        /// <summary>
        /// Retrieves a list of the subaccounts.
        /// </summary>
        /// <remarks>The sub-accounts feature enables an organization to create child accounts within the organization&#x27;s master account. For example, an organization might want to create child accounts on the basis of its departments, geographical locations, or lines of business. Accounts can be created on three levels (parent &gt; child &gt; grandchild), enabling an organization to manage many account types under its master account.</remarks>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/account/accessibleaccounts")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiAccountAccessibleaccountsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<AccessibleAccountResponse>), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiAccountAccessibleaccountsGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<AccessibleAccountResponse>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"accountName\" : \"accountName\",\n  \"accountUid\" : \"accountUid\"\n}, {\n  \"accountName\" : \"accountName\",\n  \"accountUid\" : \"accountUid\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<AccessibleAccountResponse>>(exampleJson)
                        : default(List<AccessibleAccountResponse>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves a list of the subaccounts.
        /// </summary>
        /// <remarks>Retrieves a list of the accounts which is subaccount of current account.</remarks>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/account/subaccounts")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiAccountSubAccountsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Account>), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiAccountSubAccountsGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Account>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"owner\" : \"owner\",\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"customFields\" : [ {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"translations\" : [ {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"language\" : \"language\",\n      \"id\" : \"id\"\n    }, {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"language\" : \"language\",\n      \"id\" : \"id\"\n    } ],\n    \"name\" : \"name\",\n    \"id\" : \"id\",\n    \"value\" : \"value\",\n    \"required\" : true\n  }, {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"translations\" : [ {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"language\" : \"language\",\n      \"id\" : \"id\"\n    }, {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"language\" : \"language\",\n      \"id\" : \"id\"\n    } ],\n    \"name\" : \"name\",\n    \"id\" : \"id\",\n    \"value\" : \"value\",\n    \"required\" : true\n  } ],\n  \"logoUrl\" : \"logoUrl\",\n  \"licenses\" : [ {\n    \"paidUntil\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"transactions\" : [ {\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"price\" : {\n        \"amount\" : 0,\n        \"currency\" : {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"name\" : \"name\",\n          \"id\" : \"id\"\n        }\n      },\n      \"creditCard\" : {\n        \"number\" : \"number\",\n        \"cvv\" : \"cvv\",\n        \"name\" : \"name\",\n        \"expiration\" : {\n          \"month\" : 1,\n          \"year\" : 6\n        },\n        \"type\" : \"type\"\n      }\n    }, {\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"price\" : {\n        \"amount\" : 0,\n        \"currency\" : {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"name\" : \"name\",\n          \"id\" : \"id\"\n        }\n      },\n      \"creditCard\" : {\n        \"number\" : \"number\",\n        \"cvv\" : \"cvv\",\n        \"name\" : \"name\",\n        \"expiration\" : {\n          \"month\" : 1,\n          \"year\" : 6\n        },\n        \"type\" : \"type\"\n      }\n    } ],\n    \"plan\" : {\n      \"features\" : {\n        \"key\" : { }\n      },\n      \"quotas\" : [ {\n        \"scope\" : \"SENDER\",\n        \"limit\" : 5,\n        \"cycle\" : \"DAY\",\n        \"target\" : \"SIGNER\"\n      }, {\n        \"scope\" : \"SENDER\",\n        \"limit\" : 5,\n        \"cycle\" : \"DAY\",\n        \"target\" : \"SIGNER\"\n      } ],\n      \"original\" : \"original\",\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"contract\" : \"DAY\",\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"freeCycles\" : {\n        \"count\" : 5,\n        \"cycle\" : \"DAY\"\n      },\n      \"cycle\" : \"DAY\",\n      \"group\" : \"group\"\n    },\n    \"status\" : \"ACTIVE\"\n  }, {\n    \"paidUntil\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"transactions\" : [ {\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"price\" : {\n        \"amount\" : 0,\n        \"currency\" : {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"name\" : \"name\",\n          \"id\" : \"id\"\n        }\n      },\n      \"creditCard\" : {\n        \"number\" : \"number\",\n        \"cvv\" : \"cvv\",\n        \"name\" : \"name\",\n        \"expiration\" : {\n          \"month\" : 1,\n          \"year\" : 6\n        },\n        \"type\" : \"type\"\n      }\n    }, {\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"price\" : {\n        \"amount\" : 0,\n        \"currency\" : {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"name\" : \"name\",\n          \"id\" : \"id\"\n        }\n      },\n      \"creditCard\" : {\n        \"number\" : \"number\",\n        \"cvv\" : \"cvv\",\n        \"name\" : \"name\",\n        \"expiration\" : {\n          \"month\" : 1,\n          \"year\" : 6\n        },\n        \"type\" : \"type\"\n      }\n    } ],\n    \"plan\" : {\n      \"features\" : {\n        \"key\" : { }\n      },\n      \"quotas\" : [ {\n        \"scope\" : \"SENDER\",\n        \"limit\" : 5,\n        \"cycle\" : \"DAY\",\n        \"target\" : \"SIGNER\"\n      }, {\n        \"scope\" : \"SENDER\",\n        \"limit\" : 5,\n        \"cycle\" : \"DAY\",\n        \"target\" : \"SIGNER\"\n      } ],\n      \"original\" : \"original\",\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"contract\" : \"DAY\",\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"freeCycles\" : {\n        \"count\" : 5,\n        \"cycle\" : \"DAY\"\n      },\n      \"cycle\" : \"DAY\",\n      \"group\" : \"group\"\n    },\n    \"status\" : \"ACTIVE\"\n  } ],\n  \"logoAltTextKey\" : \"logoAltTextKey\",\n  \"name\" : \"name\",\n  \"timezoneId\" : \"timezoneId\",\n  \"company\" : {\n    \"address\" : {\n      \"zipcode\" : \"zipcode\",\n      \"country\" : \"country\",\n      \"city\" : \"city\",\n      \"address2\" : \"address2\",\n      \"address1\" : \"address1\",\n      \"state\" : \"state\"\n    },\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"name\" : \"name\",\n    \"id\" : \"id\"\n  },\n  \"id\" : \"id\",\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"providers\" : {\n    \"documents\" : [ {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"provides\" : \"provides\",\n      \"name\" : \"name\",\n      \"id\" : \"id\"\n    }, {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"provides\" : \"provides\",\n      \"name\" : \"name\",\n      \"id\" : \"id\"\n    } ],\n    \"users\" : [ null, null ]\n  }\n}, {\n  \"owner\" : \"owner\",\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"customFields\" : [ {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"translations\" : [ {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"language\" : \"language\",\n      \"id\" : \"id\"\n    }, {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"language\" : \"language\",\n      \"id\" : \"id\"\n    } ],\n    \"name\" : \"name\",\n    \"id\" : \"id\",\n    \"value\" : \"value\",\n    \"required\" : true\n  }, {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"translations\" : [ {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"language\" : \"language\",\n      \"id\" : \"id\"\n    }, {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"language\" : \"language\",\n      \"id\" : \"id\"\n    } ],\n    \"name\" : \"name\",\n    \"id\" : \"id\",\n    \"value\" : \"value\",\n    \"required\" : true\n  } ],\n  \"logoUrl\" : \"logoUrl\",\n  \"licenses\" : [ {\n    \"paidUntil\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"transactions\" : [ {\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"price\" : {\n        \"amount\" : 0,\n        \"currency\" : {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"name\" : \"name\",\n          \"id\" : \"id\"\n        }\n      },\n      \"creditCard\" : {\n        \"number\" : \"number\",\n        \"cvv\" : \"cvv\",\n        \"name\" : \"name\",\n        \"expiration\" : {\n          \"month\" : 1,\n          \"year\" : 6\n        },\n        \"type\" : \"type\"\n      }\n    }, {\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"price\" : {\n        \"amount\" : 0,\n        \"currency\" : {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"name\" : \"name\",\n          \"id\" : \"id\"\n        }\n      },\n      \"creditCard\" : {\n        \"number\" : \"number\",\n        \"cvv\" : \"cvv\",\n        \"name\" : \"name\",\n        \"expiration\" : {\n          \"month\" : 1,\n          \"year\" : 6\n        },\n        \"type\" : \"type\"\n      }\n    } ],\n    \"plan\" : {\n      \"features\" : {\n        \"key\" : { }\n      },\n      \"quotas\" : [ {\n        \"scope\" : \"SENDER\",\n        \"limit\" : 5,\n        \"cycle\" : \"DAY\",\n        \"target\" : \"SIGNER\"\n      }, {\n        \"scope\" : \"SENDER\",\n        \"limit\" : 5,\n        \"cycle\" : \"DAY\",\n        \"target\" : \"SIGNER\"\n      } ],\n      \"original\" : \"original\",\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"contract\" : \"DAY\",\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"freeCycles\" : {\n        \"count\" : 5,\n        \"cycle\" : \"DAY\"\n      },\n      \"cycle\" : \"DAY\",\n      \"group\" : \"group\"\n    },\n    \"status\" : \"ACTIVE\"\n  }, {\n    \"paidUntil\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"transactions\" : [ {\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"price\" : {\n        \"amount\" : 0,\n        \"currency\" : {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"name\" : \"name\",\n          \"id\" : \"id\"\n        }\n      },\n      \"creditCard\" : {\n        \"number\" : \"number\",\n        \"cvv\" : \"cvv\",\n        \"name\" : \"name\",\n        \"expiration\" : {\n          \"month\" : 1,\n          \"year\" : 6\n        },\n        \"type\" : \"type\"\n      }\n    }, {\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"price\" : {\n        \"amount\" : 0,\n        \"currency\" : {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"name\" : \"name\",\n          \"id\" : \"id\"\n        }\n      },\n      \"creditCard\" : {\n        \"number\" : \"number\",\n        \"cvv\" : \"cvv\",\n        \"name\" : \"name\",\n        \"expiration\" : {\n          \"month\" : 1,\n          \"year\" : 6\n        },\n        \"type\" : \"type\"\n      }\n    } ],\n    \"plan\" : {\n      \"features\" : {\n        \"key\" : { }\n      },\n      \"quotas\" : [ {\n        \"scope\" : \"SENDER\",\n        \"limit\" : 5,\n        \"cycle\" : \"DAY\",\n        \"target\" : \"SIGNER\"\n      }, {\n        \"scope\" : \"SENDER\",\n        \"limit\" : 5,\n        \"cycle\" : \"DAY\",\n        \"target\" : \"SIGNER\"\n      } ],\n      \"original\" : \"original\",\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"contract\" : \"DAY\",\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"freeCycles\" : {\n        \"count\" : 5,\n        \"cycle\" : \"DAY\"\n      },\n      \"cycle\" : \"DAY\",\n      \"group\" : \"group\"\n    },\n    \"status\" : \"ACTIVE\"\n  } ],\n  \"logoAltTextKey\" : \"logoAltTextKey\",\n  \"name\" : \"name\",\n  \"timezoneId\" : \"timezoneId\",\n  \"company\" : {\n    \"address\" : {\n      \"zipcode\" : \"zipcode\",\n      \"country\" : \"country\",\n      \"city\" : \"city\",\n      \"address2\" : \"address2\",\n      \"address1\" : \"address1\",\n      \"state\" : \"state\"\n    },\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"name\" : \"name\",\n    \"id\" : \"id\"\n  },\n  \"id\" : \"id\",\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"providers\" : {\n    \"documents\" : [ {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"provides\" : \"provides\",\n      \"name\" : \"name\",\n      \"id\" : \"id\"\n    }, {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"provides\" : \"provides\",\n      \"name\" : \"name\",\n      \"id\" : \"id\"\n    } ],\n    \"users\" : [ null, null ]\n  }\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Account>>(exampleJson)
                        : default(List<Account>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates a new subaccount for the current account.
        /// </summary>
        /// <remarks>Sub-accounts enable an organization to create child accounts within the organization&#x27;s master account. For example, an organization might want to create child accounts on the basis of its departments, geographical locations, or lines of business. Accounts can be created on three levels, parent, child, grandchild. This enables an organization to manage many account types under its master account.</remarks>
        /// <param name="body">The subAccount payload.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Validation error</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/account/subaccounts")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiAccountSubAccountsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Account), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Validation error")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiAccountSubAccountsPost([FromBody]SubAccount body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Account));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"owner\" : \"owner\",\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"customFields\" : [ {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"translations\" : [ {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"language\" : \"language\",\n      \"id\" : \"id\"\n    }, {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"language\" : \"language\",\n      \"id\" : \"id\"\n    } ],\n    \"name\" : \"name\",\n    \"id\" : \"id\",\n    \"value\" : \"value\",\n    \"required\" : true\n  }, {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"translations\" : [ {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"language\" : \"language\",\n      \"id\" : \"id\"\n    }, {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"language\" : \"language\",\n      \"id\" : \"id\"\n    } ],\n    \"name\" : \"name\",\n    \"id\" : \"id\",\n    \"value\" : \"value\",\n    \"required\" : true\n  } ],\n  \"logoUrl\" : \"logoUrl\",\n  \"licenses\" : [ {\n    \"paidUntil\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"transactions\" : [ {\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"price\" : {\n        \"amount\" : 0,\n        \"currency\" : {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"name\" : \"name\",\n          \"id\" : \"id\"\n        }\n      },\n      \"creditCard\" : {\n        \"number\" : \"number\",\n        \"cvv\" : \"cvv\",\n        \"name\" : \"name\",\n        \"expiration\" : {\n          \"month\" : 1,\n          \"year\" : 6\n        },\n        \"type\" : \"type\"\n      }\n    }, {\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"price\" : {\n        \"amount\" : 0,\n        \"currency\" : {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"name\" : \"name\",\n          \"id\" : \"id\"\n        }\n      },\n      \"creditCard\" : {\n        \"number\" : \"number\",\n        \"cvv\" : \"cvv\",\n        \"name\" : \"name\",\n        \"expiration\" : {\n          \"month\" : 1,\n          \"year\" : 6\n        },\n        \"type\" : \"type\"\n      }\n    } ],\n    \"plan\" : {\n      \"features\" : {\n        \"key\" : { }\n      },\n      \"quotas\" : [ {\n        \"scope\" : \"SENDER\",\n        \"limit\" : 5,\n        \"cycle\" : \"DAY\",\n        \"target\" : \"SIGNER\"\n      }, {\n        \"scope\" : \"SENDER\",\n        \"limit\" : 5,\n        \"cycle\" : \"DAY\",\n        \"target\" : \"SIGNER\"\n      } ],\n      \"original\" : \"original\",\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"contract\" : \"DAY\",\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"freeCycles\" : {\n        \"count\" : 5,\n        \"cycle\" : \"DAY\"\n      },\n      \"cycle\" : \"DAY\",\n      \"group\" : \"group\"\n    },\n    \"status\" : \"ACTIVE\"\n  }, {\n    \"paidUntil\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"transactions\" : [ {\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"price\" : {\n        \"amount\" : 0,\n        \"currency\" : {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"name\" : \"name\",\n          \"id\" : \"id\"\n        }\n      },\n      \"creditCard\" : {\n        \"number\" : \"number\",\n        \"cvv\" : \"cvv\",\n        \"name\" : \"name\",\n        \"expiration\" : {\n          \"month\" : 1,\n          \"year\" : 6\n        },\n        \"type\" : \"type\"\n      }\n    }, {\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"price\" : {\n        \"amount\" : 0,\n        \"currency\" : {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"name\" : \"name\",\n          \"id\" : \"id\"\n        }\n      },\n      \"creditCard\" : {\n        \"number\" : \"number\",\n        \"cvv\" : \"cvv\",\n        \"name\" : \"name\",\n        \"expiration\" : {\n          \"month\" : 1,\n          \"year\" : 6\n        },\n        \"type\" : \"type\"\n      }\n    } ],\n    \"plan\" : {\n      \"features\" : {\n        \"key\" : { }\n      },\n      \"quotas\" : [ {\n        \"scope\" : \"SENDER\",\n        \"limit\" : 5,\n        \"cycle\" : \"DAY\",\n        \"target\" : \"SIGNER\"\n      }, {\n        \"scope\" : \"SENDER\",\n        \"limit\" : 5,\n        \"cycle\" : \"DAY\",\n        \"target\" : \"SIGNER\"\n      } ],\n      \"original\" : \"original\",\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"contract\" : \"DAY\",\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"id\" : \"id\",\n      \"freeCycles\" : {\n        \"count\" : 5,\n        \"cycle\" : \"DAY\"\n      },\n      \"cycle\" : \"DAY\",\n      \"group\" : \"group\"\n    },\n    \"status\" : \"ACTIVE\"\n  } ],\n  \"logoAltTextKey\" : \"logoAltTextKey\",\n  \"name\" : \"name\",\n  \"timezoneId\" : \"timezoneId\",\n  \"company\" : {\n    \"address\" : {\n      \"zipcode\" : \"zipcode\",\n      \"country\" : \"country\",\n      \"city\" : \"city\",\n      \"address2\" : \"address2\",\n      \"address1\" : \"address1\",\n      \"state\" : \"state\"\n    },\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"name\" : \"name\",\n    \"id\" : \"id\"\n  },\n  \"id\" : \"id\",\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"providers\" : {\n    \"documents\" : [ {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"provides\" : \"provides\",\n      \"name\" : \"name\",\n      \"id\" : \"id\"\n    }, {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"provides\" : \"provides\",\n      \"name\" : \"name\",\n      \"id\" : \"id\"\n    } ],\n    \"users\" : [ null, null ]\n  }\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Account>(exampleJson)
                        : default(Account);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates a subAccount.
        /// </summary>
        /// <remarks>Updates a subaccount with information specified in the parameters.</remarks>
        /// <param name="body">The subAccount to be updated.</param>
        /// <param name="accountId"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Validation error</response>
        /// <response code="401">Not Authorized</response>
        [HttpPut]
        [Route("/api/account/subaccounts/{accountId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiAccountSubAccountsPut")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Validation error")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        public virtual IActionResult ApiAccountSubAccountsPut([FromBody]SubAccount body, [FromRoute][Required]string accountId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Retrieves a list of API keys for this current user in the subaccounts.
        /// </summary>
        /// <remarks>Retrieves a list of API keys for this current user in the subaccounts. This current user should have User Management, Sub Account Management and Api Access permission in different sub account in order to get the Api Key.</remarks>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/account/subaccountApiKeys")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiAccountSubaccountApiKeysGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SubAccountApiKeys>), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiAccountSubaccountApiKeysGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<SubAccountApiKeys>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "[ {\n  \"apiKey\" : \"apiKey\",\n  \"accountName\" : \"accountName\",\n  \"accountUid\" : \"accountUid\"\n}, {\n  \"apiKey\" : \"apiKey\",\n  \"accountName\" : \"accountName\",\n  \"accountUid\" : \"accountUid\"\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<SubAccountApiKeys>>(exampleJson)
                        : default(List<SubAccountApiKeys>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
