/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class VirtualRoomApiController : ControllerBase
    { 
        /// <summary>
        /// Retrieves the configuration of a virtual room for specific package.
        /// </summary>
        /// <remarks>Virtual rooms give you the ability to support your business using remote and online tools. Virtual rooms allow you to help your signers complete their transactions with the same level of support that they would get from a face to face interaction. This call allows you to retreive the configurations of a virtual room that has been created for a specific transaction.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="_default">When used, returns the default virtual room configuration. The default virtual room configuration is not related to any specific transaction.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/packages/{packageId}/virtual-room/config")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdVirtualRoomConfigGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(VirtualRoom), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdVirtualRoomConfigGet([FromRoute][Required]string packageId, [FromQuery]bool? _default)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VirtualRoom));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"startDatetime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"video\" : false,\n  \"videoRecording\" : false\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<VirtualRoom>(exampleJson)
                        : default(VirtualRoom);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Deletes a masked field.
        /// </summary>
        /// <remarks>In a Virtual Room transaction, deletes a specified field from a list of other masked fields.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="maskedFieldId">Field id in following format: {documentId}-{approvalId}-{fieldId}.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/api/packages/{packageId}/virtual-room/config/masked-fields/{maskedFieldId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdVirtualRoomConfigMaskedFieldsDelete")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdVirtualRoomConfigMaskedFieldsDelete([FromRoute][Required]string packageId, [FromRoute][Required]string maskedFieldId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Retrieves list of masked fields.
        /// </summary>
        /// <remarks>In a Virtual Room transaction, returns a list of field id&#x27;s that are masked. This means that these fields cannot be seen by other signers in the Virtual Room transaction.   Returns a list of fields in following format: {documentId}-{approvalId}-{fieldId}.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/packages/{packageId}/virtual-room/config/masked-fields")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdVirtualRoomConfigMaskedFieldsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdVirtualRoomConfigMaskedFieldsGet([FromRoute][Required]string packageId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<string>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "\"[\"ffab89e286b8b4d75420e443e5e77dfca45264aee26c8fd6-tqHXxte27C4K-ZmJbkStS1wES\",\"ffab89e286b8b4d75420e443e5e77dfca45264aee26c8fd6-tqHXxte27C4K-DctMQReqteUQ\"]\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<string>>(exampleJson)
                        : default(List<string>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Defines the fields to be masked.
        /// </summary>
        /// <remarks>In a Virtual Room transaction, defines the fields that will be masked from other signers in the transaction. This means that these fields cannot be seen by the other signers.   Takes a list of fields in following format: {documentId}-{approvalId}-{fieldId}.</remarks>
        /// <param name="body">List of field id&#x27;s to be masked in a following format: {documentId}-{approvalId}-{fieldId}.</param>
        /// <param name="packageId">The unique package id.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/packages/{packageId}/virtual-room/config/masked-fields")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdVirtualRoomConfigMaskedFieldsPost")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdVirtualRoomConfigMaskedFieldsPost([FromBody]List<string> body, [FromRoute][Required]string packageId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Adds field to a list of masked fields in a transaction.
        /// </summary>
        /// <remarks>Adds a field to a list of masked fields in a Virtual Room transaction.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="maskedFieldId">Field id in following format: {documentId}-{approvalId}-{fieldId}.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/api/packages/{packageId}/virtual-room/config/masked-fields/{maskedFieldId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdVirtualRoomConfigMaskedFieldsPut")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdVirtualRoomConfigMaskedFieldsPut([FromRoute][Required]string packageId, [FromRoute][Required]string maskedFieldId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Update virtual room configuration.
        /// </summary>
        /// <remarks>Update the configuration of virtual room for specific package.</remarks>
        /// <param name="body">Virtual Room configuration.</param>
        /// <param name="packageId">The unique package id.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/api/packages/{packageId}/virtual-room/config")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPackagesPackageIdVirtualRoomConfigPut")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPackagesPackageIdVirtualRoomConfigPut([FromBody]VirtualRoom body, [FromRoute][Required]string packageId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Fetches video file.
        /// </summary>
        /// <remarks>Fetches video file.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <param name="recordingUid">UID of a recording returned by [/virtual-room-video/{packageId}/recordings](#/Virtual%20Room/virtual-room-video._packageId.recordings.get)</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/virtual-room-video/{packageId}/download-recording/{recordingUid}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("VirtualRoomVideoPackageIdDownloadRecordingRecordingUidGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(byte[]), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult VirtualRoomVideoPackageIdDownloadRecordingRecordingUidGet([FromRoute][Required]string packageId, [FromRoute][Required]string recordingUid)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(byte[]));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<byte[]>(exampleJson)
                        : default(byte[]);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves a list of available Virtual Room session recrodings for given package.
        /// </summary>
        /// <remarks>Retrieves a list of available Virtual Room session recrodings for given package.</remarks>
        /// <param name="packageId">The unique package id.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/virtual-room-video/{packageId}/recordings")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("VirtualRoomVideoPackageIdRecordingsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Recording), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult VirtualRoomVideoPackageIdRecordingsGet([FromRoute][Required]string packageId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Recording));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"uid\" : \"bf5e90a8-d284-4a82-9792-42b940019821\",\n  \"fileName\" : \"CJe8db1289b3d0b044e11759e2d375d9a4.mp4\",\n  \"fileSize\" : \"176475\",\n  \"creationDate\" : 1630913205000,\n  \"fileFormat\" : \"mp4\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Recording>(exampleJson)
                        : default(Recording);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
