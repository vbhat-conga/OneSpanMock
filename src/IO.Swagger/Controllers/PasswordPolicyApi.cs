/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PasswordPolicyApiController : ControllerBase
    { 
        /// <summary>
        /// Retrieves the settings for a password policy.
        /// </summary>
        /// <remarks>A password policy defines the settings that are to be used when creating a password for an account. For example, the following settings may be retrieved&amp;#58; * The minimum number of days before a password can be changed * The number of passwords the system will store in its history * The number of days until the password expires * Whether or not a password expiry notification will be sent, and the number of days prior to sending the password * The minimum password length * Password requirements (minimum password length, special characters, etc.)</remarks>
        /// <response code="200">OK</response>
        /// <response code="400">Validation error</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/passwordPolicy")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPasswordPolicyGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(PasswordPolicy), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Validation error")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPasswordPolicyGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PasswordPolicy));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"includeUppercase\" : true,\n  \"requiredRules\" : 4,\n  \"includeLowercase\" : true,\n  \"length\" : 1,\n  \"history\" : 6,\n  \"includeSpecialCharacters\" : true,\n  \"includeNumbers\" : true,\n  \"maxInvalidLoginAttempts\" : 3,\n  \"enableExpiryNotifications\" : true,\n  \"firstReminder\" : 14,\n  \"repeatReminderCount\" : 5,\n  \"expiry\" : 5,\n  \"age\" : 0\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<PasswordPolicy>(exampleJson)
                        : default(PasswordPolicy);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates the settings for a password policy.
        /// </summary>
        /// <remarks>Updates the settings for a password policy.</remarks>
        /// <param name="body">Password policy settings</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/api/passwordPolicy")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiPasswordPolicyPut")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiPasswordPolicyPut([FromBody]PasswordPolicy body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));

            throw new NotImplementedException();
        }
    }
}
