/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class GroupsApiController : ControllerBase
    { 
        /// <summary>
        /// Retrieves a list of all Groups in an account.
        /// </summary>
        /// <remarks>Retrieves a list of all groups in an Account. Results are returned as a list of groups, and not as a simple group. Note that results can be returned in a paginated form if the  &#x27;from&#x27;, &#x27;to&#x27; and &#x27;dir&#x27; query parameters are used.</remarks>
        /// <param name="from">The first record that will be returned. Useful for pagination.</param>
        /// <param name="to">The last record that will be returned. Useful for pagination.</param>
        /// <param name="dir">The direction according to which the data will be sorted. &#x27;asc&#x27; for ascending and &#x27;desc&#x27; for descending.</param>
        /// <param name="requestType">If the request type is manager, return only the groups that the request user is a manager of.</param>
        /// <param name="name">The name of the groups to return</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/groups")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiGroupsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2002), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiGroupsGet([FromQuery]int? from, [FromQuery]int? to, [FromQuery]string dir, [FromQuery]string requestType, [FromQuery]string name)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2002));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"count\" : 0,\n  \"results\" : [ {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"members\" : [ {\n      \"firstName\" : \"firstName\",\n      \"lastName\" : \"lastName\",\n      \"pending\" : true,\n      \"memberType\" : \"REGULAR\",\n      \"userId\" : \"userId\",\n      \"email\" : \"email\"\n    }, {\n      \"firstName\" : \"firstName\",\n      \"lastName\" : \"lastName\",\n      \"pending\" : true,\n      \"memberType\" : \"REGULAR\",\n      \"userId\" : \"userId\",\n      \"email\" : \"email\"\n    } ],\n    \"name\" : \"name\",\n    \"id\" : \"id\",\n    \"reciprocalDelegation\" : true,\n    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"account\" : {\n      \"owner\" : \"owner\",\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"customFields\" : [ {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"translations\" : [ {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"name\" : \"name\",\n          \"description\" : \"description\",\n          \"language\" : \"language\",\n          \"id\" : \"id\"\n        }, {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"name\" : \"name\",\n          \"description\" : \"description\",\n          \"language\" : \"language\",\n          \"id\" : \"id\"\n        } ],\n        \"name\" : \"name\",\n        \"id\" : \"id\",\n        \"value\" : \"value\",\n        \"required\" : true\n      }, {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"translations\" : [ {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"name\" : \"name\",\n          \"description\" : \"description\",\n          \"language\" : \"language\",\n          \"id\" : \"id\"\n        }, {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"name\" : \"name\",\n          \"description\" : \"description\",\n          \"language\" : \"language\",\n          \"id\" : \"id\"\n        } ],\n        \"name\" : \"name\",\n        \"id\" : \"id\",\n        \"value\" : \"value\",\n        \"required\" : true\n      } ],\n      \"logoUrl\" : \"logoUrl\",\n      \"licenses\" : [ {\n        \"paidUntil\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"transactions\" : [ {\n          \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"price\" : {\n            \"amount\" : 0,\n            \"currency\" : {\n              \"data\" : {\n                \"key\" : { }\n              },\n              \"name\" : \"name\",\n              \"id\" : \"id\"\n            }\n          },\n          \"creditCard\" : {\n            \"number\" : \"number\",\n            \"cvv\" : \"cvv\",\n            \"name\" : \"name\",\n            \"expiration\" : {\n              \"month\" : 1,\n              \"year\" : 6\n            },\n            \"type\" : \"type\"\n          }\n        }, {\n          \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"price\" : {\n            \"amount\" : 0,\n            \"currency\" : {\n              \"data\" : {\n                \"key\" : { }\n              },\n              \"name\" : \"name\",\n              \"id\" : \"id\"\n            }\n          },\n          \"creditCard\" : {\n            \"number\" : \"number\",\n            \"cvv\" : \"cvv\",\n            \"name\" : \"name\",\n            \"expiration\" : {\n              \"month\" : 1,\n              \"year\" : 6\n            },\n            \"type\" : \"type\"\n          }\n        } ],\n        \"plan\" : {\n          \"features\" : {\n            \"key\" : { }\n          },\n          \"quotas\" : [ {\n            \"scope\" : \"SENDER\",\n            \"limit\" : 5,\n            \"cycle\" : \"DAY\",\n            \"target\" : \"SIGNER\"\n          }, {\n            \"scope\" : \"SENDER\",\n            \"limit\" : 5,\n            \"cycle\" : \"DAY\",\n            \"target\" : \"SIGNER\"\n          } ],\n          \"original\" : \"original\",\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"contract\" : \"DAY\",\n          \"name\" : \"name\",\n          \"description\" : \"description\",\n          \"id\" : \"id\",\n          \"freeCycles\" : {\n            \"count\" : 5,\n            \"cycle\" : \"DAY\"\n          },\n          \"cycle\" : \"DAY\",\n          \"group\" : \"group\"\n        },\n        \"status\" : \"ACTIVE\"\n      }, {\n        \"paidUntil\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"transactions\" : [ {\n          \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"price\" : {\n            \"amount\" : 0,\n            \"currency\" : {\n              \"data\" : {\n                \"key\" : { }\n              },\n              \"name\" : \"name\",\n              \"id\" : \"id\"\n            }\n          },\n          \"creditCard\" : {\n            \"number\" : \"number\",\n            \"cvv\" : \"cvv\",\n            \"name\" : \"name\",\n            \"expiration\" : {\n              \"month\" : 1,\n              \"year\" : 6\n            },\n            \"type\" : \"type\"\n          }\n        }, {\n          \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"price\" : {\n            \"amount\" : 0,\n            \"currency\" : {\n              \"data\" : {\n                \"key\" : { }\n              },\n              \"name\" : \"name\",\n              \"id\" : \"id\"\n            }\n          },\n          \"creditCard\" : {\n            \"number\" : \"number\",\n            \"cvv\" : \"cvv\",\n            \"name\" : \"name\",\n            \"expiration\" : {\n              \"month\" : 1,\n              \"year\" : 6\n            },\n            \"type\" : \"type\"\n          }\n        } ],\n        \"plan\" : {\n          \"features\" : {\n            \"key\" : { }\n          },\n          \"quotas\" : [ {\n            \"scope\" : \"SENDER\",\n            \"limit\" : 5,\n            \"cycle\" : \"DAY\",\n            \"target\" : \"SIGNER\"\n          }, {\n            \"scope\" : \"SENDER\",\n            \"limit\" : 5,\n            \"cycle\" : \"DAY\",\n            \"target\" : \"SIGNER\"\n          } ],\n          \"original\" : \"original\",\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"contract\" : \"DAY\",\n          \"name\" : \"name\",\n          \"description\" : \"description\",\n          \"id\" : \"id\",\n          \"freeCycles\" : {\n            \"count\" : 5,\n            \"cycle\" : \"DAY\"\n          },\n          \"cycle\" : \"DAY\",\n          \"group\" : \"group\"\n        },\n        \"status\" : \"ACTIVE\"\n      } ],\n      \"logoAltTextKey\" : \"logoAltTextKey\",\n      \"name\" : \"name\",\n      \"timezoneId\" : \"timezoneId\",\n      \"company\" : {\n        \"address\" : {\n          \"zipcode\" : \"zipcode\",\n          \"country\" : \"country\",\n          \"city\" : \"city\",\n          \"address2\" : \"address2\",\n          \"address1\" : \"address1\",\n          \"state\" : \"state\"\n        },\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"id\" : \"id\"\n      },\n      \"id\" : \"id\",\n      \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"providers\" : {\n        \"documents\" : [ {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"provides\" : \"provides\",\n          \"name\" : \"name\",\n          \"id\" : \"id\"\n        }, {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"provides\" : \"provides\",\n          \"name\" : \"name\",\n          \"id\" : \"id\"\n        } ],\n        \"users\" : [ null, null ]\n      }\n    },\n    \"email\" : \"email\",\n    \"emailMembers\" : true\n  }, {\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"members\" : [ {\n      \"firstName\" : \"firstName\",\n      \"lastName\" : \"lastName\",\n      \"pending\" : true,\n      \"memberType\" : \"REGULAR\",\n      \"userId\" : \"userId\",\n      \"email\" : \"email\"\n    }, {\n      \"firstName\" : \"firstName\",\n      \"lastName\" : \"lastName\",\n      \"pending\" : true,\n      \"memberType\" : \"REGULAR\",\n      \"userId\" : \"userId\",\n      \"email\" : \"email\"\n    } ],\n    \"name\" : \"name\",\n    \"id\" : \"id\",\n    \"reciprocalDelegation\" : true,\n    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"account\" : {\n      \"owner\" : \"owner\",\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"customFields\" : [ {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"translations\" : [ {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"name\" : \"name\",\n          \"description\" : \"description\",\n          \"language\" : \"language\",\n          \"id\" : \"id\"\n        }, {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"name\" : \"name\",\n          \"description\" : \"description\",\n          \"language\" : \"language\",\n          \"id\" : \"id\"\n        } ],\n        \"name\" : \"name\",\n        \"id\" : \"id\",\n        \"value\" : \"value\",\n        \"required\" : true\n      }, {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"translations\" : [ {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"name\" : \"name\",\n          \"description\" : \"description\",\n          \"language\" : \"language\",\n          \"id\" : \"id\"\n        }, {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"name\" : \"name\",\n          \"description\" : \"description\",\n          \"language\" : \"language\",\n          \"id\" : \"id\"\n        } ],\n        \"name\" : \"name\",\n        \"id\" : \"id\",\n        \"value\" : \"value\",\n        \"required\" : true\n      } ],\n      \"logoUrl\" : \"logoUrl\",\n      \"licenses\" : [ {\n        \"paidUntil\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"transactions\" : [ {\n          \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"price\" : {\n            \"amount\" : 0,\n            \"currency\" : {\n              \"data\" : {\n                \"key\" : { }\n              },\n              \"name\" : \"name\",\n              \"id\" : \"id\"\n            }\n          },\n          \"creditCard\" : {\n            \"number\" : \"number\",\n            \"cvv\" : \"cvv\",\n            \"name\" : \"name\",\n            \"expiration\" : {\n              \"month\" : 1,\n              \"year\" : 6\n            },\n            \"type\" : \"type\"\n          }\n        }, {\n          \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"price\" : {\n            \"amount\" : 0,\n            \"currency\" : {\n              \"data\" : {\n                \"key\" : { }\n              },\n              \"name\" : \"name\",\n              \"id\" : \"id\"\n            }\n          },\n          \"creditCard\" : {\n            \"number\" : \"number\",\n            \"cvv\" : \"cvv\",\n            \"name\" : \"name\",\n            \"expiration\" : {\n              \"month\" : 1,\n              \"year\" : 6\n            },\n            \"type\" : \"type\"\n          }\n        } ],\n        \"plan\" : {\n          \"features\" : {\n            \"key\" : { }\n          },\n          \"quotas\" : [ {\n            \"scope\" : \"SENDER\",\n            \"limit\" : 5,\n            \"cycle\" : \"DAY\",\n            \"target\" : \"SIGNER\"\n          }, {\n            \"scope\" : \"SENDER\",\n            \"limit\" : 5,\n            \"cycle\" : \"DAY\",\n            \"target\" : \"SIGNER\"\n          } ],\n          \"original\" : \"original\",\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"contract\" : \"DAY\",\n          \"name\" : \"name\",\n          \"description\" : \"description\",\n          \"id\" : \"id\",\n          \"freeCycles\" : {\n            \"count\" : 5,\n            \"cycle\" : \"DAY\"\n          },\n          \"cycle\" : \"DAY\",\n          \"group\" : \"group\"\n        },\n        \"status\" : \"ACTIVE\"\n      }, {\n        \"paidUntil\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"transactions\" : [ {\n          \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"price\" : {\n            \"amount\" : 0,\n            \"currency\" : {\n              \"data\" : {\n                \"key\" : { }\n              },\n              \"name\" : \"name\",\n              \"id\" : \"id\"\n            }\n          },\n          \"creditCard\" : {\n            \"number\" : \"number\",\n            \"cvv\" : \"cvv\",\n            \"name\" : \"name\",\n            \"expiration\" : {\n              \"month\" : 1,\n              \"year\" : 6\n            },\n            \"type\" : \"type\"\n          }\n        }, {\n          \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n          \"price\" : {\n            \"amount\" : 0,\n            \"currency\" : {\n              \"data\" : {\n                \"key\" : { }\n              },\n              \"name\" : \"name\",\n              \"id\" : \"id\"\n            }\n          },\n          \"creditCard\" : {\n            \"number\" : \"number\",\n            \"cvv\" : \"cvv\",\n            \"name\" : \"name\",\n            \"expiration\" : {\n              \"month\" : 1,\n              \"year\" : 6\n            },\n            \"type\" : \"type\"\n          }\n        } ],\n        \"plan\" : {\n          \"features\" : {\n            \"key\" : { }\n          },\n          \"quotas\" : [ {\n            \"scope\" : \"SENDER\",\n            \"limit\" : 5,\n            \"cycle\" : \"DAY\",\n            \"target\" : \"SIGNER\"\n          }, {\n            \"scope\" : \"SENDER\",\n            \"limit\" : 5,\n            \"cycle\" : \"DAY\",\n            \"target\" : \"SIGNER\"\n          } ],\n          \"original\" : \"original\",\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"contract\" : \"DAY\",\n          \"name\" : \"name\",\n          \"description\" : \"description\",\n          \"id\" : \"id\",\n          \"freeCycles\" : {\n            \"count\" : 5,\n            \"cycle\" : \"DAY\"\n          },\n          \"cycle\" : \"DAY\",\n          \"group\" : \"group\"\n        },\n        \"status\" : \"ACTIVE\"\n      } ],\n      \"logoAltTextKey\" : \"logoAltTextKey\",\n      \"name\" : \"name\",\n      \"timezoneId\" : \"timezoneId\",\n      \"company\" : {\n        \"address\" : {\n          \"zipcode\" : \"zipcode\",\n          \"country\" : \"country\",\n          \"city\" : \"city\",\n          \"address2\" : \"address2\",\n          \"address1\" : \"address1\",\n          \"state\" : \"state\"\n        },\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"id\" : \"id\"\n      },\n      \"id\" : \"id\",\n      \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"providers\" : {\n        \"documents\" : [ {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"provides\" : \"provides\",\n          \"name\" : \"name\",\n          \"id\" : \"id\"\n        }, {\n          \"data\" : {\n            \"key\" : { }\n          },\n          \"provides\" : \"provides\",\n          \"name\" : \"name\",\n          \"id\" : \"id\"\n        } ],\n        \"users\" : [ null, null ]\n      }\n    },\n    \"email\" : \"email\",\n    \"emailMembers\" : true\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse2002>(exampleJson)
                        : default(InlineResponse2002);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Deletes an existing Group.
        /// </summary>
        /// <remarks>Deletes an existing Group from the account.</remarks>
        /// <param name="groupId">The unique group id.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="404">Requested group could not be found.</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/api/groups/{groupId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiGroupsGroupIdDelete")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "Requested group could not be found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiGroupsGroupIdDelete([FromRoute][Required]string groupId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Retrieves a Group.
        /// </summary>
        /// <remarks>Retrieves detailed information about a specified group.</remarks>
        /// <param name="groupId">The unique group id.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Invalid Group Id</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="404">The requested group could not be found.</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/groups/{groupId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiGroupsGroupIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Group), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Invalid Group Id")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The requested group could not be found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiGroupsGroupIdGet([FromRoute][Required]string groupId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Group));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"members\" : [ {\n    \"firstName\" : \"firstName\",\n    \"lastName\" : \"lastName\",\n    \"pending\" : true,\n    \"memberType\" : \"REGULAR\",\n    \"userId\" : \"userId\",\n    \"email\" : \"email\"\n  }, {\n    \"firstName\" : \"firstName\",\n    \"lastName\" : \"lastName\",\n    \"pending\" : true,\n    \"memberType\" : \"REGULAR\",\n    \"userId\" : \"userId\",\n    \"email\" : \"email\"\n  } ],\n  \"name\" : \"name\",\n  \"id\" : \"id\",\n  \"reciprocalDelegation\" : true,\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"account\" : {\n    \"owner\" : \"owner\",\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"customFields\" : [ {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"translations\" : [ {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"language\" : \"language\",\n        \"id\" : \"id\"\n      }, {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"language\" : \"language\",\n        \"id\" : \"id\"\n      } ],\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"value\" : \"value\",\n      \"required\" : true\n    }, {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"translations\" : [ {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"language\" : \"language\",\n        \"id\" : \"id\"\n      }, {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"language\" : \"language\",\n        \"id\" : \"id\"\n      } ],\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"value\" : \"value\",\n      \"required\" : true\n    } ],\n    \"logoUrl\" : \"logoUrl\",\n    \"licenses\" : [ {\n      \"paidUntil\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"transactions\" : [ {\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"price\" : {\n          \"amount\" : 0,\n          \"currency\" : {\n            \"data\" : {\n              \"key\" : { }\n            },\n            \"name\" : \"name\",\n            \"id\" : \"id\"\n          }\n        },\n        \"creditCard\" : {\n          \"number\" : \"number\",\n          \"cvv\" : \"cvv\",\n          \"name\" : \"name\",\n          \"expiration\" : {\n            \"month\" : 1,\n            \"year\" : 6\n          },\n          \"type\" : \"type\"\n        }\n      }, {\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"price\" : {\n          \"amount\" : 0,\n          \"currency\" : {\n            \"data\" : {\n              \"key\" : { }\n            },\n            \"name\" : \"name\",\n            \"id\" : \"id\"\n          }\n        },\n        \"creditCard\" : {\n          \"number\" : \"number\",\n          \"cvv\" : \"cvv\",\n          \"name\" : \"name\",\n          \"expiration\" : {\n            \"month\" : 1,\n            \"year\" : 6\n          },\n          \"type\" : \"type\"\n        }\n      } ],\n      \"plan\" : {\n        \"features\" : {\n          \"key\" : { }\n        },\n        \"quotas\" : [ {\n          \"scope\" : \"SENDER\",\n          \"limit\" : 5,\n          \"cycle\" : \"DAY\",\n          \"target\" : \"SIGNER\"\n        }, {\n          \"scope\" : \"SENDER\",\n          \"limit\" : 5,\n          \"cycle\" : \"DAY\",\n          \"target\" : \"SIGNER\"\n        } ],\n        \"original\" : \"original\",\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"contract\" : \"DAY\",\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"id\" : \"id\",\n        \"freeCycles\" : {\n          \"count\" : 5,\n          \"cycle\" : \"DAY\"\n        },\n        \"cycle\" : \"DAY\",\n        \"group\" : \"group\"\n      },\n      \"status\" : \"ACTIVE\"\n    }, {\n      \"paidUntil\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"transactions\" : [ {\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"price\" : {\n          \"amount\" : 0,\n          \"currency\" : {\n            \"data\" : {\n              \"key\" : { }\n            },\n            \"name\" : \"name\",\n            \"id\" : \"id\"\n          }\n        },\n        \"creditCard\" : {\n          \"number\" : \"number\",\n          \"cvv\" : \"cvv\",\n          \"name\" : \"name\",\n          \"expiration\" : {\n            \"month\" : 1,\n            \"year\" : 6\n          },\n          \"type\" : \"type\"\n        }\n      }, {\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"price\" : {\n          \"amount\" : 0,\n          \"currency\" : {\n            \"data\" : {\n              \"key\" : { }\n            },\n            \"name\" : \"name\",\n            \"id\" : \"id\"\n          }\n        },\n        \"creditCard\" : {\n          \"number\" : \"number\",\n          \"cvv\" : \"cvv\",\n          \"name\" : \"name\",\n          \"expiration\" : {\n            \"month\" : 1,\n            \"year\" : 6\n          },\n          \"type\" : \"type\"\n        }\n      } ],\n      \"plan\" : {\n        \"features\" : {\n          \"key\" : { }\n        },\n        \"quotas\" : [ {\n          \"scope\" : \"SENDER\",\n          \"limit\" : 5,\n          \"cycle\" : \"DAY\",\n          \"target\" : \"SIGNER\"\n        }, {\n          \"scope\" : \"SENDER\",\n          \"limit\" : 5,\n          \"cycle\" : \"DAY\",\n          \"target\" : \"SIGNER\"\n        } ],\n        \"original\" : \"original\",\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"contract\" : \"DAY\",\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"id\" : \"id\",\n        \"freeCycles\" : {\n          \"count\" : 5,\n          \"cycle\" : \"DAY\"\n        },\n        \"cycle\" : \"DAY\",\n        \"group\" : \"group\"\n      },\n      \"status\" : \"ACTIVE\"\n    } ],\n    \"logoAltTextKey\" : \"logoAltTextKey\",\n    \"name\" : \"name\",\n    \"timezoneId\" : \"timezoneId\",\n    \"company\" : {\n      \"address\" : {\n        \"zipcode\" : \"zipcode\",\n        \"country\" : \"country\",\n        \"city\" : \"city\",\n        \"address2\" : \"address2\",\n        \"address1\" : \"address1\",\n        \"state\" : \"state\"\n      },\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"name\" : \"name\",\n      \"id\" : \"id\"\n    },\n    \"id\" : \"id\",\n    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"providers\" : {\n      \"documents\" : [ {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"provides\" : \"provides\",\n        \"name\" : \"name\",\n        \"id\" : \"id\"\n      }, {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"provides\" : \"provides\",\n        \"name\" : \"name\",\n        \"id\" : \"id\"\n      } ],\n      \"users\" : [ null, null ]\n    }\n  },\n  \"email\" : \"email\",\n  \"emailMembers\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Group>(exampleJson)
                        : default(Group);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Invites an existing sender to join the Group.
        /// </summary>
        /// <remarks>Invites an existing account sender to join the Group.</remarks>
        /// <param name="body">Group information.</param>
        /// <param name="groupId">The unique group id.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Invalid Group Id</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="404">Requested group could not be found.</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/groups/{groupId}/invite")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiGroupsGroupIdInvitePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Group), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Invalid Group Id")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "Requested group could not be found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiGroupsGroupIdInvitePost([FromBody]User body, [FromRoute][Required]string groupId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Group));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"members\" : [ {\n    \"firstName\" : \"firstName\",\n    \"lastName\" : \"lastName\",\n    \"pending\" : true,\n    \"memberType\" : \"REGULAR\",\n    \"userId\" : \"userId\",\n    \"email\" : \"email\"\n  }, {\n    \"firstName\" : \"firstName\",\n    \"lastName\" : \"lastName\",\n    \"pending\" : true,\n    \"memberType\" : \"REGULAR\",\n    \"userId\" : \"userId\",\n    \"email\" : \"email\"\n  } ],\n  \"name\" : \"name\",\n  \"id\" : \"id\",\n  \"reciprocalDelegation\" : true,\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"account\" : {\n    \"owner\" : \"owner\",\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"customFields\" : [ {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"translations\" : [ {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"language\" : \"language\",\n        \"id\" : \"id\"\n      }, {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"language\" : \"language\",\n        \"id\" : \"id\"\n      } ],\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"value\" : \"value\",\n      \"required\" : true\n    }, {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"translations\" : [ {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"language\" : \"language\",\n        \"id\" : \"id\"\n      }, {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"language\" : \"language\",\n        \"id\" : \"id\"\n      } ],\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"value\" : \"value\",\n      \"required\" : true\n    } ],\n    \"logoUrl\" : \"logoUrl\",\n    \"licenses\" : [ {\n      \"paidUntil\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"transactions\" : [ {\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"price\" : {\n          \"amount\" : 0,\n          \"currency\" : {\n            \"data\" : {\n              \"key\" : { }\n            },\n            \"name\" : \"name\",\n            \"id\" : \"id\"\n          }\n        },\n        \"creditCard\" : {\n          \"number\" : \"number\",\n          \"cvv\" : \"cvv\",\n          \"name\" : \"name\",\n          \"expiration\" : {\n            \"month\" : 1,\n            \"year\" : 6\n          },\n          \"type\" : \"type\"\n        }\n      }, {\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"price\" : {\n          \"amount\" : 0,\n          \"currency\" : {\n            \"data\" : {\n              \"key\" : { }\n            },\n            \"name\" : \"name\",\n            \"id\" : \"id\"\n          }\n        },\n        \"creditCard\" : {\n          \"number\" : \"number\",\n          \"cvv\" : \"cvv\",\n          \"name\" : \"name\",\n          \"expiration\" : {\n            \"month\" : 1,\n            \"year\" : 6\n          },\n          \"type\" : \"type\"\n        }\n      } ],\n      \"plan\" : {\n        \"features\" : {\n          \"key\" : { }\n        },\n        \"quotas\" : [ {\n          \"scope\" : \"SENDER\",\n          \"limit\" : 5,\n          \"cycle\" : \"DAY\",\n          \"target\" : \"SIGNER\"\n        }, {\n          \"scope\" : \"SENDER\",\n          \"limit\" : 5,\n          \"cycle\" : \"DAY\",\n          \"target\" : \"SIGNER\"\n        } ],\n        \"original\" : \"original\",\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"contract\" : \"DAY\",\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"id\" : \"id\",\n        \"freeCycles\" : {\n          \"count\" : 5,\n          \"cycle\" : \"DAY\"\n        },\n        \"cycle\" : \"DAY\",\n        \"group\" : \"group\"\n      },\n      \"status\" : \"ACTIVE\"\n    }, {\n      \"paidUntil\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"transactions\" : [ {\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"price\" : {\n          \"amount\" : 0,\n          \"currency\" : {\n            \"data\" : {\n              \"key\" : { }\n            },\n            \"name\" : \"name\",\n            \"id\" : \"id\"\n          }\n        },\n        \"creditCard\" : {\n          \"number\" : \"number\",\n          \"cvv\" : \"cvv\",\n          \"name\" : \"name\",\n          \"expiration\" : {\n            \"month\" : 1,\n            \"year\" : 6\n          },\n          \"type\" : \"type\"\n        }\n      }, {\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"price\" : {\n          \"amount\" : 0,\n          \"currency\" : {\n            \"data\" : {\n              \"key\" : { }\n            },\n            \"name\" : \"name\",\n            \"id\" : \"id\"\n          }\n        },\n        \"creditCard\" : {\n          \"number\" : \"number\",\n          \"cvv\" : \"cvv\",\n          \"name\" : \"name\",\n          \"expiration\" : {\n            \"month\" : 1,\n            \"year\" : 6\n          },\n          \"type\" : \"type\"\n        }\n      } ],\n      \"plan\" : {\n        \"features\" : {\n          \"key\" : { }\n        },\n        \"quotas\" : [ {\n          \"scope\" : \"SENDER\",\n          \"limit\" : 5,\n          \"cycle\" : \"DAY\",\n          \"target\" : \"SIGNER\"\n        }, {\n          \"scope\" : \"SENDER\",\n          \"limit\" : 5,\n          \"cycle\" : \"DAY\",\n          \"target\" : \"SIGNER\"\n        } ],\n        \"original\" : \"original\",\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"contract\" : \"DAY\",\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"id\" : \"id\",\n        \"freeCycles\" : {\n          \"count\" : 5,\n          \"cycle\" : \"DAY\"\n        },\n        \"cycle\" : \"DAY\",\n        \"group\" : \"group\"\n      },\n      \"status\" : \"ACTIVE\"\n    } ],\n    \"logoAltTextKey\" : \"logoAltTextKey\",\n    \"name\" : \"name\",\n    \"timezoneId\" : \"timezoneId\",\n    \"company\" : {\n      \"address\" : {\n        \"zipcode\" : \"zipcode\",\n        \"country\" : \"country\",\n        \"city\" : \"city\",\n        \"address2\" : \"address2\",\n        \"address1\" : \"address1\",\n        \"state\" : \"state\"\n      },\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"name\" : \"name\",\n      \"id\" : \"id\"\n    },\n    \"id\" : \"id\",\n    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"providers\" : {\n      \"documents\" : [ {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"provides\" : \"provides\",\n        \"name\" : \"name\",\n        \"id\" : \"id\"\n      }, {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"provides\" : \"provides\",\n        \"name\" : \"name\",\n        \"id\" : \"id\"\n      } ],\n      \"users\" : [ null, null ]\n    }\n  },\n  \"email\" : \"email\",\n  \"emailMembers\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Group>(exampleJson)
                        : default(Group);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Invites a new sender to the Group.
        /// </summary>
        /// <remarks>Invites a sender who is not yet part of any account to join a group. The invitee will initially be prompted to register as an account sender.</remarks>
        /// <param name="body">The new group member.</param>
        /// <param name="groupId">The unique group id.</param>
        /// <response code="200">OK</response>
        /// <response code="400">Either both the id and the email of the group member weren&#x27;t provided, or the groupId is invalid.</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="404">Either one of the members of the group could not be found in the system, or the requested group could not be found.</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/groups/{groupId}/members")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiGroupsGroupIdMembersPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Group), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Either both the id and the email of the group member weren&#x27;t provided, or the groupId is invalid.")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "Either one of the members of the group could not be found in the system, or the requested group could not be found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiGroupsGroupIdMembersPost([FromBody]GroupMember body, [FromRoute][Required]string groupId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Group));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"members\" : [ {\n    \"firstName\" : \"firstName\",\n    \"lastName\" : \"lastName\",\n    \"pending\" : true,\n    \"memberType\" : \"REGULAR\",\n    \"userId\" : \"userId\",\n    \"email\" : \"email\"\n  }, {\n    \"firstName\" : \"firstName\",\n    \"lastName\" : \"lastName\",\n    \"pending\" : true,\n    \"memberType\" : \"REGULAR\",\n    \"userId\" : \"userId\",\n    \"email\" : \"email\"\n  } ],\n  \"name\" : \"name\",\n  \"id\" : \"id\",\n  \"reciprocalDelegation\" : true,\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"account\" : {\n    \"owner\" : \"owner\",\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"customFields\" : [ {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"translations\" : [ {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"language\" : \"language\",\n        \"id\" : \"id\"\n      }, {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"language\" : \"language\",\n        \"id\" : \"id\"\n      } ],\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"value\" : \"value\",\n      \"required\" : true\n    }, {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"translations\" : [ {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"language\" : \"language\",\n        \"id\" : \"id\"\n      }, {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"language\" : \"language\",\n        \"id\" : \"id\"\n      } ],\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"value\" : \"value\",\n      \"required\" : true\n    } ],\n    \"logoUrl\" : \"logoUrl\",\n    \"licenses\" : [ {\n      \"paidUntil\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"transactions\" : [ {\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"price\" : {\n          \"amount\" : 0,\n          \"currency\" : {\n            \"data\" : {\n              \"key\" : { }\n            },\n            \"name\" : \"name\",\n            \"id\" : \"id\"\n          }\n        },\n        \"creditCard\" : {\n          \"number\" : \"number\",\n          \"cvv\" : \"cvv\",\n          \"name\" : \"name\",\n          \"expiration\" : {\n            \"month\" : 1,\n            \"year\" : 6\n          },\n          \"type\" : \"type\"\n        }\n      }, {\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"price\" : {\n          \"amount\" : 0,\n          \"currency\" : {\n            \"data\" : {\n              \"key\" : { }\n            },\n            \"name\" : \"name\",\n            \"id\" : \"id\"\n          }\n        },\n        \"creditCard\" : {\n          \"number\" : \"number\",\n          \"cvv\" : \"cvv\",\n          \"name\" : \"name\",\n          \"expiration\" : {\n            \"month\" : 1,\n            \"year\" : 6\n          },\n          \"type\" : \"type\"\n        }\n      } ],\n      \"plan\" : {\n        \"features\" : {\n          \"key\" : { }\n        },\n        \"quotas\" : [ {\n          \"scope\" : \"SENDER\",\n          \"limit\" : 5,\n          \"cycle\" : \"DAY\",\n          \"target\" : \"SIGNER\"\n        }, {\n          \"scope\" : \"SENDER\",\n          \"limit\" : 5,\n          \"cycle\" : \"DAY\",\n          \"target\" : \"SIGNER\"\n        } ],\n        \"original\" : \"original\",\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"contract\" : \"DAY\",\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"id\" : \"id\",\n        \"freeCycles\" : {\n          \"count\" : 5,\n          \"cycle\" : \"DAY\"\n        },\n        \"cycle\" : \"DAY\",\n        \"group\" : \"group\"\n      },\n      \"status\" : \"ACTIVE\"\n    }, {\n      \"paidUntil\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"transactions\" : [ {\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"price\" : {\n          \"amount\" : 0,\n          \"currency\" : {\n            \"data\" : {\n              \"key\" : { }\n            },\n            \"name\" : \"name\",\n            \"id\" : \"id\"\n          }\n        },\n        \"creditCard\" : {\n          \"number\" : \"number\",\n          \"cvv\" : \"cvv\",\n          \"name\" : \"name\",\n          \"expiration\" : {\n            \"month\" : 1,\n            \"year\" : 6\n          },\n          \"type\" : \"type\"\n        }\n      }, {\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"price\" : {\n          \"amount\" : 0,\n          \"currency\" : {\n            \"data\" : {\n              \"key\" : { }\n            },\n            \"name\" : \"name\",\n            \"id\" : \"id\"\n          }\n        },\n        \"creditCard\" : {\n          \"number\" : \"number\",\n          \"cvv\" : \"cvv\",\n          \"name\" : \"name\",\n          \"expiration\" : {\n            \"month\" : 1,\n            \"year\" : 6\n          },\n          \"type\" : \"type\"\n        }\n      } ],\n      \"plan\" : {\n        \"features\" : {\n          \"key\" : { }\n        },\n        \"quotas\" : [ {\n          \"scope\" : \"SENDER\",\n          \"limit\" : 5,\n          \"cycle\" : \"DAY\",\n          \"target\" : \"SIGNER\"\n        }, {\n          \"scope\" : \"SENDER\",\n          \"limit\" : 5,\n          \"cycle\" : \"DAY\",\n          \"target\" : \"SIGNER\"\n        } ],\n        \"original\" : \"original\",\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"contract\" : \"DAY\",\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"id\" : \"id\",\n        \"freeCycles\" : {\n          \"count\" : 5,\n          \"cycle\" : \"DAY\"\n        },\n        \"cycle\" : \"DAY\",\n        \"group\" : \"group\"\n      },\n      \"status\" : \"ACTIVE\"\n    } ],\n    \"logoAltTextKey\" : \"logoAltTextKey\",\n    \"name\" : \"name\",\n    \"timezoneId\" : \"timezoneId\",\n    \"company\" : {\n      \"address\" : {\n        \"zipcode\" : \"zipcode\",\n        \"country\" : \"country\",\n        \"city\" : \"city\",\n        \"address2\" : \"address2\",\n        \"address1\" : \"address1\",\n        \"state\" : \"state\"\n      },\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"name\" : \"name\",\n      \"id\" : \"id\"\n    },\n    \"id\" : \"id\",\n    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"providers\" : {\n      \"documents\" : [ {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"provides\" : \"provides\",\n        \"name\" : \"name\",\n        \"id\" : \"id\"\n      }, {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"provides\" : \"provides\",\n        \"name\" : \"name\",\n        \"id\" : \"id\"\n      } ],\n      \"users\" : [ null, null ]\n    }\n  },\n  \"email\" : \"email\",\n  \"emailMembers\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Group>(exampleJson)
                        : default(Group);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates an existing Group.
        /// </summary>
        /// <remarks>Updates the members that are included in a specified Group. Updates can include adding and removing members. Updates can also change other Group information.</remarks>
        /// <param name="body">Group information.</param>
        /// <param name="groupId">The unique group id.</param>
        /// <response code="200">OK</response>
        /// <response code="400">The group name is already in use.</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="403">Operation not allowed. Only Managers of this Account or Group can update the Group.</response>
        /// <response code="404">Either one of the members of the group could not be found in the system, or the requested group could not be found.</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/api/groups/{groupId}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiGroupsGroupIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Group), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "The group name is already in use.")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 403, type: typeof(DefaultError), description: "Operation not allowed. Only Managers of this Account or Group can update the Group.")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "Either one of the members of the group could not be found in the system, or the requested group could not be found.")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiGroupsGroupIdPut([FromBody]Group body, [FromRoute][Required]string groupId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Group));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"members\" : [ {\n    \"firstName\" : \"firstName\",\n    \"lastName\" : \"lastName\",\n    \"pending\" : true,\n    \"memberType\" : \"REGULAR\",\n    \"userId\" : \"userId\",\n    \"email\" : \"email\"\n  }, {\n    \"firstName\" : \"firstName\",\n    \"lastName\" : \"lastName\",\n    \"pending\" : true,\n    \"memberType\" : \"REGULAR\",\n    \"userId\" : \"userId\",\n    \"email\" : \"email\"\n  } ],\n  \"name\" : \"name\",\n  \"id\" : \"id\",\n  \"reciprocalDelegation\" : true,\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"account\" : {\n    \"owner\" : \"owner\",\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"customFields\" : [ {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"translations\" : [ {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"language\" : \"language\",\n        \"id\" : \"id\"\n      }, {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"language\" : \"language\",\n        \"id\" : \"id\"\n      } ],\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"value\" : \"value\",\n      \"required\" : true\n    }, {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"translations\" : [ {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"language\" : \"language\",\n        \"id\" : \"id\"\n      }, {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"language\" : \"language\",\n        \"id\" : \"id\"\n      } ],\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"value\" : \"value\",\n      \"required\" : true\n    } ],\n    \"logoUrl\" : \"logoUrl\",\n    \"licenses\" : [ {\n      \"paidUntil\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"transactions\" : [ {\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"price\" : {\n          \"amount\" : 0,\n          \"currency\" : {\n            \"data\" : {\n              \"key\" : { }\n            },\n            \"name\" : \"name\",\n            \"id\" : \"id\"\n          }\n        },\n        \"creditCard\" : {\n          \"number\" : \"number\",\n          \"cvv\" : \"cvv\",\n          \"name\" : \"name\",\n          \"expiration\" : {\n            \"month\" : 1,\n            \"year\" : 6\n          },\n          \"type\" : \"type\"\n        }\n      }, {\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"price\" : {\n          \"amount\" : 0,\n          \"currency\" : {\n            \"data\" : {\n              \"key\" : { }\n            },\n            \"name\" : \"name\",\n            \"id\" : \"id\"\n          }\n        },\n        \"creditCard\" : {\n          \"number\" : \"number\",\n          \"cvv\" : \"cvv\",\n          \"name\" : \"name\",\n          \"expiration\" : {\n            \"month\" : 1,\n            \"year\" : 6\n          },\n          \"type\" : \"type\"\n        }\n      } ],\n      \"plan\" : {\n        \"features\" : {\n          \"key\" : { }\n        },\n        \"quotas\" : [ {\n          \"scope\" : \"SENDER\",\n          \"limit\" : 5,\n          \"cycle\" : \"DAY\",\n          \"target\" : \"SIGNER\"\n        }, {\n          \"scope\" : \"SENDER\",\n          \"limit\" : 5,\n          \"cycle\" : \"DAY\",\n          \"target\" : \"SIGNER\"\n        } ],\n        \"original\" : \"original\",\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"contract\" : \"DAY\",\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"id\" : \"id\",\n        \"freeCycles\" : {\n          \"count\" : 5,\n          \"cycle\" : \"DAY\"\n        },\n        \"cycle\" : \"DAY\",\n        \"group\" : \"group\"\n      },\n      \"status\" : \"ACTIVE\"\n    }, {\n      \"paidUntil\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"transactions\" : [ {\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"price\" : {\n          \"amount\" : 0,\n          \"currency\" : {\n            \"data\" : {\n              \"key\" : { }\n            },\n            \"name\" : \"name\",\n            \"id\" : \"id\"\n          }\n        },\n        \"creditCard\" : {\n          \"number\" : \"number\",\n          \"cvv\" : \"cvv\",\n          \"name\" : \"name\",\n          \"expiration\" : {\n            \"month\" : 1,\n            \"year\" : 6\n          },\n          \"type\" : \"type\"\n        }\n      }, {\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"price\" : {\n          \"amount\" : 0,\n          \"currency\" : {\n            \"data\" : {\n              \"key\" : { }\n            },\n            \"name\" : \"name\",\n            \"id\" : \"id\"\n          }\n        },\n        \"creditCard\" : {\n          \"number\" : \"number\",\n          \"cvv\" : \"cvv\",\n          \"name\" : \"name\",\n          \"expiration\" : {\n            \"month\" : 1,\n            \"year\" : 6\n          },\n          \"type\" : \"type\"\n        }\n      } ],\n      \"plan\" : {\n        \"features\" : {\n          \"key\" : { }\n        },\n        \"quotas\" : [ {\n          \"scope\" : \"SENDER\",\n          \"limit\" : 5,\n          \"cycle\" : \"DAY\",\n          \"target\" : \"SIGNER\"\n        }, {\n          \"scope\" : \"SENDER\",\n          \"limit\" : 5,\n          \"cycle\" : \"DAY\",\n          \"target\" : \"SIGNER\"\n        } ],\n        \"original\" : \"original\",\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"contract\" : \"DAY\",\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"id\" : \"id\",\n        \"freeCycles\" : {\n          \"count\" : 5,\n          \"cycle\" : \"DAY\"\n        },\n        \"cycle\" : \"DAY\",\n        \"group\" : \"group\"\n      },\n      \"status\" : \"ACTIVE\"\n    } ],\n    \"logoAltTextKey\" : \"logoAltTextKey\",\n    \"name\" : \"name\",\n    \"timezoneId\" : \"timezoneId\",\n    \"company\" : {\n      \"address\" : {\n        \"zipcode\" : \"zipcode\",\n        \"country\" : \"country\",\n        \"city\" : \"city\",\n        \"address2\" : \"address2\",\n        \"address1\" : \"address1\",\n        \"state\" : \"state\"\n      },\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"name\" : \"name\",\n      \"id\" : \"id\"\n    },\n    \"id\" : \"id\",\n    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"providers\" : {\n      \"documents\" : [ {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"provides\" : \"provides\",\n        \"name\" : \"name\",\n        \"id\" : \"id\"\n      }, {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"provides\" : \"provides\",\n        \"name\" : \"name\",\n        \"id\" : \"id\"\n      } ],\n      \"users\" : [ null, null ]\n    }\n  },\n  \"email\" : \"email\",\n  \"emailMembers\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Group>(exampleJson)
                        : default(Group);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Creates a new Group using the specified parameters.
        /// </summary>
        /// <remarks>If specified, the id must be alphanumeric, and unique.</remarks>
        /// <param name="body">Group information.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/api/groups")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiGroupsPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(Group), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiGroupsPost([FromBody]Group body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Group));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"key\" : { }\n  },\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"members\" : [ {\n    \"firstName\" : \"firstName\",\n    \"lastName\" : \"lastName\",\n    \"pending\" : true,\n    \"memberType\" : \"REGULAR\",\n    \"userId\" : \"userId\",\n    \"email\" : \"email\"\n  }, {\n    \"firstName\" : \"firstName\",\n    \"lastName\" : \"lastName\",\n    \"pending\" : true,\n    \"memberType\" : \"REGULAR\",\n    \"userId\" : \"userId\",\n    \"email\" : \"email\"\n  } ],\n  \"name\" : \"name\",\n  \"id\" : \"id\",\n  \"reciprocalDelegation\" : true,\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"account\" : {\n    \"owner\" : \"owner\",\n    \"data\" : {\n      \"key\" : { }\n    },\n    \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"customFields\" : [ {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"translations\" : [ {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"language\" : \"language\",\n        \"id\" : \"id\"\n      }, {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"language\" : \"language\",\n        \"id\" : \"id\"\n      } ],\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"value\" : \"value\",\n      \"required\" : true\n    }, {\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"translations\" : [ {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"language\" : \"language\",\n        \"id\" : \"id\"\n      }, {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"language\" : \"language\",\n        \"id\" : \"id\"\n      } ],\n      \"name\" : \"name\",\n      \"id\" : \"id\",\n      \"value\" : \"value\",\n      \"required\" : true\n    } ],\n    \"logoUrl\" : \"logoUrl\",\n    \"licenses\" : [ {\n      \"paidUntil\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"transactions\" : [ {\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"price\" : {\n          \"amount\" : 0,\n          \"currency\" : {\n            \"data\" : {\n              \"key\" : { }\n            },\n            \"name\" : \"name\",\n            \"id\" : \"id\"\n          }\n        },\n        \"creditCard\" : {\n          \"number\" : \"number\",\n          \"cvv\" : \"cvv\",\n          \"name\" : \"name\",\n          \"expiration\" : {\n            \"month\" : 1,\n            \"year\" : 6\n          },\n          \"type\" : \"type\"\n        }\n      }, {\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"price\" : {\n          \"amount\" : 0,\n          \"currency\" : {\n            \"data\" : {\n              \"key\" : { }\n            },\n            \"name\" : \"name\",\n            \"id\" : \"id\"\n          }\n        },\n        \"creditCard\" : {\n          \"number\" : \"number\",\n          \"cvv\" : \"cvv\",\n          \"name\" : \"name\",\n          \"expiration\" : {\n            \"month\" : 1,\n            \"year\" : 6\n          },\n          \"type\" : \"type\"\n        }\n      } ],\n      \"plan\" : {\n        \"features\" : {\n          \"key\" : { }\n        },\n        \"quotas\" : [ {\n          \"scope\" : \"SENDER\",\n          \"limit\" : 5,\n          \"cycle\" : \"DAY\",\n          \"target\" : \"SIGNER\"\n        }, {\n          \"scope\" : \"SENDER\",\n          \"limit\" : 5,\n          \"cycle\" : \"DAY\",\n          \"target\" : \"SIGNER\"\n        } ],\n        \"original\" : \"original\",\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"contract\" : \"DAY\",\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"id\" : \"id\",\n        \"freeCycles\" : {\n          \"count\" : 5,\n          \"cycle\" : \"DAY\"\n        },\n        \"cycle\" : \"DAY\",\n        \"group\" : \"group\"\n      },\n      \"status\" : \"ACTIVE\"\n    }, {\n      \"paidUntil\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"transactions\" : [ {\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"price\" : {\n          \"amount\" : 0,\n          \"currency\" : {\n            \"data\" : {\n              \"key\" : { }\n            },\n            \"name\" : \"name\",\n            \"id\" : \"id\"\n          }\n        },\n        \"creditCard\" : {\n          \"number\" : \"number\",\n          \"cvv\" : \"cvv\",\n          \"name\" : \"name\",\n          \"expiration\" : {\n            \"month\" : 1,\n            \"year\" : 6\n          },\n          \"type\" : \"type\"\n        }\n      }, {\n        \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n        \"price\" : {\n          \"amount\" : 0,\n          \"currency\" : {\n            \"data\" : {\n              \"key\" : { }\n            },\n            \"name\" : \"name\",\n            \"id\" : \"id\"\n          }\n        },\n        \"creditCard\" : {\n          \"number\" : \"number\",\n          \"cvv\" : \"cvv\",\n          \"name\" : \"name\",\n          \"expiration\" : {\n            \"month\" : 1,\n            \"year\" : 6\n          },\n          \"type\" : \"type\"\n        }\n      } ],\n      \"plan\" : {\n        \"features\" : {\n          \"key\" : { }\n        },\n        \"quotas\" : [ {\n          \"scope\" : \"SENDER\",\n          \"limit\" : 5,\n          \"cycle\" : \"DAY\",\n          \"target\" : \"SIGNER\"\n        }, {\n          \"scope\" : \"SENDER\",\n          \"limit\" : 5,\n          \"cycle\" : \"DAY\",\n          \"target\" : \"SIGNER\"\n        } ],\n        \"original\" : \"original\",\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"contract\" : \"DAY\",\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"id\" : \"id\",\n        \"freeCycles\" : {\n          \"count\" : 5,\n          \"cycle\" : \"DAY\"\n        },\n        \"cycle\" : \"DAY\",\n        \"group\" : \"group\"\n      },\n      \"status\" : \"ACTIVE\"\n    } ],\n    \"logoAltTextKey\" : \"logoAltTextKey\",\n    \"name\" : \"name\",\n    \"timezoneId\" : \"timezoneId\",\n    \"company\" : {\n      \"address\" : {\n        \"zipcode\" : \"zipcode\",\n        \"country\" : \"country\",\n        \"city\" : \"city\",\n        \"address2\" : \"address2\",\n        \"address1\" : \"address1\",\n        \"state\" : \"state\"\n      },\n      \"data\" : {\n        \"key\" : { }\n      },\n      \"name\" : \"name\",\n      \"id\" : \"id\"\n    },\n    \"id\" : \"id\",\n    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"providers\" : {\n      \"documents\" : [ {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"provides\" : \"provides\",\n        \"name\" : \"name\",\n        \"id\" : \"id\"\n      }, {\n        \"data\" : {\n          \"key\" : { }\n        },\n        \"provides\" : \"provides\",\n        \"name\" : \"name\",\n        \"id\" : \"id\"\n      } ],\n      \"users\" : [ null, null ]\n    }\n  },\n  \"email\" : \"email\",\n  \"emailMembers\" : true\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Group>(exampleJson)
                        : default(Group);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves summaries for all groups in the current account.
        /// </summary>
        /// <remarks>Retrieves basic information for all groups in the current account.</remarks>
        /// <response code="200">OK</response>
        /// <response code="401">Not Authorized</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/groups/summary")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiGroupsSummary")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse2003), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(DefaultError), description: "Not Authorized")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiGroupsSummary()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse2003));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"count\" : 0,\n  \"results\" : [ {\n    \"data\" : \"data\",\n    \"name\" : \"name\",\n    \"id\" : \"id\",\n    \"email\" : \"email\"\n  }, {\n    \"data\" : \"data\",\n    \"name\" : \"name\",\n    \"id\" : \"id\",\n    \"email\" : \"email\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse2003>(exampleJson)
                        : default(InlineResponse2003);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
