/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class InAppReportsApiController : ControllerBase
    { 
        /// <summary>
        /// Deletes the specified report files (csv).
        /// </summary>
        /// <remarks>Deletes the specified report files (csv).</remarks>
        /// <param name="fileName">The csv file names.</param>
        /// <response code="200">Reports deleted.</response>
        /// <response code="400">Invalid parameters, missing account or file names.</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/api/inappreports/reports")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiInappreportsReportsDelete")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Invalid parameters, missing account or file names.")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiInappreportsReportsDelete([FromQuery][Required()]List<string> fileName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Deletes the specified report file (csv).
        /// </summary>
        /// <remarks>Deletes the specified report file (csv).</remarks>
        /// <param name="fileName">The csv file name to delete.</param>
        /// <response code="200">Report deleted.</response>
        /// <response code="400">Invalid parameters, missing account or file name.</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/api/inappreports/reports/{fileName}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiInappreportsReportsFileNameDelete")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "Invalid parameters, missing account or file name.")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiInappreportsReportsFileNameDelete([FromRoute][Required]string fileName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Retrieves the specified report file (csv).
        /// </summary>
        /// <remarks>Retrieves the specified report file (csv).</remarks>
        /// <param name="fileName">The csv file name to retrieve.</param>
        /// <response code="200">OK</response>
        /// <response code="400">The specified resource was not found</response>
        /// <response code="404">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/inappreports/reports/{fileName}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiInappreportsReportsFileNameGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 404, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiInappreportsReportsFileNameGet([FromRoute][Required]string fileName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<string>(exampleJson)
                        : default(string);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves reports for the specified fromDate,toDate and reportType for all accounts.
        /// </summary>
        /// <remarks>Retrieves reports for the specified fromDate,toDate and reportType for all accounts.</remarks>
        /// <param name="fromDate">The start of the date range.</param>
        /// <param name="toDate">The end of the date range.</param>
        /// <param name="reportType">The type of reports. Default is ALL.</param>
        /// <response code="200">OK</response>
        /// <response code="400">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/inappreports/reports")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiInappreportsReportsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse20011), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiInappreportsReportsGet([FromQuery]DateTime? fromDate, [FromQuery]DateTime? toDate, [FromQuery]string reportType)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse20011));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"url\" : \"url\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse20011>(exampleJson)
                        : default(InlineResponse20011);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves report summaries for the specified fromDate,toDate and reportType for all accounts.
        /// </summary>
        /// <remarks>Retrieves report summaries for the specified fromDate,toDate and reportType for all accounts.</remarks>
        /// <param name="fromDate">The start of the date range.</param>
        /// <param name="toDate">The end of the date range.</param>
        /// <param name="reportType">The type of reports. Default is ALL.</param>
        /// <response code="200">OK</response>
        /// <response code="400">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/inappreports/reports/summaries")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiInappreportsReportsSummariesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(InlineResponse20012), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiInappreportsReportsSummariesGet([FromQuery]DateTime? fromDate, [FromQuery]DateTime? toDate, [FromQuery]string reportType)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(InlineResponse20012));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "{\n  \"size\" : 0,\n  \"lastModified\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"uri\" : \"uri\",\n  \"contentType\" : \"contentType\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<InlineResponse20012>(exampleJson)
                        : default(InlineResponse20012);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Retrieves the specified report files (csv) as a zip file.
        /// </summary>
        /// <remarks>Retrieves the specified report files (csv) as a zip file.</remarks>
        /// <param name="fileName">The csv file names.</param>
        /// <response code="200">OK</response>
        /// <response code="400">The specified resource was not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/api/inappreports/zip/reports")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ApiInappreportsZipReportsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(byte[]), description: "OK")]
        [SwaggerResponse(statusCode: 400, type: typeof(DefaultError), description: "The specified resource was not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(DefaultError), description: "Unexpected error")]
        public virtual IActionResult ApiInappreportsZipReportsGet([FromQuery][Required()]List<string> fileName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(byte[]));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(DefaultError));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(DefaultError));
            string exampleJson = null;
            exampleJson = "\"\"";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<byte[]>(exampleJson)
                        : default(byte[]);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
