/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Image : IEquatable<Image>
    { 
        /// <summary>
        /// Link
        /// </summary>
        /// <value>Link</value>

        [DataMember(Name="link")]
        public string Link { get; set; }

        /// <summary>
        /// Src
        /// </summary>
        /// <value>Src</value>
        [Required]

        [DataMember(Name="src")]
        public string Src { get; set; }

        /// <summary>
        /// LogoAltTextKey
        /// </summary>
        /// <value>LogoAltTextKey</value>

        [DataMember(Name="logoAltTextKey")]
        public string LogoAltTextKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Image {\n");
            sb.Append("  Link: ").Append(Link).Append("\n");
            sb.Append("  Src: ").Append(Src).Append("\n");
            sb.Append("  LogoAltTextKey: ").Append(LogoAltTextKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Image)obj);
        }

        /// <summary>
        /// Returns true if Image instances are equal
        /// </summary>
        /// <param name="other">Instance of Image to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Image other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Link == other.Link ||
                    Link != null &&
                    Link.Equals(other.Link)
                ) && 
                (
                    Src == other.Src ||
                    Src != null &&
                    Src.Equals(other.Src)
                ) && 
                (
                    LogoAltTextKey == other.LogoAltTextKey ||
                    LogoAltTextKey != null &&
                    LogoAltTextKey.Equals(other.LogoAltTextKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Link != null)
                    hashCode = hashCode * 59 + Link.GetHashCode();
                    if (Src != null)
                    hashCode = hashCode * 59 + Src.GetHashCode();
                    if (LogoAltTextKey != null)
                    hashCode = hashCode * 59 + LogoAltTextKey.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Image left, Image right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Image left, Image right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
