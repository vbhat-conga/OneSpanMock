/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PackageCompletionReport : IEquatable<PackageCompletionReport>
    { 
        /// <summary>
        /// Gets or Sets Created
        /// </summary>

        [DataMember(Name="created")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Gets or Sets Data
        /// </summary>

        [DataMember(Name="data")]
        public string Data { get; set; }

        /// <summary>
        /// Document Report
        /// </summary>
        /// <value>Document Report</value>

        [DataMember(Name="documents")]
        public List<DocumentCompletionReport> Documents { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Signers Report
        /// </summary>
        /// <value>Signers Report</value>

        [DataMember(Name="signers")]
        public List<SignerCompletionReport> Signers { get; set; }

        /// <summary>
        /// Status of the package
        /// </summary>
        /// <value>Status of the package</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum DRAFTEnum for DRAFT
            /// </summary>
            [EnumMember(Value = "DRAFT")]
            DRAFTEnum = 0,
            /// <summary>
            /// Enum SENTEnum for SENT
            /// </summary>
            [EnumMember(Value = "SENT")]
            SENTEnum = 1,
            /// <summary>
            /// Enum COMPLETEDEnum for COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETEDEnum = 2,
            /// <summary>
            /// Enum ARCHIVEDEnum for ARCHIVED
            /// </summary>
            [EnumMember(Value = "ARCHIVED")]
            ARCHIVEDEnum = 3,
            /// <summary>
            /// Enum DECLINEDEnum for DECLINED
            /// </summary>
            [EnumMember(Value = "DECLINED")]
            DECLINEDEnum = 4,
            /// <summary>
            /// Enum OPTEDOUTEnum for OPTED_OUT
            /// </summary>
            [EnumMember(Value = "OPTED_OUT")]
            OPTEDOUTEnum = 5,
            /// <summary>
            /// Enum EXPIREDEnum for EXPIRED
            /// </summary>
            [EnumMember(Value = "EXPIRED")]
            EXPIREDEnum = 6        }

        /// <summary>
        /// Status of the package
        /// </summary>
        /// <value>Status of the package</value>

        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Gets or Sets Trashed
        /// </summary>

        [DataMember(Name="trashed")]
        public DateTime? Trashed { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>

        [DataMember(Name="updated")]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PackageCompletionReport {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Signers: ").Append(Signers).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Trashed: ").Append(Trashed).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PackageCompletionReport)obj);
        }

        /// <summary>
        /// Returns true if PackageCompletionReport instances are equal
        /// </summary>
        /// <param name="other">Instance of PackageCompletionReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackageCompletionReport other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) && 
                (
                    Data == other.Data ||
                    Data != null &&
                    Data.Equals(other.Data)
                ) && 
                (
                    Documents == other.Documents ||
                    Documents != null &&
                    Documents.SequenceEqual(other.Documents)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Signers == other.Signers ||
                    Signers != null &&
                    Signers.SequenceEqual(other.Signers)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Trashed == other.Trashed ||
                    Trashed != null &&
                    Trashed.Equals(other.Trashed)
                ) && 
                (
                    Updated == other.Updated ||
                    Updated != null &&
                    Updated.Equals(other.Updated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                    if (Documents != null)
                    hashCode = hashCode * 59 + Documents.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Signers != null)
                    hashCode = hashCode * 59 + Signers.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Trashed != null)
                    hashCode = hashCode * 59 + Trashed.GetHashCode();
                    if (Updated != null)
                    hashCode = hashCode * 59 + Updated.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PackageCompletionReport left, PackageCompletionReport right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PackageCompletionReport left, PackageCompletionReport right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
