/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Field details
    /// </summary>
    [DataContract]
    public partial class ReferencedConditionsField : IEquatable<ReferencedConditionsField>
    { 
        /// <summary>
        /// Field Id
        /// </summary>
        /// <value>Field Id</value>

        [DataMember(Name="fieldId")]
        public string FieldId { get; set; }

        /// <summary>
        /// References in condition
        /// </summary>
        /// <value>References in condition</value>

        [DataMember(Name="referencedInCondition")]
        public List<ReferencedConditionsDetails> ReferencedInCondition { get; set; }

        /// <summary>
        /// References in actions
        /// </summary>
        /// <value>References in actions</value>

        [DataMember(Name="referencedInAction")]
        public List<ReferencedConditionsDetails> ReferencedInAction { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReferencedConditionsField {\n");
            sb.Append("  FieldId: ").Append(FieldId).Append("\n");
            sb.Append("  ReferencedInCondition: ").Append(ReferencedInCondition).Append("\n");
            sb.Append("  ReferencedInAction: ").Append(ReferencedInAction).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ReferencedConditionsField)obj);
        }

        /// <summary>
        /// Returns true if ReferencedConditionsField instances are equal
        /// </summary>
        /// <param name="other">Instance of ReferencedConditionsField to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReferencedConditionsField other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FieldId == other.FieldId ||
                    FieldId != null &&
                    FieldId.Equals(other.FieldId)
                ) && 
                (
                    ReferencedInCondition == other.ReferencedInCondition ||
                    ReferencedInCondition != null &&
                    ReferencedInCondition.SequenceEqual(other.ReferencedInCondition)
                ) && 
                (
                    ReferencedInAction == other.ReferencedInAction ||
                    ReferencedInAction != null &&
                    ReferencedInAction.SequenceEqual(other.ReferencedInAction)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FieldId != null)
                    hashCode = hashCode * 59 + FieldId.GetHashCode();
                    if (ReferencedInCondition != null)
                    hashCode = hashCode * 59 + ReferencedInCondition.GetHashCode();
                    if (ReferencedInAction != null)
                    hashCode = hashCode * 59 + ReferencedInAction.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ReferencedConditionsField left, ReferencedConditionsField right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ReferencedConditionsField left, ReferencedConditionsField right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
