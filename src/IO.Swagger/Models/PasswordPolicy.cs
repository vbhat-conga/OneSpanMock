/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PasswordPolicy : IEquatable<PasswordPolicy>
    { 
        /// <summary>
        /// Minimum password age
        /// </summary>
        /// <value>Minimum password age</value>
        [Required]

        [DataMember(Name="age")]
        public int? Age { get; set; }

        /// <summary>
        /// Number of unique new passwords that have to be provided before an old password can be reused
        /// </summary>
        /// <value>Number of unique new passwords that have to be provided before an old password can be reused</value>
        [Required]

        [DataMember(Name="history")]
        public int? History { get; set; }

        /// <summary>
        /// Minimum password length
        /// </summary>
        /// <value>Minimum password length</value>
        [Required]

        [DataMember(Name="length")]
        public int? Length { get; set; }

        /// <summary>
        /// Password requires to include uppercase character
        /// </summary>
        /// <value>Password requires to include uppercase character</value>
        [Required]

        [DataMember(Name="includeUppercase")]
        public bool? IncludeUppercase { get; set; }

        /// <summary>
        /// Password requires to include lowercase character
        /// </summary>
        /// <value>Password requires to include lowercase character</value>
        [Required]

        [DataMember(Name="includeLowercase")]
        public bool? IncludeLowercase { get; set; }

        /// <summary>
        /// Password requires to include number
        /// </summary>
        /// <value>Password requires to include number</value>
        [Required]

        [DataMember(Name="includeNumbers")]
        public bool? IncludeNumbers { get; set; }

        /// <summary>
        /// Password requires to include special character
        /// </summary>
        /// <value>Password requires to include special character</value>
        [Required]

        [DataMember(Name="includeSpecialCharacters")]
        public bool? IncludeSpecialCharacters { get; set; }

        /// <summary>
        /// Number of required rules
        /// </summary>
        /// <value>Number of required rules</value>
        [Required]

        [DataMember(Name="requiredRules")]
        public int? RequiredRules { get; set; }

        /// <summary>
        /// Number of days after which the password will expire
        /// </summary>
        /// <value>Number of days after which the password will expire</value>
        [Required]

        [DataMember(Name="expiry")]
        public int? Expiry { get; set; }

        /// <summary>
        /// Turn on/off password expiry notifications
        /// </summary>
        /// <value>Turn on/off password expiry notifications</value>
        [Required]

        [DataMember(Name="enableExpiryNotifications")]
        public bool? EnableExpiryNotifications { get; set; }

        /// <summary>
        /// Number of days the first expiry notification is send before password is expired
        /// </summary>
        /// <value>Number of days the first expiry notification is send before password is expired</value>
        [Required]

        [DataMember(Name="firstReminder")]
        public int? FirstReminder { get; set; }

        /// <summary>
        /// Number of expiry notifications
        /// </summary>
        /// <value>Number of expiry notifications</value>
        [Required]

        [DataMember(Name="repeatReminderCount")]
        public int? RepeatReminderCount { get; set; }

        /// <summary>
        /// Number of login failures allowed for a user before the account is locked
        /// </summary>
        /// <value>Number of login failures allowed for a user before the account is locked</value>
        [Required]

        [DataMember(Name="maxInvalidLoginAttempts")]
        public int? MaxInvalidLoginAttempts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PasswordPolicy {\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  History: ").Append(History).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  IncludeUppercase: ").Append(IncludeUppercase).Append("\n");
            sb.Append("  IncludeLowercase: ").Append(IncludeLowercase).Append("\n");
            sb.Append("  IncludeNumbers: ").Append(IncludeNumbers).Append("\n");
            sb.Append("  IncludeSpecialCharacters: ").Append(IncludeSpecialCharacters).Append("\n");
            sb.Append("  RequiredRules: ").Append(RequiredRules).Append("\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  EnableExpiryNotifications: ").Append(EnableExpiryNotifications).Append("\n");
            sb.Append("  FirstReminder: ").Append(FirstReminder).Append("\n");
            sb.Append("  RepeatReminderCount: ").Append(RepeatReminderCount).Append("\n");
            sb.Append("  MaxInvalidLoginAttempts: ").Append(MaxInvalidLoginAttempts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PasswordPolicy)obj);
        }

        /// <summary>
        /// Returns true if PasswordPolicy instances are equal
        /// </summary>
        /// <param name="other">Instance of PasswordPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PasswordPolicy other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Age == other.Age ||
                    Age != null &&
                    Age.Equals(other.Age)
                ) && 
                (
                    History == other.History ||
                    History != null &&
                    History.Equals(other.History)
                ) && 
                (
                    Length == other.Length ||
                    Length != null &&
                    Length.Equals(other.Length)
                ) && 
                (
                    IncludeUppercase == other.IncludeUppercase ||
                    IncludeUppercase != null &&
                    IncludeUppercase.Equals(other.IncludeUppercase)
                ) && 
                (
                    IncludeLowercase == other.IncludeLowercase ||
                    IncludeLowercase != null &&
                    IncludeLowercase.Equals(other.IncludeLowercase)
                ) && 
                (
                    IncludeNumbers == other.IncludeNumbers ||
                    IncludeNumbers != null &&
                    IncludeNumbers.Equals(other.IncludeNumbers)
                ) && 
                (
                    IncludeSpecialCharacters == other.IncludeSpecialCharacters ||
                    IncludeSpecialCharacters != null &&
                    IncludeSpecialCharacters.Equals(other.IncludeSpecialCharacters)
                ) && 
                (
                    RequiredRules == other.RequiredRules ||
                    RequiredRules != null &&
                    RequiredRules.Equals(other.RequiredRules)
                ) && 
                (
                    Expiry == other.Expiry ||
                    Expiry != null &&
                    Expiry.Equals(other.Expiry)
                ) && 
                (
                    EnableExpiryNotifications == other.EnableExpiryNotifications ||
                    EnableExpiryNotifications != null &&
                    EnableExpiryNotifications.Equals(other.EnableExpiryNotifications)
                ) && 
                (
                    FirstReminder == other.FirstReminder ||
                    FirstReminder != null &&
                    FirstReminder.Equals(other.FirstReminder)
                ) && 
                (
                    RepeatReminderCount == other.RepeatReminderCount ||
                    RepeatReminderCount != null &&
                    RepeatReminderCount.Equals(other.RepeatReminderCount)
                ) && 
                (
                    MaxInvalidLoginAttempts == other.MaxInvalidLoginAttempts ||
                    MaxInvalidLoginAttempts != null &&
                    MaxInvalidLoginAttempts.Equals(other.MaxInvalidLoginAttempts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Age != null)
                    hashCode = hashCode * 59 + Age.GetHashCode();
                    if (History != null)
                    hashCode = hashCode * 59 + History.GetHashCode();
                    if (Length != null)
                    hashCode = hashCode * 59 + Length.GetHashCode();
                    if (IncludeUppercase != null)
                    hashCode = hashCode * 59 + IncludeUppercase.GetHashCode();
                    if (IncludeLowercase != null)
                    hashCode = hashCode * 59 + IncludeLowercase.GetHashCode();
                    if (IncludeNumbers != null)
                    hashCode = hashCode * 59 + IncludeNumbers.GetHashCode();
                    if (IncludeSpecialCharacters != null)
                    hashCode = hashCode * 59 + IncludeSpecialCharacters.GetHashCode();
                    if (RequiredRules != null)
                    hashCode = hashCode * 59 + RequiredRules.GetHashCode();
                    if (Expiry != null)
                    hashCode = hashCode * 59 + Expiry.GetHashCode();
                    if (EnableExpiryNotifications != null)
                    hashCode = hashCode * 59 + EnableExpiryNotifications.GetHashCode();
                    if (FirstReminder != null)
                    hashCode = hashCode * 59 + FirstReminder.GetHashCode();
                    if (RepeatReminderCount != null)
                    hashCode = hashCode * 59 + RepeatReminderCount.GetHashCode();
                    if (MaxInvalidLoginAttempts != null)
                    hashCode = hashCode * 59 + MaxInvalidLoginAttempts.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PasswordPolicy left, PasswordPolicy right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PasswordPolicy left, PasswordPolicy right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
