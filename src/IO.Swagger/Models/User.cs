/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class User : IEquatable<User>
    { 
        /// <summary>
        /// Gets or Sets Address
        /// </summary>

        [DataMember(Name="address")]
        public Address Address { get; set; }

        /// <summary>
        /// Language
        /// </summary>
        /// <value>Language</value>

        [DataMember(Name="language")]
        public string Language { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [Required]

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Signature
        /// </summary>

        [DataMember(Name="signature")]
        public SignatureStyle Signature { get; set; }

        /// <summary>
        /// Created
        /// </summary>
        /// <value>Created</value>
        [Required]

        [DataMember(Name="created")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [Required]

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Data
        /// </summary>
        /// <value>Data</value>

        [DataMember(Name="data")]
        public Dictionary<string, Object> Data { get; set; }

        /// <summary>
        /// Title
        /// </summary>
        /// <value>Title</value>

        [DataMember(Name="title")]
        public string Title { get; set; }

        /// <summary>
        /// UserCustomFields
        /// </summary>
        /// <value>UserCustomFields</value>
        [Required]

        [DataMember(Name="userCustomFields")]
        public List<UserCustomField> UserCustomFields { get; set; }

        /// <summary>
        /// TimezoneId
        /// </summary>
        /// <value>TimezoneId</value>
        [Required]

        [DataMember(Name="timezoneId")]
        public string TimezoneId { get; set; }

        /// <summary>
        /// Gets or Sets External
        /// </summary>

        [DataMember(Name="external")]
        public External External { get; set; }

        /// <summary>
        /// ProfessionalIdentityFields
        /// </summary>
        /// <value>ProfessionalIdentityFields</value>
        [Required]

        [DataMember(Name="professionalIdentityFields")]
        public List<ProfessionalIdentityField> ProfessionalIdentityFields { get; set; }

        /// <summary>
        /// Company
        /// </summary>
        /// <value>Company</value>
        [Required]

        [DataMember(Name="company")]
        public string Company { get; set; }

        /// <summary>
        /// Updated
        /// </summary>
        /// <value>Updated</value>
        [Required]

        [DataMember(Name="updated")]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Phone
        /// </summary>
        /// <value>Phone</value>

        [DataMember(Name="phone")]
        public string Phone { get; set; }

        /// <summary>
        /// Gets or Sets SpecialTypes
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SpecialTypesEnum
        {
            /// <summary>
            /// Enum NOTARYEnum for NOTARY
            /// </summary>
            [EnumMember(Value = "NOTARY")]
            NOTARYEnum = 0        }

        /// <summary>
        /// Special User Types
        /// </summary>
        /// <value>Special User Types</value>

        [DataMember(Name="specialTypes")]
        public List<SpecialTypesEnum> SpecialTypes { get; set; }

        /// <summary>
        /// FirstName
        /// </summary>
        /// <value>FirstName</value>
        [Required]

        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// LastName
        /// </summary>
        /// <value>LastName</value>
        [Required]

        [DataMember(Name="lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>
        [Required]

        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class User {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UserCustomFields: ").Append(UserCustomFields).Append("\n");
            sb.Append("  TimezoneId: ").Append(TimezoneId).Append("\n");
            sb.Append("  External: ").Append(External).Append("\n");
            sb.Append("  ProfessionalIdentityFields: ").Append(ProfessionalIdentityFields).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  SpecialTypes: ").Append(SpecialTypes).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((User)obj);
        }

        /// <summary>
        /// Returns true if User instances are equal
        /// </summary>
        /// <param name="other">Instance of User to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(User other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Signature == other.Signature ||
                    Signature != null &&
                    Signature.Equals(other.Signature)
                ) && 
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Data == other.Data ||
                    Data != null &&
                    Data.SequenceEqual(other.Data)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    UserCustomFields == other.UserCustomFields ||
                    UserCustomFields != null &&
                    UserCustomFields.SequenceEqual(other.UserCustomFields)
                ) && 
                (
                    TimezoneId == other.TimezoneId ||
                    TimezoneId != null &&
                    TimezoneId.Equals(other.TimezoneId)
                ) && 
                (
                    External == other.External ||
                    External != null &&
                    External.Equals(other.External)
                ) && 
                (
                    ProfessionalIdentityFields == other.ProfessionalIdentityFields ||
                    ProfessionalIdentityFields != null &&
                    ProfessionalIdentityFields.SequenceEqual(other.ProfessionalIdentityFields)
                ) && 
                (
                    Company == other.Company ||
                    Company != null &&
                    Company.Equals(other.Company)
                ) && 
                (
                    Updated == other.Updated ||
                    Updated != null &&
                    Updated.Equals(other.Updated)
                ) && 
                (
                    Phone == other.Phone ||
                    Phone != null &&
                    Phone.Equals(other.Phone)
                ) && 
                (
                    SpecialTypes == other.SpecialTypes ||
                    SpecialTypes != null &&
                    SpecialTypes.SequenceEqual(other.SpecialTypes)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Signature != null)
                    hashCode = hashCode * 59 + Signature.GetHashCode();
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (UserCustomFields != null)
                    hashCode = hashCode * 59 + UserCustomFields.GetHashCode();
                    if (TimezoneId != null)
                    hashCode = hashCode * 59 + TimezoneId.GetHashCode();
                    if (External != null)
                    hashCode = hashCode * 59 + External.GetHashCode();
                    if (ProfessionalIdentityFields != null)
                    hashCode = hashCode * 59 + ProfessionalIdentityFields.GetHashCode();
                    if (Company != null)
                    hashCode = hashCode * 59 + Company.GetHashCode();
                    if (Updated != null)
                    hashCode = hashCode * 59 + Updated.GetHashCode();
                    if (Phone != null)
                    hashCode = hashCode * 59 + Phone.GetHashCode();
                    if (SpecialTypes != null)
                    hashCode = hashCode * 59 + SpecialTypes.GetHashCode();
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(User left, User right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(User left, User right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
