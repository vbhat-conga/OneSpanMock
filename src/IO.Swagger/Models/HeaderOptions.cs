/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class HeaderOptions : IEquatable<HeaderOptions>
    { 
        /// <summary>
        /// Feedback
        /// </summary>
        /// <value>Feedback</value>
        [Required]

        [DataMember(Name="feedback")]
        public bool? Feedback { get; set; }

        /// <summary>
        /// Breadcrumbs
        /// </summary>
        /// <value>Breadcrumbs</value>
        [Required]

        [DataMember(Name="breadcrumbs")]
        public bool? Breadcrumbs { get; set; }

        /// <summary>
        /// Gets or Sets GlobalActions
        /// </summary>

        [DataMember(Name="globalActions")]
        public GlobalActionsOptions GlobalActions { get; set; }

        /// <summary>
        /// GlobalNavigation
        /// </summary>
        /// <value>GlobalNavigation</value>
        [Required]

        [DataMember(Name="globalNavigation")]
        public bool? GlobalNavigation { get; set; }

        /// <summary>
        /// SessionBar
        /// </summary>
        /// <value>SessionBar</value>
        [Required]

        [DataMember(Name="sessionBar")]
        public bool? SessionBar { get; set; }

        /// <summary>
        /// Gets or Sets TitleBar
        /// </summary>

        [DataMember(Name="titleBar")]
        public TitleBarOptions TitleBar { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HeaderOptions {\n");
            sb.Append("  Feedback: ").Append(Feedback).Append("\n");
            sb.Append("  Breadcrumbs: ").Append(Breadcrumbs).Append("\n");
            sb.Append("  GlobalActions: ").Append(GlobalActions).Append("\n");
            sb.Append("  GlobalNavigation: ").Append(GlobalNavigation).Append("\n");
            sb.Append("  SessionBar: ").Append(SessionBar).Append("\n");
            sb.Append("  TitleBar: ").Append(TitleBar).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HeaderOptions)obj);
        }

        /// <summary>
        /// Returns true if HeaderOptions instances are equal
        /// </summary>
        /// <param name="other">Instance of HeaderOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HeaderOptions other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Feedback == other.Feedback ||
                    Feedback != null &&
                    Feedback.Equals(other.Feedback)
                ) && 
                (
                    Breadcrumbs == other.Breadcrumbs ||
                    Breadcrumbs != null &&
                    Breadcrumbs.Equals(other.Breadcrumbs)
                ) && 
                (
                    GlobalActions == other.GlobalActions ||
                    GlobalActions != null &&
                    GlobalActions.Equals(other.GlobalActions)
                ) && 
                (
                    GlobalNavigation == other.GlobalNavigation ||
                    GlobalNavigation != null &&
                    GlobalNavigation.Equals(other.GlobalNavigation)
                ) && 
                (
                    SessionBar == other.SessionBar ||
                    SessionBar != null &&
                    SessionBar.Equals(other.SessionBar)
                ) && 
                (
                    TitleBar == other.TitleBar ||
                    TitleBar != null &&
                    TitleBar.Equals(other.TitleBar)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Feedback != null)
                    hashCode = hashCode * 59 + Feedback.GetHashCode();
                    if (Breadcrumbs != null)
                    hashCode = hashCode * 59 + Breadcrumbs.GetHashCode();
                    if (GlobalActions != null)
                    hashCode = hashCode * 59 + GlobalActions.GetHashCode();
                    if (GlobalNavigation != null)
                    hashCode = hashCode * 59 + GlobalNavigation.GetHashCode();
                    if (SessionBar != null)
                    hashCode = hashCode * 59 + SessionBar.GetHashCode();
                    if (TitleBar != null)
                    hashCode = hashCode * 59 + TitleBar.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HeaderOptions left, HeaderOptions right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HeaderOptions left, HeaderOptions right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
