/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Account : IEquatable<Account>
    { 
        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [Required]

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Created
        /// </summary>
        /// <value>Created</value>
        [Required]

        [DataMember(Name="created")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Owner
        /// </summary>
        /// <value>Owner</value>
        [Required]

        [DataMember(Name="owner")]
        public string Owner { get; set; }

        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [Required]

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Data
        /// </summary>
        /// <value>Data</value>

        [DataMember(Name="data")]
        public Dictionary<string, Object> Data { get; set; }

        /// <summary>
        /// CustomFields
        /// </summary>
        /// <value>CustomFields</value>
        [Required]

        [DataMember(Name="customFields")]
        public List<CustomField> CustomFields { get; set; }

        /// <summary>
        /// Gets or Sets Providers
        /// </summary>

        [DataMember(Name="providers")]
        public AccountProviders Providers { get; set; }

        /// <summary>
        /// TimezoneId
        /// </summary>
        /// <value>TimezoneId</value>
        [Required]

        [DataMember(Name="timezoneId")]
        public string TimezoneId { get; set; }

        /// <summary>
        /// Licenses
        /// </summary>
        /// <value>Licenses</value>
        [Required]

        [DataMember(Name="licenses")]
        public List<License> Licenses { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [Required]

        [DataMember(Name="company")]
        public Company Company { get; set; }

        /// <summary>
        /// Updated
        /// </summary>
        /// <value>Updated</value>
        [Required]

        [DataMember(Name="updated")]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// LogoUrl
        /// </summary>
        /// <value>LogoUrl</value>

        [DataMember(Name="logoUrl")]
        public string LogoUrl { get; set; }

        /// <summary>
        /// LogoAltTextKey
        /// </summary>
        /// <value>LogoAltTextKey</value>

        [DataMember(Name="logoAltTextKey")]
        public string LogoAltTextKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Account {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  Providers: ").Append(Providers).Append("\n");
            sb.Append("  TimezoneId: ").Append(TimezoneId).Append("\n");
            sb.Append("  Licenses: ").Append(Licenses).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  LogoUrl: ").Append(LogoUrl).Append("\n");
            sb.Append("  LogoAltTextKey: ").Append(LogoAltTextKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Account)obj);
        }

        /// <summary>
        /// Returns true if Account instances are equal
        /// </summary>
        /// <param name="other">Instance of Account to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Account other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) && 
                (
                    Owner == other.Owner ||
                    Owner != null &&
                    Owner.Equals(other.Owner)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Data == other.Data ||
                    Data != null &&
                    Data.SequenceEqual(other.Data)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.SequenceEqual(other.CustomFields)
                ) && 
                (
                    Providers == other.Providers ||
                    Providers != null &&
                    Providers.Equals(other.Providers)
                ) && 
                (
                    TimezoneId == other.TimezoneId ||
                    TimezoneId != null &&
                    TimezoneId.Equals(other.TimezoneId)
                ) && 
                (
                    Licenses == other.Licenses ||
                    Licenses != null &&
                    Licenses.SequenceEqual(other.Licenses)
                ) && 
                (
                    Company == other.Company ||
                    Company != null &&
                    Company.Equals(other.Company)
                ) && 
                (
                    Updated == other.Updated ||
                    Updated != null &&
                    Updated.Equals(other.Updated)
                ) && 
                (
                    LogoUrl == other.LogoUrl ||
                    LogoUrl != null &&
                    LogoUrl.Equals(other.LogoUrl)
                ) && 
                (
                    LogoAltTextKey == other.LogoAltTextKey ||
                    LogoAltTextKey != null &&
                    LogoAltTextKey.Equals(other.LogoAltTextKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (Owner != null)
                    hashCode = hashCode * 59 + Owner.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (Providers != null)
                    hashCode = hashCode * 59 + Providers.GetHashCode();
                    if (TimezoneId != null)
                    hashCode = hashCode * 59 + TimezoneId.GetHashCode();
                    if (Licenses != null)
                    hashCode = hashCode * 59 + Licenses.GetHashCode();
                    if (Company != null)
                    hashCode = hashCode * 59 + Company.GetHashCode();
                    if (Updated != null)
                    hashCode = hashCode * 59 + Updated.GetHashCode();
                    if (LogoUrl != null)
                    hashCode = hashCode * 59 + LogoUrl.GetHashCode();
                    if (LogoAltTextKey != null)
                    hashCode = hashCode * 59 + LogoAltTextKey.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Account left, Account right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Account left, Account right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
