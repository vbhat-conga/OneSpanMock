/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LayoutStyle : IEquatable<LayoutStyle>
    { 
        /// <summary>
        /// Gets or Sets BrandingBar
        /// </summary>

        [DataMember(Name="brandingBar")]
        public Image BrandingBar { get; set; }

        /// <summary>
        /// Gets or Sets Dialog
        /// </summary>

        [DataMember(Name="dialog")]
        public Style Dialog { get; set; }

        /// <summary>
        /// Gets or Sets Toolbar
        /// </summary>

        [DataMember(Name="toolbar")]
        public Style Toolbar { get; set; }

        /// <summary>
        /// Gets or Sets TitleBar
        /// </summary>

        [DataMember(Name="titleBar")]
        public Style TitleBar { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LayoutStyle {\n");
            sb.Append("  BrandingBar: ").Append(BrandingBar).Append("\n");
            sb.Append("  Dialog: ").Append(Dialog).Append("\n");
            sb.Append("  Toolbar: ").Append(Toolbar).Append("\n");
            sb.Append("  TitleBar: ").Append(TitleBar).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LayoutStyle)obj);
        }

        /// <summary>
        /// Returns true if LayoutStyle instances are equal
        /// </summary>
        /// <param name="other">Instance of LayoutStyle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LayoutStyle other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BrandingBar == other.BrandingBar ||
                    BrandingBar != null &&
                    BrandingBar.Equals(other.BrandingBar)
                ) && 
                (
                    Dialog == other.Dialog ||
                    Dialog != null &&
                    Dialog.Equals(other.Dialog)
                ) && 
                (
                    Toolbar == other.Toolbar ||
                    Toolbar != null &&
                    Toolbar.Equals(other.Toolbar)
                ) && 
                (
                    TitleBar == other.TitleBar ||
                    TitleBar != null &&
                    TitleBar.Equals(other.TitleBar)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BrandingBar != null)
                    hashCode = hashCode * 59 + BrandingBar.GetHashCode();
                    if (Dialog != null)
                    hashCode = hashCode * 59 + Dialog.GetHashCode();
                    if (Toolbar != null)
                    hashCode = hashCode * 59 + Toolbar.GetHashCode();
                    if (TitleBar != null)
                    hashCode = hashCode * 59 + TitleBar.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LayoutStyle left, LayoutStyle right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LayoutStyle left, LayoutStyle right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
