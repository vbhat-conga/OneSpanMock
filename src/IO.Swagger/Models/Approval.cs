/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Approval : IEquatable<Approval>
    { 
        /// <summary>
        /// Fields
        /// </summary>
        /// <value>Fields</value>

        [DataMember(Name="fields")]
        public List<Field> Fields { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Data
        /// </summary>
        /// <value>Data</value>

        [DataMember(Name="data")]
        public Dictionary<string, Object> Data { get; set; }

        /// <summary>
        /// Role
        /// </summary>
        /// <value>Role</value>
        [Required]

        [DataMember(Name="role")]
        public string Role { get; set; }

        /// <summary>
        /// Optional
        /// </summary>
        /// <value>Optional</value>

        [DataMember(Name="optional")]
        public bool? Optional { get; set; }

        /// <summary>
        /// EnforceCaptureSignature
        /// </summary>
        /// <value>EnforceCaptureSignature</value>

        [DataMember(Name="enforceCaptureSignature")]
        public bool? EnforceCaptureSignature { get; set; }

        /// <summary>
        /// Accepted
        /// </summary>
        /// <value>Accepted</value>

        [DataMember(Name="accepted")]
        public DateTime? Accepted { get; set; }

        /// <summary>
        /// Signed
        /// </summary>
        /// <value>Signed</value>

        [DataMember(Name="signed")]
        public DateTime? Signed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Approval {\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  Optional: ").Append(Optional).Append("\n");
            sb.Append("  EnforceCaptureSignature: ").Append(EnforceCaptureSignature).Append("\n");
            sb.Append("  Accepted: ").Append(Accepted).Append("\n");
            sb.Append("  Signed: ").Append(Signed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Approval)obj);
        }

        /// <summary>
        /// Returns true if Approval instances are equal
        /// </summary>
        /// <param name="other">Instance of Approval to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Approval other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Fields == other.Fields ||
                    Fields != null &&
                    Fields.SequenceEqual(other.Fields)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Data == other.Data ||
                    Data != null &&
                    Data.SequenceEqual(other.Data)
                ) && 
                (
                    Role == other.Role ||
                    Role != null &&
                    Role.Equals(other.Role)
                ) && 
                (
                    Optional == other.Optional ||
                    Optional != null &&
                    Optional.Equals(other.Optional)
                ) && 
                (
                    EnforceCaptureSignature == other.EnforceCaptureSignature ||
                    EnforceCaptureSignature != null &&
                    EnforceCaptureSignature.Equals(other.EnforceCaptureSignature)
                ) && 
                (
                    Accepted == other.Accepted ||
                    Accepted != null &&
                    Accepted.Equals(other.Accepted)
                ) && 
                (
                    Signed == other.Signed ||
                    Signed != null &&
                    Signed.Equals(other.Signed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Fields != null)
                    hashCode = hashCode * 59 + Fields.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                    if (Role != null)
                    hashCode = hashCode * 59 + Role.GetHashCode();
                    if (Optional != null)
                    hashCode = hashCode * 59 + Optional.GetHashCode();
                    if (EnforceCaptureSignature != null)
                    hashCode = hashCode * 59 + EnforceCaptureSignature.GetHashCode();
                    if (Accepted != null)
                    hashCode = hashCode * 59 + Accepted.GetHashCode();
                    if (Signed != null)
                    hashCode = hashCode * 59 + Signed.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Approval left, Approval right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Approval left, Approval right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
