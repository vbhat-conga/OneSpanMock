/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class NotaryCommission : IEquatable<NotaryCommission>
    { 
        /// <summary>
        /// Notary commission name
        /// </summary>
        /// <value>Notary commission name</value>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// License number
        /// </summary>
        /// <value>License number</value>

        [DataMember(Name="number")]
        public int? Number { get; set; }

        /// <summary>
        /// License expiration date
        /// </summary>
        /// <value>License expiration date</value>

        [DataMember(Name="expirationDate")]
        public DateTime? ExpirationDate { get; set; }

        /// <summary>
        /// License jurisdiction
        /// </summary>
        /// <value>License jurisdiction</value>

        [DataMember(Name="jurisdiction")]
        public string Jurisdiction { get; set; }

        /// <summary>
        /// License country
        /// </summary>
        /// <value>License country</value>

        [DataMember(Name="country")]
        public string Country { get; set; }

        /// <summary>
        /// License confirmed
        /// </summary>
        /// <value>License confirmed</value>

        [DataMember(Name="confirmed")]
        public bool? Confirmed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotaryCommission {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Jurisdiction: ").Append(Jurisdiction).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Confirmed: ").Append(Confirmed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NotaryCommission)obj);
        }

        /// <summary>
        /// Returns true if NotaryCommission instances are equal
        /// </summary>
        /// <param name="other">Instance of NotaryCommission to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotaryCommission other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Number == other.Number ||
                    Number != null &&
                    Number.Equals(other.Number)
                ) && 
                (
                    ExpirationDate == other.ExpirationDate ||
                    ExpirationDate != null &&
                    ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    Jurisdiction == other.Jurisdiction ||
                    Jurisdiction != null &&
                    Jurisdiction.Equals(other.Jurisdiction)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    Confirmed == other.Confirmed ||
                    Confirmed != null &&
                    Confirmed.Equals(other.Confirmed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Number != null)
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    if (ExpirationDate != null)
                    hashCode = hashCode * 59 + ExpirationDate.GetHashCode();
                    if (Jurisdiction != null)
                    hashCode = hashCode * 59 + Jurisdiction.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (Confirmed != null)
                    hashCode = hashCode * 59 + Confirmed.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NotaryCommission left, NotaryCommission right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NotaryCommission left, NotaryCommission right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
