/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Package : IEquatable<Package>
    { 
        /// <summary>
        /// Name of Transaction
        /// </summary>
        /// <value>Name of Transaction</value>
        [Required]

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Roles
        /// </summary>
        /// <value>Roles</value>
        [Required]

        [DataMember(Name="roles")]
        public List<Role> Roles { get; set; }

        /// <summary>
        /// Status
        /// </summary>
        /// <value>Status</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum DRAFTEnum for DRAFT
            /// </summary>
            [EnumMember(Value = "DRAFT")]
            DRAFTEnum = 0,
            /// <summary>
            /// Enum SENTEnum for SENT
            /// </summary>
            [EnumMember(Value = "SENT")]
            SENTEnum = 1,
            /// <summary>
            /// Enum COMPLETEDEnum for COMPLETED
            /// </summary>
            [EnumMember(Value = "COMPLETED")]
            COMPLETEDEnum = 2,
            /// <summary>
            /// Enum ARCHIVEDEnum for ARCHIVED
            /// </summary>
            [EnumMember(Value = "ARCHIVED")]
            ARCHIVEDEnum = 3,
            /// <summary>
            /// Enum DECLINEDEnum for DECLINED
            /// </summary>
            [EnumMember(Value = "DECLINED")]
            DECLINEDEnum = 4,
            /// <summary>
            /// Enum OPTEDOUTEnum for OPTED_OUT
            /// </summary>
            [EnumMember(Value = "OPTED_OUT")]
            OPTEDOUTEnum = 5,
            /// <summary>
            /// Enum EXPIREDEnum for EXPIRED
            /// </summary>
            [EnumMember(Value = "EXPIRED")]
            EXPIREDEnum = 6        }

        /// <summary>
        /// Status
        /// </summary>
        /// <value>Status</value>
        [Required]

        [DataMember(Name="status")]
        public StatusEnum? Status { get; set; }

        /// <summary>
        /// Created
        /// </summary>
        /// <value>Created</value>
        [Required]

        [DataMember(Name="created")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Messages
        /// </summary>
        /// <value>Messages</value>
        [Required]

        [DataMember(Name="messages")]
        public List<Message> Messages { get; set; }

        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [Required]

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Data
        /// </summary>
        /// <value>Data</value>

        [DataMember(Name="data")]
        public Dictionary<string, Object> Data { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [Required]

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Language
        /// </summary>
        /// <value>Language</value>

        [DataMember(Name="language")]
        public string Language { get; set; }

        /// <summary>
        /// Autocomplete
        /// </summary>
        /// <value>Autocomplete</value>
        [Required]

        [DataMember(Name="autocomplete")]
        public bool? Autocomplete { get; set; }

        /// <summary>
        /// Type
        /// </summary>
        /// <value>Type</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum PACKAGEEnum for PACKAGE
            /// </summary>
            [EnumMember(Value = "PACKAGE")]
            PACKAGEEnum = 0,
            /// <summary>
            /// Enum TEMPLATEEnum for TEMPLATE
            /// </summary>
            [EnumMember(Value = "TEMPLATE")]
            TEMPLATEEnum = 1,
            /// <summary>
            /// Enum LAYOUTEnum for LAYOUT
            /// </summary>
            [EnumMember(Value = "LAYOUT")]
            LAYOUTEnum = 2        }

        /// <summary>
        /// Type
        /// </summary>
        /// <value>Type</value>
        [Required]

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Due
        /// </summary>
        /// <value>Due</value>

        [DataMember(Name="due")]
        public DateTime? Due { get; set; }

        /// <summary>
        /// Visibility
        /// </summary>
        /// <value>Visibility</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum VisibilityEnum
        {
            /// <summary>
            /// Enum ACCOUNTEnum for ACCOUNT
            /// </summary>
            [EnumMember(Value = "ACCOUNT")]
            ACCOUNTEnum = 0,
            /// <summary>
            /// Enum SENDEREnum for SENDER
            /// </summary>
            [EnumMember(Value = "SENDER")]
            SENDEREnum = 1        }

        /// <summary>
        /// Visibility
        /// </summary>
        /// <value>Visibility</value>
        [Required]

        [DataMember(Name="visibility")]
        public VisibilityEnum? Visibility { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>

        [DataMember(Name="settings")]
        public PackageSettings Settings { get; set; }

        /// <summary>
        /// Consent
        /// </summary>
        /// <value>Consent</value>

        [DataMember(Name="consent")]
        public string Consent { get; set; }

        /// <summary>
        /// Notary Role
        /// </summary>
        /// <value>Notary Role</value>

        [DataMember(Name="notaryRoleId")]
        public string NotaryRoleId { get; set; }

        /// <summary>
        /// Trashed
        /// </summary>
        /// <value>Trashed</value>
        [Required]

        [DataMember(Name="trashed")]
        public bool? Trashed { get; set; }

        /// <summary>
        /// Notarized
        /// </summary>
        /// <value>Notarized</value>
        [Required]

        [DataMember(Name="notarized")]
        public bool? Notarized { get; set; }

        /// <summary>
        /// TimezoneId
        /// </summary>
        /// <value>TimezoneId</value>

        [DataMember(Name="timezoneId")]
        public string TimezoneId { get; set; }

        /// <summary>
        /// Documents
        /// </summary>
        /// <value>Documents</value>
        [Required]

        [DataMember(Name="documents")]
        public List<Document> Documents { get; set; }

        /// <summary>
        /// EmailMessage
        /// </summary>
        /// <value>EmailMessage</value>
        [Required]

        [DataMember(Name="emailMessage")]
        public string EmailMessage { get; set; }

        /// <summary>
        /// Updated
        /// </summary>
        /// <value>Updated</value>
        [Required]

        [DataMember(Name="updated")]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Completed
        /// </summary>
        /// <value>Completed</value>

        [DataMember(Name="completed")]
        public DateTime? Completed { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [Required]

        [DataMember(Name="sender")]
        public Sender Sender { get; set; }

        /// <summary>
        /// Gets or Sets Limits
        /// </summary>

        [DataMember(Name="limits")]
        public PackageArtifactsLimits Limits { get; set; }

        /// <summary>
        /// Gets or Sets SignedDocumentDelivery
        /// </summary>

        [DataMember(Name="signedDocumentDelivery")]
        public SignedDocumentDelivery SignedDocumentDelivery { get; set; }

        /// <summary>
        /// BulkSendable
        /// </summary>
        /// <value>BulkSendable</value>
        [Required]

        [DataMember(Name="bulkSendable")]
        public bool? BulkSendable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Package {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Autocomplete: ").Append(Autocomplete).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Due: ").Append(Due).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Consent: ").Append(Consent).Append("\n");
            sb.Append("  NotaryRoleId: ").Append(NotaryRoleId).Append("\n");
            sb.Append("  Trashed: ").Append(Trashed).Append("\n");
            sb.Append("  Notarized: ").Append(Notarized).Append("\n");
            sb.Append("  TimezoneId: ").Append(TimezoneId).Append("\n");
            sb.Append("  Documents: ").Append(Documents).Append("\n");
            sb.Append("  EmailMessage: ").Append(EmailMessage).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  Limits: ").Append(Limits).Append("\n");
            sb.Append("  SignedDocumentDelivery: ").Append(SignedDocumentDelivery).Append("\n");
            sb.Append("  BulkSendable: ").Append(BulkSendable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Package)obj);
        }

        /// <summary>
        /// Returns true if Package instances are equal
        /// </summary>
        /// <param name="other">Instance of Package to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Package other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Roles == other.Roles ||
                    Roles != null &&
                    Roles.SequenceEqual(other.Roles)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) && 
                (
                    Messages == other.Messages ||
                    Messages != null &&
                    Messages.SequenceEqual(other.Messages)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Data == other.Data ||
                    Data != null &&
                    Data.SequenceEqual(other.Data)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                ) && 
                (
                    Autocomplete == other.Autocomplete ||
                    Autocomplete != null &&
                    Autocomplete.Equals(other.Autocomplete)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Due == other.Due ||
                    Due != null &&
                    Due.Equals(other.Due)
                ) && 
                (
                    Visibility == other.Visibility ||
                    Visibility != null &&
                    Visibility.Equals(other.Visibility)
                ) && 
                (
                    Settings == other.Settings ||
                    Settings != null &&
                    Settings.Equals(other.Settings)
                ) && 
                (
                    Consent == other.Consent ||
                    Consent != null &&
                    Consent.Equals(other.Consent)
                ) && 
                (
                    NotaryRoleId == other.NotaryRoleId ||
                    NotaryRoleId != null &&
                    NotaryRoleId.Equals(other.NotaryRoleId)
                ) && 
                (
                    Trashed == other.Trashed ||
                    Trashed != null &&
                    Trashed.Equals(other.Trashed)
                ) && 
                (
                    Notarized == other.Notarized ||
                    Notarized != null &&
                    Notarized.Equals(other.Notarized)
                ) && 
                (
                    TimezoneId == other.TimezoneId ||
                    TimezoneId != null &&
                    TimezoneId.Equals(other.TimezoneId)
                ) && 
                (
                    Documents == other.Documents ||
                    Documents != null &&
                    Documents.SequenceEqual(other.Documents)
                ) && 
                (
                    EmailMessage == other.EmailMessage ||
                    EmailMessage != null &&
                    EmailMessage.Equals(other.EmailMessage)
                ) && 
                (
                    Updated == other.Updated ||
                    Updated != null &&
                    Updated.Equals(other.Updated)
                ) && 
                (
                    Completed == other.Completed ||
                    Completed != null &&
                    Completed.Equals(other.Completed)
                ) && 
                (
                    Sender == other.Sender ||
                    Sender != null &&
                    Sender.Equals(other.Sender)
                ) && 
                (
                    Limits == other.Limits ||
                    Limits != null &&
                    Limits.Equals(other.Limits)
                ) && 
                (
                    SignedDocumentDelivery == other.SignedDocumentDelivery ||
                    SignedDocumentDelivery != null &&
                    SignedDocumentDelivery.Equals(other.SignedDocumentDelivery)
                ) && 
                (
                    BulkSendable == other.BulkSendable ||
                    BulkSendable != null &&
                    BulkSendable.Equals(other.BulkSendable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Roles != null)
                    hashCode = hashCode * 59 + Roles.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (Messages != null)
                    hashCode = hashCode * 59 + Messages.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                    if (Autocomplete != null)
                    hashCode = hashCode * 59 + Autocomplete.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Due != null)
                    hashCode = hashCode * 59 + Due.GetHashCode();
                    if (Visibility != null)
                    hashCode = hashCode * 59 + Visibility.GetHashCode();
                    if (Settings != null)
                    hashCode = hashCode * 59 + Settings.GetHashCode();
                    if (Consent != null)
                    hashCode = hashCode * 59 + Consent.GetHashCode();
                    if (NotaryRoleId != null)
                    hashCode = hashCode * 59 + NotaryRoleId.GetHashCode();
                    if (Trashed != null)
                    hashCode = hashCode * 59 + Trashed.GetHashCode();
                    if (Notarized != null)
                    hashCode = hashCode * 59 + Notarized.GetHashCode();
                    if (TimezoneId != null)
                    hashCode = hashCode * 59 + TimezoneId.GetHashCode();
                    if (Documents != null)
                    hashCode = hashCode * 59 + Documents.GetHashCode();
                    if (EmailMessage != null)
                    hashCode = hashCode * 59 + EmailMessage.GetHashCode();
                    if (Updated != null)
                    hashCode = hashCode * 59 + Updated.GetHashCode();
                    if (Completed != null)
                    hashCode = hashCode * 59 + Completed.GetHashCode();
                    if (Sender != null)
                    hashCode = hashCode * 59 + Sender.GetHashCode();
                    if (Limits != null)
                    hashCode = hashCode * 59 + Limits.GetHashCode();
                    if (SignedDocumentDelivery != null)
                    hashCode = hashCode * 59 + SignedDocumentDelivery.GetHashCode();
                    if (BulkSendable != null)
                    hashCode = hashCode * 59 + BulkSendable.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Package left, Package right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Package left, Package right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
