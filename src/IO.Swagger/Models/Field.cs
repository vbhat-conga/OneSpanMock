/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Field : IEquatable<Field>
    { 
        /// <summary>
        /// Value
        /// </summary>
        /// <value>Value</value>

        [DataMember(Name="value")]
        public string Value { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [Required]

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Type
        /// </summary>
        /// <value>Type</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum SIGNATUREEnum for SIGNATURE
            /// </summary>
            [EnumMember(Value = "SIGNATURE")]
            SIGNATUREEnum = 0,
            /// <summary>
            /// Enum INPUTEnum for INPUT
            /// </summary>
            [EnumMember(Value = "INPUT")]
            INPUTEnum = 1,
            /// <summary>
            /// Enum IMAGEEnum for IMAGE
            /// </summary>
            [EnumMember(Value = "IMAGE")]
            IMAGEEnum = 2        }

        /// <summary>
        /// Type
        /// </summary>
        /// <value>Type</value>
        [Required]

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Gets or Sets Validation
        /// </summary>

        [DataMember(Name="validation")]
        public FieldValidation Validation { get; set; }

        /// <summary>
        /// Binding
        /// </summary>
        /// <value>Binding</value>

        [DataMember(Name="binding")]
        public string Binding { get; set; }

        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [Required]

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Data
        /// </summary>
        /// <value>Data</value>

        [DataMember(Name="data")]
        public Dictionary<string, Object> Data { get; set; }

        /// <summary>
        /// Page
        /// </summary>
        /// <value>Page</value>
        [Required]

        [DataMember(Name="page")]
        public int? Page { get; set; }

        /// <summary>
        /// Left
        /// </summary>
        /// <value>Left</value>

        [DataMember(Name="left")]
        public double? Left { get; set; }

        /// <summary>
        /// Gets or Sets ExtractAnchor
        /// </summary>

        [DataMember(Name="extractAnchor")]
        public ExtractAnchor ExtractAnchor { get; set; }

        /// <summary>
        /// Extract
        /// </summary>
        /// <value>Extract</value>
        [Required]

        [DataMember(Name="extract")]
        public bool? Extract { get; set; }

        /// <summary>
        /// Subtype
        /// </summary>
        /// <value>Subtype</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SubtypeEnum
        {
            /// <summary>
            /// Enum FULLNAMEEnum for FULLNAME
            /// </summary>
            [EnumMember(Value = "FULLNAME")]
            FULLNAMEEnum = 0,
            /// <summary>
            /// Enum INITIALSEnum for INITIALS
            /// </summary>
            [EnumMember(Value = "INITIALS")]
            INITIALSEnum = 1,
            /// <summary>
            /// Enum CAPTUREEnum for CAPTURE
            /// </summary>
            [EnumMember(Value = "CAPTURE")]
            CAPTUREEnum = 2,
            /// <summary>
            /// Enum LABELEnum for LABEL
            /// </summary>
            [EnumMember(Value = "LABEL")]
            LABELEnum = 3,
            /// <summary>
            /// Enum TEXTFIELDEnum for TEXTFIELD
            /// </summary>
            [EnumMember(Value = "TEXTFIELD")]
            TEXTFIELDEnum = 4,
            /// <summary>
            /// Enum TEXTAREAEnum for TEXTAREA
            /// </summary>
            [EnumMember(Value = "TEXTAREA")]
            TEXTAREAEnum = 5,
            /// <summary>
            /// Enum CHECKBOXEnum for CHECKBOX
            /// </summary>
            [EnumMember(Value = "CHECKBOX")]
            CHECKBOXEnum = 6,
            /// <summary>
            /// Enum DATEEnum for DATE
            /// </summary>
            [EnumMember(Value = "DATE")]
            DATEEnum = 7,
            /// <summary>
            /// Enum RADIOEnum for RADIO
            /// </summary>
            [EnumMember(Value = "RADIO")]
            RADIOEnum = 8,
            /// <summary>
            /// Enum LISTEnum for LIST
            /// </summary>
            [EnumMember(Value = "LIST")]
            LISTEnum = 9,
            /// <summary>
            /// Enum QRCODEEnum for QRCODE
            /// </summary>
            [EnumMember(Value = "QRCODE")]
            QRCODEEnum = 10,
            /// <summary>
            /// Enum CUSTOMFIELDEnum for CUSTOMFIELD
            /// </summary>
            [EnumMember(Value = "CUSTOMFIELD")]
            CUSTOMFIELDEnum = 11,
            /// <summary>
            /// Enum SEALEnum for SEAL
            /// </summary>
            [EnumMember(Value = "SEAL")]
            SEALEnum = 12,
            /// <summary>
            /// Enum MOBILECAPTUREEnum for MOBILE_CAPTURE
            /// </summary>
            [EnumMember(Value = "MOBILE_CAPTURE")]
            MOBILECAPTUREEnum = 13,
            /// <summary>
            /// Enum RAWCAPTUREEnum for RAW_CAPTURE
            /// </summary>
            [EnumMember(Value = "RAW_CAPTURE")]
            RAWCAPTUREEnum = 14,
            /// <summary>
            /// Enum DATEPICKEREnum for DATEPICKER
            /// </summary>
            [EnumMember(Value = "DATEPICKER")]
            DATEPICKEREnum = 15        }

        /// <summary>
        /// Subtype
        /// </summary>
        /// <value>Subtype</value>
        [Required]

        [DataMember(Name="subtype")]
        public SubtypeEnum? Subtype { get; set; }

        /// <summary>
        /// Width
        /// </summary>
        /// <value>Width</value>

        [DataMember(Name="width")]
        public double? Width { get; set; }

        /// <summary>
        /// Top
        /// </summary>
        /// <value>Top</value>

        [DataMember(Name="top")]
        public double? Top { get; set; }

        /// <summary>
        /// Height
        /// </summary>
        /// <value>Height</value>

        [DataMember(Name="height")]
        public double? Height { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Field {\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Validation: ").Append(Validation).Append("\n");
            sb.Append("  Binding: ").Append(Binding).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("  ExtractAnchor: ").Append(ExtractAnchor).Append("\n");
            sb.Append("  Extract: ").Append(Extract).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Top: ").Append(Top).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Field)obj);
        }

        /// <summary>
        /// Returns true if Field instances are equal
        /// </summary>
        /// <param name="other">Instance of Field to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Field other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Validation == other.Validation ||
                    Validation != null &&
                    Validation.Equals(other.Validation)
                ) && 
                (
                    Binding == other.Binding ||
                    Binding != null &&
                    Binding.Equals(other.Binding)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Data == other.Data ||
                    Data != null &&
                    Data.SequenceEqual(other.Data)
                ) && 
                (
                    Page == other.Page ||
                    Page != null &&
                    Page.Equals(other.Page)
                ) && 
                (
                    Left == other.Left ||
                    Left != null &&
                    Left.Equals(other.Left)
                ) && 
                (
                    ExtractAnchor == other.ExtractAnchor ||
                    ExtractAnchor != null &&
                    ExtractAnchor.Equals(other.ExtractAnchor)
                ) && 
                (
                    Extract == other.Extract ||
                    Extract != null &&
                    Extract.Equals(other.Extract)
                ) && 
                (
                    Subtype == other.Subtype ||
                    Subtype != null &&
                    Subtype.Equals(other.Subtype)
                ) && 
                (
                    Width == other.Width ||
                    Width != null &&
                    Width.Equals(other.Width)
                ) && 
                (
                    Top == other.Top ||
                    Top != null &&
                    Top.Equals(other.Top)
                ) && 
                (
                    Height == other.Height ||
                    Height != null &&
                    Height.Equals(other.Height)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Validation != null)
                    hashCode = hashCode * 59 + Validation.GetHashCode();
                    if (Binding != null)
                    hashCode = hashCode * 59 + Binding.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                    if (Page != null)
                    hashCode = hashCode * 59 + Page.GetHashCode();
                    if (Left != null)
                    hashCode = hashCode * 59 + Left.GetHashCode();
                    if (ExtractAnchor != null)
                    hashCode = hashCode * 59 + ExtractAnchor.GetHashCode();
                    if (Extract != null)
                    hashCode = hashCode * 59 + Extract.GetHashCode();
                    if (Subtype != null)
                    hashCode = hashCode * 59 + Subtype.GetHashCode();
                    if (Width != null)
                    hashCode = hashCode * 59 + Width.GetHashCode();
                    if (Top != null)
                    hashCode = hashCode * 59 + Top.GetHashCode();
                    if (Height != null)
                    hashCode = hashCode * 59 + Height.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Field left, Field right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Field left, Field right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
