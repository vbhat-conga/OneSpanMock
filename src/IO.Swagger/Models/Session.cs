/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Session : IEquatable<Session>
    { 
        /// <summary>
        /// Gets or Sets Restricted
        /// </summary>

        [DataMember(Name="restricted")]
        public bool? Restricted { get; set; }

        /// <summary>
        /// Packages
        /// </summary>
        /// <value>Packages</value>
        [Required]

        [DataMember(Name="packages")]
        public List<string> Packages { get; set; }

        /// <summary>
        /// Gets or Sets Features
        /// </summary>

        [DataMember(Name="features")]
        public Features Features { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [Required]

        [DataMember(Name="user")]
        public User User { get; set; }

        /// <summary>
        /// Gets or Sets Support
        /// </summary>

        [DataMember(Name="support")]
        public SupportConfiguration Support { get; set; }

        /// <summary>
        /// Gets or Sets DelegationUser
        /// </summary>
        [Required]

        [DataMember(Name="delegationUser")]
        public DelegationUser DelegationUser { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>

        [DataMember(Name="account")]
        public Account Account { get; set; }

        /// <summary>
        /// InPerson
        /// </summary>
        /// <value>InPerson</value>
        [Required]

        [DataMember(Name="inPerson")]
        public bool? InPerson { get; set; }

        /// <summary>
        /// loginSessionTimeout
        /// </summary>
        /// <value>loginSessionTimeout</value>

        [DataMember(Name="loginSessionTimeout")]
        public int? LoginSessionTimeout { get; set; }

        /// <summary>
        /// CertificateSigning
        /// </summary>
        /// <value>CertificateSigning</value>
        [Required]

        [DataMember(Name="certificateSigning")]
        public bool? CertificateSigning { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Session {\n");
            sb.Append("  Restricted: ").Append(Restricted).Append("\n");
            sb.Append("  Packages: ").Append(Packages).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Support: ").Append(Support).Append("\n");
            sb.Append("  DelegationUser: ").Append(DelegationUser).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  InPerson: ").Append(InPerson).Append("\n");
            sb.Append("  LoginSessionTimeout: ").Append(LoginSessionTimeout).Append("\n");
            sb.Append("  CertificateSigning: ").Append(CertificateSigning).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Session)obj);
        }

        /// <summary>
        /// Returns true if Session instances are equal
        /// </summary>
        /// <param name="other">Instance of Session to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Session other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Restricted == other.Restricted ||
                    Restricted != null &&
                    Restricted.Equals(other.Restricted)
                ) && 
                (
                    Packages == other.Packages ||
                    Packages != null &&
                    Packages.SequenceEqual(other.Packages)
                ) && 
                (
                    Features == other.Features ||
                    Features != null &&
                    Features.Equals(other.Features)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                ) && 
                (
                    Support == other.Support ||
                    Support != null &&
                    Support.Equals(other.Support)
                ) && 
                (
                    DelegationUser == other.DelegationUser ||
                    DelegationUser != null &&
                    DelegationUser.Equals(other.DelegationUser)
                ) && 
                (
                    Account == other.Account ||
                    Account != null &&
                    Account.Equals(other.Account)
                ) && 
                (
                    InPerson == other.InPerson ||
                    InPerson != null &&
                    InPerson.Equals(other.InPerson)
                ) && 
                (
                    LoginSessionTimeout == other.LoginSessionTimeout ||
                    LoginSessionTimeout != null &&
                    LoginSessionTimeout.Equals(other.LoginSessionTimeout)
                ) && 
                (
                    CertificateSigning == other.CertificateSigning ||
                    CertificateSigning != null &&
                    CertificateSigning.Equals(other.CertificateSigning)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Restricted != null)
                    hashCode = hashCode * 59 + Restricted.GetHashCode();
                    if (Packages != null)
                    hashCode = hashCode * 59 + Packages.GetHashCode();
                    if (Features != null)
                    hashCode = hashCode * 59 + Features.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                    if (Support != null)
                    hashCode = hashCode * 59 + Support.GetHashCode();
                    if (DelegationUser != null)
                    hashCode = hashCode * 59 + DelegationUser.GetHashCode();
                    if (Account != null)
                    hashCode = hashCode * 59 + Account.GetHashCode();
                    if (InPerson != null)
                    hashCode = hashCode * 59 + InPerson.GetHashCode();
                    if (LoginSessionTimeout != null)
                    hashCode = hashCode * 59 + LoginSessionTimeout.GetHashCode();
                    if (CertificateSigning != null)
                    hashCode = hashCode * 59 + CertificateSigning.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Session left, Session right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Session left, Session right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
