/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SignerInformationForEquifaxCanada : IEquatable<SignerInformationForEquifaxCanada>
    { 
        /// <summary>
        /// StreetAddress
        /// </summary>
        /// <value>StreetAddress</value>
        [Required]

        [DataMember(Name="streetAddress")]
        public string StreetAddress { get; set; }

        /// <summary>
        /// City
        /// </summary>
        /// <value>City</value>
        [Required]

        [DataMember(Name="city")]
        public string City { get; set; }

        /// <summary>
        /// TimeAtAddress
        /// </summary>
        /// <value>TimeAtAddress</value>

        [DataMember(Name="timeAtAddress")]
        public int? TimeAtAddress { get; set; }

        /// <summary>
        /// HomePhoneNumber
        /// </summary>
        /// <value>HomePhoneNumber</value>

        [DataMember(Name="homePhoneNumber")]
        public string HomePhoneNumber { get; set; }

        /// <summary>
        /// DriversLicenseNumber
        /// </summary>
        /// <value>DriversLicenseNumber</value>

        [DataMember(Name="driversLicenseNumber")]
        public string DriversLicenseNumber { get; set; }

        /// <summary>
        /// DateOfBirth
        /// </summary>
        /// <value>DateOfBirth</value>

        [DataMember(Name="dateOfBirth")]
        public DateTime? DateOfBirth { get; set; }

        /// <summary>
        /// Province
        /// </summary>
        /// <value>Province</value>
        [Required]

        [DataMember(Name="province")]
        public string Province { get; set; }

        /// <summary>
        /// PostalCode
        /// </summary>
        /// <value>PostalCode</value>
        [Required]

        [DataMember(Name="postalCode")]
        public string PostalCode { get; set; }

        /// <summary>
        /// SocialInsuranceNumber
        /// </summary>
        /// <value>SocialInsuranceNumber</value>

        [DataMember(Name="socialInsuranceNumber")]
        public string SocialInsuranceNumber { get; set; }

        /// <summary>
        /// FirstName
        /// </summary>
        /// <value>FirstName</value>
        [Required]

        [DataMember(Name="firstName")]
        public string FirstName { get; set; }

        /// <summary>
        /// LastName
        /// </summary>
        /// <value>LastName</value>
        [Required]

        [DataMember(Name="lastName")]
        public string LastName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignerInformationForEquifaxCanada {\n");
            sb.Append("  StreetAddress: ").Append(StreetAddress).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  TimeAtAddress: ").Append(TimeAtAddress).Append("\n");
            sb.Append("  HomePhoneNumber: ").Append(HomePhoneNumber).Append("\n");
            sb.Append("  DriversLicenseNumber: ").Append(DriversLicenseNumber).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  Province: ").Append(Province).Append("\n");
            sb.Append("  PostalCode: ").Append(PostalCode).Append("\n");
            sb.Append("  SocialInsuranceNumber: ").Append(SocialInsuranceNumber).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SignerInformationForEquifaxCanada)obj);
        }

        /// <summary>
        /// Returns true if SignerInformationForEquifaxCanada instances are equal
        /// </summary>
        /// <param name="other">Instance of SignerInformationForEquifaxCanada to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignerInformationForEquifaxCanada other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    StreetAddress == other.StreetAddress ||
                    StreetAddress != null &&
                    StreetAddress.Equals(other.StreetAddress)
                ) && 
                (
                    City == other.City ||
                    City != null &&
                    City.Equals(other.City)
                ) && 
                (
                    TimeAtAddress == other.TimeAtAddress ||
                    TimeAtAddress != null &&
                    TimeAtAddress.Equals(other.TimeAtAddress)
                ) && 
                (
                    HomePhoneNumber == other.HomePhoneNumber ||
                    HomePhoneNumber != null &&
                    HomePhoneNumber.Equals(other.HomePhoneNumber)
                ) && 
                (
                    DriversLicenseNumber == other.DriversLicenseNumber ||
                    DriversLicenseNumber != null &&
                    DriversLicenseNumber.Equals(other.DriversLicenseNumber)
                ) && 
                (
                    DateOfBirth == other.DateOfBirth ||
                    DateOfBirth != null &&
                    DateOfBirth.Equals(other.DateOfBirth)
                ) && 
                (
                    Province == other.Province ||
                    Province != null &&
                    Province.Equals(other.Province)
                ) && 
                (
                    PostalCode == other.PostalCode ||
                    PostalCode != null &&
                    PostalCode.Equals(other.PostalCode)
                ) && 
                (
                    SocialInsuranceNumber == other.SocialInsuranceNumber ||
                    SocialInsuranceNumber != null &&
                    SocialInsuranceNumber.Equals(other.SocialInsuranceNumber)
                ) && 
                (
                    FirstName == other.FirstName ||
                    FirstName != null &&
                    FirstName.Equals(other.FirstName)
                ) && 
                (
                    LastName == other.LastName ||
                    LastName != null &&
                    LastName.Equals(other.LastName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (StreetAddress != null)
                    hashCode = hashCode * 59 + StreetAddress.GetHashCode();
                    if (City != null)
                    hashCode = hashCode * 59 + City.GetHashCode();
                    if (TimeAtAddress != null)
                    hashCode = hashCode * 59 + TimeAtAddress.GetHashCode();
                    if (HomePhoneNumber != null)
                    hashCode = hashCode * 59 + HomePhoneNumber.GetHashCode();
                    if (DriversLicenseNumber != null)
                    hashCode = hashCode * 59 + DriversLicenseNumber.GetHashCode();
                    if (DateOfBirth != null)
                    hashCode = hashCode * 59 + DateOfBirth.GetHashCode();
                    if (Province != null)
                    hashCode = hashCode * 59 + Province.GetHashCode();
                    if (PostalCode != null)
                    hashCode = hashCode * 59 + PostalCode.GetHashCode();
                    if (SocialInsuranceNumber != null)
                    hashCode = hashCode * 59 + SocialInsuranceNumber.GetHashCode();
                    if (FirstName != null)
                    hashCode = hashCode * 59 + FirstName.GetHashCode();
                    if (LastName != null)
                    hashCode = hashCode * 59 + LastName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SignerInformationForEquifaxCanada left, SignerInformationForEquifaxCanada right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SignerInformationForEquifaxCanada left, SignerInformationForEquifaxCanada right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
