/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AttachmentAttachmentIdBody : IEquatable<AttachmentAttachmentIdBody>
    { 
        /// <summary>
        /// The file to upload.
        /// </summary>
        /// <value>The file to upload.</value>
        [Required]

        [DataMember(Name="file")]
        public byte[] File { get; set; }

        /// <summary>
        /// The name of the attachment.
        /// </summary>
        /// <value>The name of the attachment.</value>

        [DataMember(Name="fileName")]
        public string FileName { get; set; }

        /// <summary>
        /// Optional id.
        /// </summary>
        /// <value>Optional id.</value>

        [DataMember(Name="attachmentUid")]
        public string AttachmentUid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AttachmentAttachmentIdBody {\n");
            sb.Append("  File: ").Append(File).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  AttachmentUid: ").Append(AttachmentUid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AttachmentAttachmentIdBody)obj);
        }

        /// <summary>
        /// Returns true if AttachmentAttachmentIdBody instances are equal
        /// </summary>
        /// <param name="other">Instance of AttachmentAttachmentIdBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttachmentAttachmentIdBody other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    File == other.File ||
                    File != null &&
                    File.Equals(other.File)
                ) && 
                (
                    FileName == other.FileName ||
                    FileName != null &&
                    FileName.Equals(other.FileName)
                ) && 
                (
                    AttachmentUid == other.AttachmentUid ||
                    AttachmentUid != null &&
                    AttachmentUid.Equals(other.AttachmentUid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (File != null)
                    hashCode = hashCode * 59 + File.GetHashCode();
                    if (FileName != null)
                    hashCode = hashCode * 59 + FileName.GetHashCode();
                    if (AttachmentUid != null)
                    hashCode = hashCode * 59 + AttachmentUid.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AttachmentAttachmentIdBody left, AttachmentAttachmentIdBody right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AttachmentAttachmentIdBody left, AttachmentAttachmentIdBody right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
