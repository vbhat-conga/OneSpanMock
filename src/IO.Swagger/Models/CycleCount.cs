/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CycleCount : IEquatable<CycleCount>
    { 
        /// <summary>
        /// Cycle
        /// </summary>
        /// <value>Cycle</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CycleEnum
        {
            /// <summary>
            /// Enum DAYEnum for DAY
            /// </summary>
            [EnumMember(Value = "DAY")]
            DAYEnum = 0,
            /// <summary>
            /// Enum MONTHEnum for MONTH
            /// </summary>
            [EnumMember(Value = "MONTH")]
            MONTHEnum = 1,
            /// <summary>
            /// Enum YEAREnum for YEAR
            /// </summary>
            [EnumMember(Value = "YEAR")]
            YEAREnum = 2        }

        /// <summary>
        /// Cycle
        /// </summary>
        /// <value>Cycle</value>
        [Required]

        [DataMember(Name="cycle")]
        public CycleEnum? Cycle { get; set; }

        /// <summary>
        /// Count
        /// </summary>
        /// <value>Count</value>
        [Required]

        [DataMember(Name="count")]
        public int? Count { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CycleCount {\n");
            sb.Append("  Cycle: ").Append(Cycle).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CycleCount)obj);
        }

        /// <summary>
        /// Returns true if CycleCount instances are equal
        /// </summary>
        /// <param name="other">Instance of CycleCount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CycleCount other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Cycle == other.Cycle ||
                    Cycle != null &&
                    Cycle.Equals(other.Cycle)
                ) && 
                (
                    Count == other.Count ||
                    Count != null &&
                    Count.Equals(other.Count)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Cycle != null)
                    hashCode = hashCode * 59 + Cycle.GetHashCode();
                    if (Count != null)
                    hashCode = hashCode * 59 + Count.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CycleCount left, CycleCount right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CycleCount left, CycleCount right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
