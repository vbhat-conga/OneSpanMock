/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Group : IEquatable<Group>
    { 
        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [Required]

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Members
        /// </summary>
        /// <value>Members</value>
        [Required]

        [DataMember(Name="members")]
        public List<GroupMember> Members { get; set; }

        /// <summary>
        /// Gets or Sets Account
        /// </summary>

        [DataMember(Name="account")]
        public Account Account { get; set; }

        /// <summary>
        /// Created
        /// </summary>
        /// <value>Created</value>
        [Required]

        [DataMember(Name="created")]
        public DateTime? Created { get; set; }

        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [Required]

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Data
        /// </summary>
        /// <value>Data</value>

        [DataMember(Name="data")]
        public Dictionary<string, Object> Data { get; set; }

        /// <summary>
        /// Updated
        /// </summary>
        /// <value>Updated</value>
        [Required]

        [DataMember(Name="updated")]
        public DateTime? Updated { get; set; }

        /// <summary>
        /// Email
        /// </summary>
        /// <value>Email</value>

        [DataMember(Name="email")]
        public string Email { get; set; }

        /// <summary>
        /// EmailMembers
        /// </summary>
        /// <value>EmailMembers</value>
        [Required]

        [DataMember(Name="emailMembers")]
        public bool? EmailMembers { get; set; }

        /// <summary>
        /// Reciprocal Delegation
        /// </summary>
        /// <value>Reciprocal Delegation</value>
        [Required]

        [DataMember(Name="reciprocalDelegation")]
        public bool? ReciprocalDelegation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Group {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  Account: ").Append(Account).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EmailMembers: ").Append(EmailMembers).Append("\n");
            sb.Append("  ReciprocalDelegation: ").Append(ReciprocalDelegation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Group)obj);
        }

        /// <summary>
        /// Returns true if Group instances are equal
        /// </summary>
        /// <param name="other">Instance of Group to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Group other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Members == other.Members ||
                    Members != null &&
                    Members.SequenceEqual(other.Members)
                ) && 
                (
                    Account == other.Account ||
                    Account != null &&
                    Account.Equals(other.Account)
                ) && 
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Data == other.Data ||
                    Data != null &&
                    Data.SequenceEqual(other.Data)
                ) && 
                (
                    Updated == other.Updated ||
                    Updated != null &&
                    Updated.Equals(other.Updated)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    EmailMembers == other.EmailMembers ||
                    EmailMembers != null &&
                    EmailMembers.Equals(other.EmailMembers)
                ) && 
                (
                    ReciprocalDelegation == other.ReciprocalDelegation ||
                    ReciprocalDelegation != null &&
                    ReciprocalDelegation.Equals(other.ReciprocalDelegation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Members != null)
                    hashCode = hashCode * 59 + Members.GetHashCode();
                    if (Account != null)
                    hashCode = hashCode * 59 + Account.GetHashCode();
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                    if (Updated != null)
                    hashCode = hashCode * 59 + Updated.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (EmailMembers != null)
                    hashCode = hashCode * 59 + EmailMembers.GetHashCode();
                    if (ReciprocalDelegation != null)
                    hashCode = hashCode * 59 + ReciprocalDelegation.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Group left, Group right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Group left, Group right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
