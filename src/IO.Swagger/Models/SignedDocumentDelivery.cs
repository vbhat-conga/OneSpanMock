/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SignedDocumentDelivery : IEquatable<SignedDocumentDelivery>
    { 
        /// <summary>
        /// FilePrefix
        /// </summary>
        /// <value>FilePrefix</value>

        [DataMember(Name="filePrefix")]
        public string FilePrefix { get; set; }

        /// <summary>
        /// Destinations
        /// </summary>
        /// <value>Destinations</value>
        [Required]

        [DataMember(Name="destinations")]
        public List<External> Destinations { get; set; }

        /// <summary>
        /// ExcludedDocuments
        /// </summary>
        /// <value>ExcludedDocuments</value>
        [Required]

        [DataMember(Name="excludedDocuments")]
        public List<Document> ExcludedDocuments { get; set; }

        /// <summary>
        /// FileSuffix
        /// </summary>
        /// <value>FileSuffix</value>

        [DataMember(Name="fileSuffix")]
        public string FileSuffix { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SignedDocumentDelivery {\n");
            sb.Append("  FilePrefix: ").Append(FilePrefix).Append("\n");
            sb.Append("  Destinations: ").Append(Destinations).Append("\n");
            sb.Append("  ExcludedDocuments: ").Append(ExcludedDocuments).Append("\n");
            sb.Append("  FileSuffix: ").Append(FileSuffix).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SignedDocumentDelivery)obj);
        }

        /// <summary>
        /// Returns true if SignedDocumentDelivery instances are equal
        /// </summary>
        /// <param name="other">Instance of SignedDocumentDelivery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SignedDocumentDelivery other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FilePrefix == other.FilePrefix ||
                    FilePrefix != null &&
                    FilePrefix.Equals(other.FilePrefix)
                ) && 
                (
                    Destinations == other.Destinations ||
                    Destinations != null &&
                    Destinations.SequenceEqual(other.Destinations)
                ) && 
                (
                    ExcludedDocuments == other.ExcludedDocuments ||
                    ExcludedDocuments != null &&
                    ExcludedDocuments.SequenceEqual(other.ExcludedDocuments)
                ) && 
                (
                    FileSuffix == other.FileSuffix ||
                    FileSuffix != null &&
                    FileSuffix.Equals(other.FileSuffix)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FilePrefix != null)
                    hashCode = hashCode * 59 + FilePrefix.GetHashCode();
                    if (Destinations != null)
                    hashCode = hashCode * 59 + Destinations.GetHashCode();
                    if (ExcludedDocuments != null)
                    hashCode = hashCode * 59 + ExcludedDocuments.GetHashCode();
                    if (FileSuffix != null)
                    hashCode = hashCode * 59 + FileSuffix.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SignedDocumentDelivery left, SignedDocumentDelivery right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SignedDocumentDelivery left, SignedDocumentDelivery right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
