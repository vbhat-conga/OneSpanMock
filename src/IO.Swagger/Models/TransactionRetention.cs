/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// Transaction retention settings
    /// </summary>
    [DataContract]
    public partial class TransactionRetention : IEquatable<TransactionRetention>
    { 
        /// <summary>
        /// Number of days to keep drafts for
        /// </summary>
        /// <value>Number of days to keep drafts for</value>
        [Required]

        [DataMember(Name="draft")]
        public int? Draft { get; set; }

        /// <summary>
        /// Number of days to keep sent transactions for
        /// </summary>
        /// <value>Number of days to keep sent transactions for</value>
        [Required]

        [DataMember(Name="sent")]
        public int? Sent { get; set; }

        /// <summary>
        /// Number of days to keep completed transactions for
        /// </summary>
        /// <value>Number of days to keep completed transactions for</value>
        [Required]

        [DataMember(Name="completed")]
        public int? Completed { get; set; }

        /// <summary>
        /// Number of days to keep archived transactions for
        /// </summary>
        /// <value>Number of days to keep archived transactions for</value>
        [Required]

        [DataMember(Name="archived")]
        public int? Archived { get; set; }

        /// <summary>
        /// Number of days to keep declined transactions for
        /// </summary>
        /// <value>Number of days to keep declined transactions for</value>
        [Required]

        [DataMember(Name="declined")]
        public int? Declined { get; set; }

        /// <summary>
        /// Number of days to keep opted-out transactions for
        /// </summary>
        /// <value>Number of days to keep opted-out transactions for</value>
        [Required]

        [DataMember(Name="optedOut")]
        public int? OptedOut { get; set; }

        /// <summary>
        /// Number of days to keep expired transactions for
        /// </summary>
        /// <value>Number of days to keep expired transactions for</value>
        [Required]

        [DataMember(Name="expired")]
        public int? Expired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TransactionRetention {\n");
            sb.Append("  Draft: ").Append(Draft).Append("\n");
            sb.Append("  Sent: ").Append(Sent).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  Declined: ").Append(Declined).Append("\n");
            sb.Append("  OptedOut: ").Append(OptedOut).Append("\n");
            sb.Append("  Expired: ").Append(Expired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TransactionRetention)obj);
        }

        /// <summary>
        /// Returns true if TransactionRetention instances are equal
        /// </summary>
        /// <param name="other">Instance of TransactionRetention to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionRetention other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Draft == other.Draft ||
                    Draft != null &&
                    Draft.Equals(other.Draft)
                ) && 
                (
                    Sent == other.Sent ||
                    Sent != null &&
                    Sent.Equals(other.Sent)
                ) && 
                (
                    Completed == other.Completed ||
                    Completed != null &&
                    Completed.Equals(other.Completed)
                ) && 
                (
                    Archived == other.Archived ||
                    Archived != null &&
                    Archived.Equals(other.Archived)
                ) && 
                (
                    Declined == other.Declined ||
                    Declined != null &&
                    Declined.Equals(other.Declined)
                ) && 
                (
                    OptedOut == other.OptedOut ||
                    OptedOut != null &&
                    OptedOut.Equals(other.OptedOut)
                ) && 
                (
                    Expired == other.Expired ||
                    Expired != null &&
                    Expired.Equals(other.Expired)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Draft != null)
                    hashCode = hashCode * 59 + Draft.GetHashCode();
                    if (Sent != null)
                    hashCode = hashCode * 59 + Sent.GetHashCode();
                    if (Completed != null)
                    hashCode = hashCode * 59 + Completed.GetHashCode();
                    if (Archived != null)
                    hashCode = hashCode * 59 + Archived.GetHashCode();
                    if (Declined != null)
                    hashCode = hashCode * 59 + Declined.GetHashCode();
                    if (OptedOut != null)
                    hashCode = hashCode * 59 + OptedOut.GetHashCode();
                    if (Expired != null)
                    hashCode = hashCode * 59 + Expired.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TransactionRetention left, TransactionRetention right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TransactionRetention left, TransactionRetention right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
