/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AccountFeatureSettings : IEquatable<AccountFeatureSettings>
    { 
        /// <summary>
        /// Groups
        /// </summary>
        /// <value>Groups</value>
        [Required]

        [DataMember(Name="groups")]
        public bool? Groups { get; set; }

        /// <summary>
        /// Attachments
        /// </summary>
        /// <value>Attachments</value>
        [Required]

        [DataMember(Name="attachments")]
        public bool? Attachments { get; set; }

        /// <summary>
        /// FlattenSignerDocuments
        /// </summary>
        /// <value>FlattenSignerDocuments</value>
        [Required]

        [DataMember(Name="flattenSignerDocuments")]
        public bool? FlattenSignerDocuments { get; set; }

        /// <summary>
        /// Delegation
        /// </summary>
        /// <value>Delegation</value>
        [Required]

        [DataMember(Name="delegation")]
        public bool? Delegation { get; set; }

        /// <summary>
        /// DocumentVisibility
        /// </summary>
        /// <value>DocumentVisibility</value>
        [Required]

        [DataMember(Name="documentVisibility")]
        public bool? DocumentVisibility { get; set; }

        /// <summary>
        /// CustomFields
        /// </summary>
        /// <value>CustomFields</value>
        [Required]

        [DataMember(Name="customFields")]
        public bool? CustomFields { get; set; }

        /// <summary>
        /// SendToMobile
        /// </summary>
        /// <value>SendToMobile</value>
        [Required]

        [DataMember(Name="sendToMobile")]
        public bool? SendToMobile { get; set; }

        /// <summary>
        /// OptionalSignature
        /// </summary>
        /// <value>OptionalSignature</value>
        [Required]

        [DataMember(Name="optionalSignature")]
        public bool? OptionalSignature { get; set; }

        /// <summary>
        /// EvidenceSummary
        /// </summary>
        /// <value>EvidenceSummary</value>
        [Required]

        [DataMember(Name="evidenceSummary")]
        public bool? EvidenceSummary { get; set; }

        /// <summary>
        /// ForceLogin
        /// </summary>
        /// <value>ForceLogin</value>
        [Required]

        [DataMember(Name="forceLogin")]
        public bool? ForceLogin { get; set; }

        /// <summary>
        /// qnaAuth
        /// </summary>
        /// <value>qnaAuth</value>
        [Required]

        [DataMember(Name="qnaAuth")]
        public bool? QnaAuth { get; set; }

        /// <summary>
        /// enforceAuth
        /// </summary>
        /// <value>enforceAuth</value>
        [Required]

        [DataMember(Name="enforceAuth")]
        public bool? EnforceAuth { get; set; }

        /// <summary>
        /// MobileCapture
        /// </summary>
        /// <value>MobileCapture</value>
        [Required]

        [DataMember(Name="mobileCapture")]
        public bool? MobileCapture { get; set; }

        /// <summary>
        /// MaskResponse
        /// </summary>
        /// <value>MaskResponse</value>
        [Required]

        [DataMember(Name="maskResponse")]
        public bool? MaskResponse { get; set; }

        /// <summary>
        /// AllowInPersonForAccountSenders
        /// </summary>
        /// <value>AllowInPersonForAccountSenders</value>
        [Required]

        [DataMember(Name="allowInPersonForAccountSenders")]
        public bool? AllowInPersonForAccountSenders { get; set; }

        /// <summary>
        /// DisableInPersonActivationEmail
        /// </summary>
        /// <value>DisableInPersonActivationEmail</value>
        [Required]

        [DataMember(Name="disableInPersonActivationEmail")]
        public bool? DisableInPersonActivationEmail { get; set; }

        /// <summary>
        /// EmailDocumentsAndEvidenceSummary
        /// </summary>
        /// <value>EmailDocumentsAndEvidenceSummary</value>
        [Required]

        [DataMember(Name="emailDocumentsAndEvidenceSummary")]
        public bool? EmailDocumentsAndEvidenceSummary { get; set; }

        /// <summary>
        /// DisableFooter
        /// </summary>
        /// <value>DisableFooter</value>
        [Required]

        [DataMember(Name="disableFooter")]
        public bool? DisableFooter { get; set; }

        /// <summary>
        /// PreventConsentRemoval
        /// </summary>
        /// <value>PreventConsentRemoval</value>
        [Required]

        [DataMember(Name="preventConsentRemoval")]
        public bool? PreventConsentRemoval { get; set; }

        /// <summary>
        /// ConditionalFields
        /// </summary>
        /// <value>ConditionalFields</value>
        [Required]

        [DataMember(Name="conditionalFields")]
        public bool? ConditionalFields { get; set; }

        /// <summary>
        /// UploadSignatureImage
        /// </summary>
        /// <value>UploadSignatureImage</value>
        [Required]

        [DataMember(Name="uploadSignatureImage")]
        public bool? UploadSignatureImage { get; set; }

        /// <summary>
        /// InAppReports
        /// </summary>
        /// <value>InAppReports</value>
        [Required]

        [DataMember(Name="inAppReports")]
        public bool? InAppReports { get; set; }

        /// <summary>
        /// ForceTransactionOwnerLogin
        /// </summary>
        /// <value>ForceTransactionOwnerLogin</value>
        [Required]

        [DataMember(Name="forceTransactionOwnerLogin")]
        public bool? ForceTransactionOwnerLogin { get; set; }

        /// <summary>
        /// DeliverDocumentsByEmail
        /// </summary>
        /// <value>DeliverDocumentsByEmail</value>
        [Required]

        [DataMember(Name="deliverDocumentsByEmail")]
        public bool? DeliverDocumentsByEmail { get; set; }

        /// <summary>
        /// AllowCheckboxConsentApproval
        /// </summary>
        /// <value>AllowCheckboxConsentApproval</value>
        [Required]

        [DataMember(Name="allowCheckboxConsentApproval")]
        public bool? AllowCheckboxConsentApproval { get; set; }

        /// <summary>
        /// PasswordManagement
        /// </summary>
        /// <value>PasswordManagement</value>
        [Required]

        [DataMember(Name="passwordManagement")]
        public bool? PasswordManagement { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountFeatureSettings {\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("  FlattenSignerDocuments: ").Append(FlattenSignerDocuments).Append("\n");
            sb.Append("  Delegation: ").Append(Delegation).Append("\n");
            sb.Append("  DocumentVisibility: ").Append(DocumentVisibility).Append("\n");
            sb.Append("  CustomFields: ").Append(CustomFields).Append("\n");
            sb.Append("  SendToMobile: ").Append(SendToMobile).Append("\n");
            sb.Append("  OptionalSignature: ").Append(OptionalSignature).Append("\n");
            sb.Append("  EvidenceSummary: ").Append(EvidenceSummary).Append("\n");
            sb.Append("  ForceLogin: ").Append(ForceLogin).Append("\n");
            sb.Append("  QnaAuth: ").Append(QnaAuth).Append("\n");
            sb.Append("  EnforceAuth: ").Append(EnforceAuth).Append("\n");
            sb.Append("  MobileCapture: ").Append(MobileCapture).Append("\n");
            sb.Append("  MaskResponse: ").Append(MaskResponse).Append("\n");
            sb.Append("  AllowInPersonForAccountSenders: ").Append(AllowInPersonForAccountSenders).Append("\n");
            sb.Append("  DisableInPersonActivationEmail: ").Append(DisableInPersonActivationEmail).Append("\n");
            sb.Append("  EmailDocumentsAndEvidenceSummary: ").Append(EmailDocumentsAndEvidenceSummary).Append("\n");
            sb.Append("  DisableFooter: ").Append(DisableFooter).Append("\n");
            sb.Append("  PreventConsentRemoval: ").Append(PreventConsentRemoval).Append("\n");
            sb.Append("  ConditionalFields: ").Append(ConditionalFields).Append("\n");
            sb.Append("  UploadSignatureImage: ").Append(UploadSignatureImage).Append("\n");
            sb.Append("  InAppReports: ").Append(InAppReports).Append("\n");
            sb.Append("  ForceTransactionOwnerLogin: ").Append(ForceTransactionOwnerLogin).Append("\n");
            sb.Append("  DeliverDocumentsByEmail: ").Append(DeliverDocumentsByEmail).Append("\n");
            sb.Append("  AllowCheckboxConsentApproval: ").Append(AllowCheckboxConsentApproval).Append("\n");
            sb.Append("  PasswordManagement: ").Append(PasswordManagement).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccountFeatureSettings)obj);
        }

        /// <summary>
        /// Returns true if AccountFeatureSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountFeatureSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountFeatureSettings other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Groups == other.Groups ||
                    Groups != null &&
                    Groups.Equals(other.Groups)
                ) && 
                (
                    Attachments == other.Attachments ||
                    Attachments != null &&
                    Attachments.Equals(other.Attachments)
                ) && 
                (
                    FlattenSignerDocuments == other.FlattenSignerDocuments ||
                    FlattenSignerDocuments != null &&
                    FlattenSignerDocuments.Equals(other.FlattenSignerDocuments)
                ) && 
                (
                    Delegation == other.Delegation ||
                    Delegation != null &&
                    Delegation.Equals(other.Delegation)
                ) && 
                (
                    DocumentVisibility == other.DocumentVisibility ||
                    DocumentVisibility != null &&
                    DocumentVisibility.Equals(other.DocumentVisibility)
                ) && 
                (
                    CustomFields == other.CustomFields ||
                    CustomFields != null &&
                    CustomFields.Equals(other.CustomFields)
                ) && 
                (
                    SendToMobile == other.SendToMobile ||
                    SendToMobile != null &&
                    SendToMobile.Equals(other.SendToMobile)
                ) && 
                (
                    OptionalSignature == other.OptionalSignature ||
                    OptionalSignature != null &&
                    OptionalSignature.Equals(other.OptionalSignature)
                ) && 
                (
                    EvidenceSummary == other.EvidenceSummary ||
                    EvidenceSummary != null &&
                    EvidenceSummary.Equals(other.EvidenceSummary)
                ) && 
                (
                    ForceLogin == other.ForceLogin ||
                    ForceLogin != null &&
                    ForceLogin.Equals(other.ForceLogin)
                ) && 
                (
                    QnaAuth == other.QnaAuth ||
                    QnaAuth != null &&
                    QnaAuth.Equals(other.QnaAuth)
                ) && 
                (
                    EnforceAuth == other.EnforceAuth ||
                    EnforceAuth != null &&
                    EnforceAuth.Equals(other.EnforceAuth)
                ) && 
                (
                    MobileCapture == other.MobileCapture ||
                    MobileCapture != null &&
                    MobileCapture.Equals(other.MobileCapture)
                ) && 
                (
                    MaskResponse == other.MaskResponse ||
                    MaskResponse != null &&
                    MaskResponse.Equals(other.MaskResponse)
                ) && 
                (
                    AllowInPersonForAccountSenders == other.AllowInPersonForAccountSenders ||
                    AllowInPersonForAccountSenders != null &&
                    AllowInPersonForAccountSenders.Equals(other.AllowInPersonForAccountSenders)
                ) && 
                (
                    DisableInPersonActivationEmail == other.DisableInPersonActivationEmail ||
                    DisableInPersonActivationEmail != null &&
                    DisableInPersonActivationEmail.Equals(other.DisableInPersonActivationEmail)
                ) && 
                (
                    EmailDocumentsAndEvidenceSummary == other.EmailDocumentsAndEvidenceSummary ||
                    EmailDocumentsAndEvidenceSummary != null &&
                    EmailDocumentsAndEvidenceSummary.Equals(other.EmailDocumentsAndEvidenceSummary)
                ) && 
                (
                    DisableFooter == other.DisableFooter ||
                    DisableFooter != null &&
                    DisableFooter.Equals(other.DisableFooter)
                ) && 
                (
                    PreventConsentRemoval == other.PreventConsentRemoval ||
                    PreventConsentRemoval != null &&
                    PreventConsentRemoval.Equals(other.PreventConsentRemoval)
                ) && 
                (
                    ConditionalFields == other.ConditionalFields ||
                    ConditionalFields != null &&
                    ConditionalFields.Equals(other.ConditionalFields)
                ) && 
                (
                    UploadSignatureImage == other.UploadSignatureImage ||
                    UploadSignatureImage != null &&
                    UploadSignatureImage.Equals(other.UploadSignatureImage)
                ) && 
                (
                    InAppReports == other.InAppReports ||
                    InAppReports != null &&
                    InAppReports.Equals(other.InAppReports)
                ) && 
                (
                    ForceTransactionOwnerLogin == other.ForceTransactionOwnerLogin ||
                    ForceTransactionOwnerLogin != null &&
                    ForceTransactionOwnerLogin.Equals(other.ForceTransactionOwnerLogin)
                ) && 
                (
                    DeliverDocumentsByEmail == other.DeliverDocumentsByEmail ||
                    DeliverDocumentsByEmail != null &&
                    DeliverDocumentsByEmail.Equals(other.DeliverDocumentsByEmail)
                ) && 
                (
                    AllowCheckboxConsentApproval == other.AllowCheckboxConsentApproval ||
                    AllowCheckboxConsentApproval != null &&
                    AllowCheckboxConsentApproval.Equals(other.AllowCheckboxConsentApproval)
                ) && 
                (
                    PasswordManagement == other.PasswordManagement ||
                    PasswordManagement != null &&
                    PasswordManagement.Equals(other.PasswordManagement)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Groups != null)
                    hashCode = hashCode * 59 + Groups.GetHashCode();
                    if (Attachments != null)
                    hashCode = hashCode * 59 + Attachments.GetHashCode();
                    if (FlattenSignerDocuments != null)
                    hashCode = hashCode * 59 + FlattenSignerDocuments.GetHashCode();
                    if (Delegation != null)
                    hashCode = hashCode * 59 + Delegation.GetHashCode();
                    if (DocumentVisibility != null)
                    hashCode = hashCode * 59 + DocumentVisibility.GetHashCode();
                    if (CustomFields != null)
                    hashCode = hashCode * 59 + CustomFields.GetHashCode();
                    if (SendToMobile != null)
                    hashCode = hashCode * 59 + SendToMobile.GetHashCode();
                    if (OptionalSignature != null)
                    hashCode = hashCode * 59 + OptionalSignature.GetHashCode();
                    if (EvidenceSummary != null)
                    hashCode = hashCode * 59 + EvidenceSummary.GetHashCode();
                    if (ForceLogin != null)
                    hashCode = hashCode * 59 + ForceLogin.GetHashCode();
                    if (QnaAuth != null)
                    hashCode = hashCode * 59 + QnaAuth.GetHashCode();
                    if (EnforceAuth != null)
                    hashCode = hashCode * 59 + EnforceAuth.GetHashCode();
                    if (MobileCapture != null)
                    hashCode = hashCode * 59 + MobileCapture.GetHashCode();
                    if (MaskResponse != null)
                    hashCode = hashCode * 59 + MaskResponse.GetHashCode();
                    if (AllowInPersonForAccountSenders != null)
                    hashCode = hashCode * 59 + AllowInPersonForAccountSenders.GetHashCode();
                    if (DisableInPersonActivationEmail != null)
                    hashCode = hashCode * 59 + DisableInPersonActivationEmail.GetHashCode();
                    if (EmailDocumentsAndEvidenceSummary != null)
                    hashCode = hashCode * 59 + EmailDocumentsAndEvidenceSummary.GetHashCode();
                    if (DisableFooter != null)
                    hashCode = hashCode * 59 + DisableFooter.GetHashCode();
                    if (PreventConsentRemoval != null)
                    hashCode = hashCode * 59 + PreventConsentRemoval.GetHashCode();
                    if (ConditionalFields != null)
                    hashCode = hashCode * 59 + ConditionalFields.GetHashCode();
                    if (UploadSignatureImage != null)
                    hashCode = hashCode * 59 + UploadSignatureImage.GetHashCode();
                    if (InAppReports != null)
                    hashCode = hashCode * 59 + InAppReports.GetHashCode();
                    if (ForceTransactionOwnerLogin != null)
                    hashCode = hashCode * 59 + ForceTransactionOwnerLogin.GetHashCode();
                    if (DeliverDocumentsByEmail != null)
                    hashCode = hashCode * 59 + DeliverDocumentsByEmail.GetHashCode();
                    if (AllowCheckboxConsentApproval != null)
                    hashCode = hashCode * 59 + AllowCheckboxConsentApproval.GetHashCode();
                    if (PasswordManagement != null)
                    hashCode = hashCode * 59 + PasswordManagement.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccountFeatureSettings left, AccountFeatureSettings right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccountFeatureSettings left, AccountFeatureSettings right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
