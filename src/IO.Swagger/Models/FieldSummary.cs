/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FieldSummary : IEquatable<FieldSummary>
    { 
        /// <summary>
        /// Signer Id
        /// </summary>
        /// <value>Signer Id</value>
        [Required]

        [DataMember(Name="signerId")]
        public string SignerId { get; set; }

        /// <summary>
        /// Document Id
        /// </summary>
        /// <value>Document Id</value>
        [Required]

        [DataMember(Name="documentId")]
        public string DocumentId { get; set; }

        /// <summary>
        /// Field Id
        /// </summary>
        /// <value>Field Id</value>
        [Required]

        [DataMember(Name="fieldId")]
        public string FieldId { get; set; }

        /// <summary>
        /// Field Name
        /// </summary>
        /// <value>Field Name</value>
        [Required]

        [DataMember(Name="fieldName")]
        public string FieldName { get; set; }

        /// <summary>
        /// Field Value
        /// </summary>
        /// <value>Field Value</value>

        [DataMember(Name="fieldValue")]
        public string FieldValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldSummary {\n");
            sb.Append("  SignerId: ").Append(SignerId).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  FieldId: ").Append(FieldId).Append("\n");
            sb.Append("  FieldName: ").Append(FieldName).Append("\n");
            sb.Append("  FieldValue: ").Append(FieldValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FieldSummary)obj);
        }

        /// <summary>
        /// Returns true if FieldSummary instances are equal
        /// </summary>
        /// <param name="other">Instance of FieldSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldSummary other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SignerId == other.SignerId ||
                    SignerId != null &&
                    SignerId.Equals(other.SignerId)
                ) && 
                (
                    DocumentId == other.DocumentId ||
                    DocumentId != null &&
                    DocumentId.Equals(other.DocumentId)
                ) && 
                (
                    FieldId == other.FieldId ||
                    FieldId != null &&
                    FieldId.Equals(other.FieldId)
                ) && 
                (
                    FieldName == other.FieldName ||
                    FieldName != null &&
                    FieldName.Equals(other.FieldName)
                ) && 
                (
                    FieldValue == other.FieldValue ||
                    FieldValue != null &&
                    FieldValue.Equals(other.FieldValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SignerId != null)
                    hashCode = hashCode * 59 + SignerId.GetHashCode();
                    if (DocumentId != null)
                    hashCode = hashCode * 59 + DocumentId.GetHashCode();
                    if (FieldId != null)
                    hashCode = hashCode * 59 + FieldId.GetHashCode();
                    if (FieldName != null)
                    hashCode = hashCode * 59 + FieldName.GetHashCode();
                    if (FieldValue != null)
                    hashCode = hashCode * 59 + FieldValue.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FieldSummary left, FieldSummary right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FieldSummary left, FieldSummary right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
