/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PackageReminderSchedule : IEquatable<PackageReminderSchedule>
    { 
        /// <summary>
        /// Number of days between reminders
        /// </summary>
        /// <value>Number of days between reminders</value>

        [DataMember(Name="intervalInDays")]
        public int? IntervalInDays { get; set; }

        /// <summary>
        /// Package Id
        /// </summary>
        /// <value>Package Id</value>
        [Required]

        [DataMember(Name="packageId")]
        public string PackageId { get; set; }

        /// <summary>
        /// Reminders
        /// </summary>
        /// <value>Reminders</value>

        [DataMember(Name="reminders")]
        public List<PackageReminder> Reminders { get; private set; }

        /// <summary>
        /// Number of repetition for the reminders
        /// </summary>
        /// <value>Number of repetition for the reminders</value>

        [DataMember(Name="repetitionsCount")]
        public int? RepetitionsCount { get; set; }

        /// <summary>
        /// Delay in days to wait before starting reminders
        /// </summary>
        /// <value>Delay in days to wait before starting reminders</value>

        [DataMember(Name="startInDaysDelay")]
        public int? StartInDaysDelay { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PackageReminderSchedule {\n");
            sb.Append("  IntervalInDays: ").Append(IntervalInDays).Append("\n");
            sb.Append("  PackageId: ").Append(PackageId).Append("\n");
            sb.Append("  Reminders: ").Append(Reminders).Append("\n");
            sb.Append("  RepetitionsCount: ").Append(RepetitionsCount).Append("\n");
            sb.Append("  StartInDaysDelay: ").Append(StartInDaysDelay).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PackageReminderSchedule)obj);
        }

        /// <summary>
        /// Returns true if PackageReminderSchedule instances are equal
        /// </summary>
        /// <param name="other">Instance of PackageReminderSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PackageReminderSchedule other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IntervalInDays == other.IntervalInDays ||
                    IntervalInDays != null &&
                    IntervalInDays.Equals(other.IntervalInDays)
                ) && 
                (
                    PackageId == other.PackageId ||
                    PackageId != null &&
                    PackageId.Equals(other.PackageId)
                ) && 
                (
                    Reminders == other.Reminders ||
                    Reminders != null &&
                    Reminders.SequenceEqual(other.Reminders)
                ) && 
                (
                    RepetitionsCount == other.RepetitionsCount ||
                    RepetitionsCount != null &&
                    RepetitionsCount.Equals(other.RepetitionsCount)
                ) && 
                (
                    StartInDaysDelay == other.StartInDaysDelay ||
                    StartInDaysDelay != null &&
                    StartInDaysDelay.Equals(other.StartInDaysDelay)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IntervalInDays != null)
                    hashCode = hashCode * 59 + IntervalInDays.GetHashCode();
                    if (PackageId != null)
                    hashCode = hashCode * 59 + PackageId.GetHashCode();
                    if (Reminders != null)
                    hashCode = hashCode * 59 + Reminders.GetHashCode();
                    if (RepetitionsCount != null)
                    hashCode = hashCode * 59 + RepetitionsCount.GetHashCode();
                    if (StartInDaysDelay != null)
                    hashCode = hashCode * 59 + StartInDaysDelay.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PackageReminderSchedule left, PackageReminderSchedule right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PackageReminderSchedule left, PackageReminderSchedule right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
