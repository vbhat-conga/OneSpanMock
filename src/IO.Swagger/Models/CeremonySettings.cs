/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CeremonySettings : IEquatable<CeremonySettings>
    { 
        /// <summary>
        /// Gets or Sets Layout
        /// </summary>

        [DataMember(Name="layout")]
        public LayoutOptions Layout { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>

        [DataMember(Name="events")]
        public CeremonyEvents Events { get; set; }

        /// <summary>
        /// Gets or Sets HandOver
        /// </summary>

        [DataMember(Name="handOver")]
        public Link HandOver { get; set; }

        /// <summary>
        /// EnforceCaptureSignature
        /// </summary>
        /// <value>EnforceCaptureSignature</value>
        [Required]

        [DataMember(Name="enforceCaptureSignature")]
        public bool? EnforceCaptureSignature { get; set; }

        /// <summary>
        /// InPerson
        /// </summary>
        /// <value>InPerson</value>
        [Required]

        [DataMember(Name="inPerson")]
        public bool? InPerson { get; set; }

        /// <summary>
        /// DeclineButton
        /// </summary>
        /// <value>DeclineButton</value>
        [Required]

        [DataMember(Name="declineButton")]
        public bool? DeclineButton { get; set; }

        /// <summary>
        /// DeclineReasons
        /// </summary>
        /// <value>DeclineReasons</value>
        [Required]

        [DataMember(Name="declineReasons")]
        public List<string> DeclineReasons { get; set; }

        /// <summary>
        /// DisableDeclineOther
        /// </summary>
        /// <value>DisableDeclineOther</value>
        [Required]

        [DataMember(Name="disableDeclineOther")]
        public bool? DisableDeclineOther { get; set; }

        /// <summary>
        /// DisableDownloadForUncompletedPackage
        /// </summary>
        /// <value>DisableDownloadForUncompletedPackage</value>
        [Required]

        [DataMember(Name="disableDownloadForUncompletedPackage")]
        public bool? DisableDownloadForUncompletedPackage { get; set; }

        /// <summary>
        /// DisableFirstInPersonAffidavit
        /// </summary>
        /// <value>DisableFirstInPersonAffidavit</value>
        [Required]

        [DataMember(Name="disableFirstInPersonAffidavit")]
        public bool? DisableFirstInPersonAffidavit { get; set; }

        /// <summary>
        /// DisableInPersonAffidavit
        /// </summary>
        /// <value>DisableInPersonAffidavit</value>
        [Required]

        [DataMember(Name="disableInPersonAffidavit")]
        public bool? DisableInPersonAffidavit { get; set; }

        /// <summary>
        /// DisableOptOutOther
        /// </summary>
        /// <value>DisableOptOutOther</value>
        [Required]

        [DataMember(Name="disableOptOutOther")]
        public bool? DisableOptOutOther { get; set; }

        /// <summary>
        /// DisableSecondInPersonAffidavit
        /// </summary>
        /// <value>DisableSecondInPersonAffidavit</value>
        [Required]

        [DataMember(Name="disableSecondInPersonAffidavit")]
        public bool? DisableSecondInPersonAffidavit { get; set; }

        /// <summary>
        /// Gets or Sets DocumentToolbarOptions
        /// </summary>

        [DataMember(Name="documentToolbarOptions")]
        public DocumentToolbarOptions DocumentToolbarOptions { get; set; }

        /// <summary>
        /// HideCaptureText
        /// </summary>
        /// <value>HideCaptureText</value>
        [Required]

        [DataMember(Name="hideCaptureText")]
        public bool? HideCaptureText { get; set; }

        /// <summary>
        /// HideLanguageDropdown
        /// </summary>
        /// <value>HideLanguageDropdown</value>
        [Required]

        [DataMember(Name="hideLanguageDropdown")]
        public bool? HideLanguageDropdown { get; set; }

        /// <summary>
        /// HidePackageOwnerInPerson
        /// </summary>
        /// <value>HidePackageOwnerInPerson</value>
        [Required]

        [DataMember(Name="hidePackageOwnerInPerson")]
        public bool? HidePackageOwnerInPerson { get; set; }

        /// <summary>
        /// HideWatermark
        /// </summary>
        /// <value>HideWatermark</value>
        [Required]

        [DataMember(Name="hideWatermark")]
        public bool? HideWatermark { get; set; }

        /// <summary>
        /// MaxAuthFailsAllowed
        /// </summary>
        /// <value>MaxAuthFailsAllowed</value>

        [DataMember(Name="maxAuthFailsAllowed")]
        public int? MaxAuthFailsAllowed { get; set; }

        /// <summary>
        /// OptOutButton
        /// </summary>
        /// <value>OptOutButton</value>
        [Required]

        [DataMember(Name="optOutButton")]
        public bool? OptOutButton { get; set; }

        /// <summary>
        /// OptOutReasons
        /// </summary>
        /// <value>OptOutReasons</value>
        [Required]

        [DataMember(Name="optOutReasons")]
        public List<string> OptOutReasons { get; set; }

        /// <summary>
        /// ExtractAcroFields
        /// </summary>
        /// <value>ExtractAcroFields</value>
        [Required]

        [DataMember(Name="extractAcroFields")]
        public bool? ExtractAcroFields { get; set; }

        /// <summary>
        /// ExtractTextTags
        /// </summary>
        /// <value>ExtractTextTags</value>
        [Required]

        [DataMember(Name="extractTextTags")]
        public bool? ExtractTextTags { get; set; }

        /// <summary>
        /// Ada
        /// </summary>
        /// <value>Ada</value>
        [Required]

        [DataMember(Name="ada")]
        public bool? Ada { get; set; }

        /// <summary>
        /// Gets or Sets Style
        /// </summary>

        [DataMember(Name="style")]
        public LayoutStyle Style { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CeremonySettings {\n");
            sb.Append("  Layout: ").Append(Layout).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  HandOver: ").Append(HandOver).Append("\n");
            sb.Append("  EnforceCaptureSignature: ").Append(EnforceCaptureSignature).Append("\n");
            sb.Append("  InPerson: ").Append(InPerson).Append("\n");
            sb.Append("  DeclineButton: ").Append(DeclineButton).Append("\n");
            sb.Append("  DeclineReasons: ").Append(DeclineReasons).Append("\n");
            sb.Append("  DisableDeclineOther: ").Append(DisableDeclineOther).Append("\n");
            sb.Append("  DisableDownloadForUncompletedPackage: ").Append(DisableDownloadForUncompletedPackage).Append("\n");
            sb.Append("  DisableFirstInPersonAffidavit: ").Append(DisableFirstInPersonAffidavit).Append("\n");
            sb.Append("  DisableInPersonAffidavit: ").Append(DisableInPersonAffidavit).Append("\n");
            sb.Append("  DisableOptOutOther: ").Append(DisableOptOutOther).Append("\n");
            sb.Append("  DisableSecondInPersonAffidavit: ").Append(DisableSecondInPersonAffidavit).Append("\n");
            sb.Append("  DocumentToolbarOptions: ").Append(DocumentToolbarOptions).Append("\n");
            sb.Append("  HideCaptureText: ").Append(HideCaptureText).Append("\n");
            sb.Append("  HideLanguageDropdown: ").Append(HideLanguageDropdown).Append("\n");
            sb.Append("  HidePackageOwnerInPerson: ").Append(HidePackageOwnerInPerson).Append("\n");
            sb.Append("  HideWatermark: ").Append(HideWatermark).Append("\n");
            sb.Append("  MaxAuthFailsAllowed: ").Append(MaxAuthFailsAllowed).Append("\n");
            sb.Append("  OptOutButton: ").Append(OptOutButton).Append("\n");
            sb.Append("  OptOutReasons: ").Append(OptOutReasons).Append("\n");
            sb.Append("  ExtractAcroFields: ").Append(ExtractAcroFields).Append("\n");
            sb.Append("  ExtractTextTags: ").Append(ExtractTextTags).Append("\n");
            sb.Append("  Ada: ").Append(Ada).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CeremonySettings)obj);
        }

        /// <summary>
        /// Returns true if CeremonySettings instances are equal
        /// </summary>
        /// <param name="other">Instance of CeremonySettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CeremonySettings other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Layout == other.Layout ||
                    Layout != null &&
                    Layout.Equals(other.Layout)
                ) && 
                (
                    Events == other.Events ||
                    Events != null &&
                    Events.Equals(other.Events)
                ) && 
                (
                    HandOver == other.HandOver ||
                    HandOver != null &&
                    HandOver.Equals(other.HandOver)
                ) && 
                (
                    EnforceCaptureSignature == other.EnforceCaptureSignature ||
                    EnforceCaptureSignature != null &&
                    EnforceCaptureSignature.Equals(other.EnforceCaptureSignature)
                ) && 
                (
                    InPerson == other.InPerson ||
                    InPerson != null &&
                    InPerson.Equals(other.InPerson)
                ) && 
                (
                    DeclineButton == other.DeclineButton ||
                    DeclineButton != null &&
                    DeclineButton.Equals(other.DeclineButton)
                ) && 
                (
                    DeclineReasons == other.DeclineReasons ||
                    DeclineReasons != null &&
                    DeclineReasons.SequenceEqual(other.DeclineReasons)
                ) && 
                (
                    DisableDeclineOther == other.DisableDeclineOther ||
                    DisableDeclineOther != null &&
                    DisableDeclineOther.Equals(other.DisableDeclineOther)
                ) && 
                (
                    DisableDownloadForUncompletedPackage == other.DisableDownloadForUncompletedPackage ||
                    DisableDownloadForUncompletedPackage != null &&
                    DisableDownloadForUncompletedPackage.Equals(other.DisableDownloadForUncompletedPackage)
                ) && 
                (
                    DisableFirstInPersonAffidavit == other.DisableFirstInPersonAffidavit ||
                    DisableFirstInPersonAffidavit != null &&
                    DisableFirstInPersonAffidavit.Equals(other.DisableFirstInPersonAffidavit)
                ) && 
                (
                    DisableInPersonAffidavit == other.DisableInPersonAffidavit ||
                    DisableInPersonAffidavit != null &&
                    DisableInPersonAffidavit.Equals(other.DisableInPersonAffidavit)
                ) && 
                (
                    DisableOptOutOther == other.DisableOptOutOther ||
                    DisableOptOutOther != null &&
                    DisableOptOutOther.Equals(other.DisableOptOutOther)
                ) && 
                (
                    DisableSecondInPersonAffidavit == other.DisableSecondInPersonAffidavit ||
                    DisableSecondInPersonAffidavit != null &&
                    DisableSecondInPersonAffidavit.Equals(other.DisableSecondInPersonAffidavit)
                ) && 
                (
                    DocumentToolbarOptions == other.DocumentToolbarOptions ||
                    DocumentToolbarOptions != null &&
                    DocumentToolbarOptions.Equals(other.DocumentToolbarOptions)
                ) && 
                (
                    HideCaptureText == other.HideCaptureText ||
                    HideCaptureText != null &&
                    HideCaptureText.Equals(other.HideCaptureText)
                ) && 
                (
                    HideLanguageDropdown == other.HideLanguageDropdown ||
                    HideLanguageDropdown != null &&
                    HideLanguageDropdown.Equals(other.HideLanguageDropdown)
                ) && 
                (
                    HidePackageOwnerInPerson == other.HidePackageOwnerInPerson ||
                    HidePackageOwnerInPerson != null &&
                    HidePackageOwnerInPerson.Equals(other.HidePackageOwnerInPerson)
                ) && 
                (
                    HideWatermark == other.HideWatermark ||
                    HideWatermark != null &&
                    HideWatermark.Equals(other.HideWatermark)
                ) && 
                (
                    MaxAuthFailsAllowed == other.MaxAuthFailsAllowed ||
                    MaxAuthFailsAllowed != null &&
                    MaxAuthFailsAllowed.Equals(other.MaxAuthFailsAllowed)
                ) && 
                (
                    OptOutButton == other.OptOutButton ||
                    OptOutButton != null &&
                    OptOutButton.Equals(other.OptOutButton)
                ) && 
                (
                    OptOutReasons == other.OptOutReasons ||
                    OptOutReasons != null &&
                    OptOutReasons.SequenceEqual(other.OptOutReasons)
                ) && 
                (
                    ExtractAcroFields == other.ExtractAcroFields ||
                    ExtractAcroFields != null &&
                    ExtractAcroFields.Equals(other.ExtractAcroFields)
                ) && 
                (
                    ExtractTextTags == other.ExtractTextTags ||
                    ExtractTextTags != null &&
                    ExtractTextTags.Equals(other.ExtractTextTags)
                ) && 
                (
                    Ada == other.Ada ||
                    Ada != null &&
                    Ada.Equals(other.Ada)
                ) && 
                (
                    Style == other.Style ||
                    Style != null &&
                    Style.Equals(other.Style)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Layout != null)
                    hashCode = hashCode * 59 + Layout.GetHashCode();
                    if (Events != null)
                    hashCode = hashCode * 59 + Events.GetHashCode();
                    if (HandOver != null)
                    hashCode = hashCode * 59 + HandOver.GetHashCode();
                    if (EnforceCaptureSignature != null)
                    hashCode = hashCode * 59 + EnforceCaptureSignature.GetHashCode();
                    if (InPerson != null)
                    hashCode = hashCode * 59 + InPerson.GetHashCode();
                    if (DeclineButton != null)
                    hashCode = hashCode * 59 + DeclineButton.GetHashCode();
                    if (DeclineReasons != null)
                    hashCode = hashCode * 59 + DeclineReasons.GetHashCode();
                    if (DisableDeclineOther != null)
                    hashCode = hashCode * 59 + DisableDeclineOther.GetHashCode();
                    if (DisableDownloadForUncompletedPackage != null)
                    hashCode = hashCode * 59 + DisableDownloadForUncompletedPackage.GetHashCode();
                    if (DisableFirstInPersonAffidavit != null)
                    hashCode = hashCode * 59 + DisableFirstInPersonAffidavit.GetHashCode();
                    if (DisableInPersonAffidavit != null)
                    hashCode = hashCode * 59 + DisableInPersonAffidavit.GetHashCode();
                    if (DisableOptOutOther != null)
                    hashCode = hashCode * 59 + DisableOptOutOther.GetHashCode();
                    if (DisableSecondInPersonAffidavit != null)
                    hashCode = hashCode * 59 + DisableSecondInPersonAffidavit.GetHashCode();
                    if (DocumentToolbarOptions != null)
                    hashCode = hashCode * 59 + DocumentToolbarOptions.GetHashCode();
                    if (HideCaptureText != null)
                    hashCode = hashCode * 59 + HideCaptureText.GetHashCode();
                    if (HideLanguageDropdown != null)
                    hashCode = hashCode * 59 + HideLanguageDropdown.GetHashCode();
                    if (HidePackageOwnerInPerson != null)
                    hashCode = hashCode * 59 + HidePackageOwnerInPerson.GetHashCode();
                    if (HideWatermark != null)
                    hashCode = hashCode * 59 + HideWatermark.GetHashCode();
                    if (MaxAuthFailsAllowed != null)
                    hashCode = hashCode * 59 + MaxAuthFailsAllowed.GetHashCode();
                    if (OptOutButton != null)
                    hashCode = hashCode * 59 + OptOutButton.GetHashCode();
                    if (OptOutReasons != null)
                    hashCode = hashCode * 59 + OptOutReasons.GetHashCode();
                    if (ExtractAcroFields != null)
                    hashCode = hashCode * 59 + ExtractAcroFields.GetHashCode();
                    if (ExtractTextTags != null)
                    hashCode = hashCode * 59 + ExtractTextTags.GetHashCode();
                    if (Ada != null)
                    hashCode = hashCode * 59 + Ada.GetHashCode();
                    if (Style != null)
                    hashCode = hashCode * 59 + Style.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CeremonySettings left, CeremonySettings right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CeremonySettings left, CeremonySettings right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
