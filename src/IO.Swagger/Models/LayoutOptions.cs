/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class LayoutOptions : IEquatable<LayoutOptions>
    { 
        /// <summary>
        /// Gets or Sets Header
        /// </summary>

        [DataMember(Name="header")]
        public HeaderOptions Header { get; set; }

        /// <summary>
        /// Gets or Sets BrandingBar
        /// </summary>

        [DataMember(Name="brandingBar")]
        public BrandingBarOptions BrandingBar { get; set; }

        /// <summary>
        /// Navigator
        /// </summary>
        /// <value>Navigator</value>
        [Required]

        [DataMember(Name="navigator")]
        public bool? Navigator { get; set; }

        /// <summary>
        /// Iframe
        /// </summary>
        /// <value>Iframe</value>
        [Required]

        [DataMember(Name="iframe")]
        public bool? Iframe { get; set; }

        /// <summary>
        /// Gets or Sets Footer
        /// </summary>

        [DataMember(Name="footer")]
        public FooterOptions Footer { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LayoutOptions {\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  BrandingBar: ").Append(BrandingBar).Append("\n");
            sb.Append("  Navigator: ").Append(Navigator).Append("\n");
            sb.Append("  Iframe: ").Append(Iframe).Append("\n");
            sb.Append("  Footer: ").Append(Footer).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LayoutOptions)obj);
        }

        /// <summary>
        /// Returns true if LayoutOptions instances are equal
        /// </summary>
        /// <param name="other">Instance of LayoutOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LayoutOptions other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Header == other.Header ||
                    Header != null &&
                    Header.Equals(other.Header)
                ) && 
                (
                    BrandingBar == other.BrandingBar ||
                    BrandingBar != null &&
                    BrandingBar.Equals(other.BrandingBar)
                ) && 
                (
                    Navigator == other.Navigator ||
                    Navigator != null &&
                    Navigator.Equals(other.Navigator)
                ) && 
                (
                    Iframe == other.Iframe ||
                    Iframe != null &&
                    Iframe.Equals(other.Iframe)
                ) && 
                (
                    Footer == other.Footer ||
                    Footer != null &&
                    Footer.Equals(other.Footer)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Header != null)
                    hashCode = hashCode * 59 + Header.GetHashCode();
                    if (BrandingBar != null)
                    hashCode = hashCode * 59 + BrandingBar.GetHashCode();
                    if (Navigator != null)
                    hashCode = hashCode * 59 + Navigator.GetHashCode();
                    if (Iframe != null)
                    hashCode = hashCode * 59 + Iframe.GetHashCode();
                    if (Footer != null)
                    hashCode = hashCode * 59 + Footer.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LayoutOptions left, LayoutOptions right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LayoutOptions left, LayoutOptions right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
