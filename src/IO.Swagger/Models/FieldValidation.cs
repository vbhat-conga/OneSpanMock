/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FieldValidation : IEquatable<FieldValidation>
    { 
        /// <summary>
        /// MaxLength
        /// </summary>
        /// <value>MaxLength</value>

        [DataMember(Name="maxLength")]
        public int? MaxLength { get; set; }

        /// <summary>
        /// Pattern
        /// </summary>
        /// <value>Pattern</value>

        [DataMember(Name="pattern")]
        public string Pattern { get; set; }

        /// <summary>
        /// Required
        /// </summary>
        /// <value>Required</value>
        [Required]

        [DataMember(Name="required")]
        public bool? Required { get; set; }

        /// <summary>
        /// ErrorMessage
        /// </summary>
        /// <value>ErrorMessage</value>

        [DataMember(Name="errorMessage")]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// ErrorCode
        /// </summary>
        /// <value>ErrorCode</value>

        [DataMember(Name="errorCode")]
        public int? ErrorCode { get; set; }

        /// <summary>
        /// Enum
        /// </summary>
        /// <value>Enum</value>

        [DataMember(Name="enum")]
        public List<string> _Enum { get; set; }

        /// <summary>
        /// MinLength
        /// </summary>
        /// <value>MinLength</value>

        [DataMember(Name="minLength")]
        public int? MinLength { get; set; }

        /// <summary>
        /// Group (Grouped Checkboxes)
        /// </summary>
        /// <value>Group (Grouped Checkboxes)</value>

        [DataMember(Name="group")]
        public string Group { get; set; }

        /// <summary>
        /// Minimum Required (Grouped Checkboxes)
        /// </summary>
        /// <value>Minimum Required (Grouped Checkboxes)</value>

        [DataMember(Name="minimumRequired")]
        public int? MinimumRequired { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldValidation {\n");
            sb.Append("  MaxLength: ").Append(MaxLength).Append("\n");
            sb.Append("  Pattern: ").Append(Pattern).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  _Enum: ").Append(_Enum).Append("\n");
            sb.Append("  MinLength: ").Append(MinLength).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  MinimumRequired: ").Append(MinimumRequired).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FieldValidation)obj);
        }

        /// <summary>
        /// Returns true if FieldValidation instances are equal
        /// </summary>
        /// <param name="other">Instance of FieldValidation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldValidation other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MaxLength == other.MaxLength ||
                    MaxLength != null &&
                    MaxLength.Equals(other.MaxLength)
                ) && 
                (
                    Pattern == other.Pattern ||
                    Pattern != null &&
                    Pattern.Equals(other.Pattern)
                ) && 
                (
                    Required == other.Required ||
                    Required != null &&
                    Required.Equals(other.Required)
                ) && 
                (
                    ErrorMessage == other.ErrorMessage ||
                    ErrorMessage != null &&
                    ErrorMessage.Equals(other.ErrorMessage)
                ) && 
                (
                    ErrorCode == other.ErrorCode ||
                    ErrorCode != null &&
                    ErrorCode.Equals(other.ErrorCode)
                ) && 
                (
                    _Enum == other._Enum ||
                    _Enum != null &&
                    _Enum.SequenceEqual(other._Enum)
                ) && 
                (
                    MinLength == other.MinLength ||
                    MinLength != null &&
                    MinLength.Equals(other.MinLength)
                ) && 
                (
                    Group == other.Group ||
                    Group != null &&
                    Group.Equals(other.Group)
                ) && 
                (
                    MinimumRequired == other.MinimumRequired ||
                    MinimumRequired != null &&
                    MinimumRequired.Equals(other.MinimumRequired)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MaxLength != null)
                    hashCode = hashCode * 59 + MaxLength.GetHashCode();
                    if (Pattern != null)
                    hashCode = hashCode * 59 + Pattern.GetHashCode();
                    if (Required != null)
                    hashCode = hashCode * 59 + Required.GetHashCode();
                    if (ErrorMessage != null)
                    hashCode = hashCode * 59 + ErrorMessage.GetHashCode();
                    if (ErrorCode != null)
                    hashCode = hashCode * 59 + ErrorCode.GetHashCode();
                    if (_Enum != null)
                    hashCode = hashCode * 59 + _Enum.GetHashCode();
                    if (MinLength != null)
                    hashCode = hashCode * 59 + MinLength.GetHashCode();
                    if (Group != null)
                    hashCode = hashCode * 59 + Group.GetHashCode();
                    if (MinimumRequired != null)
                    hashCode = hashCode * 59 + MinimumRequired.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FieldValidation left, FieldValidation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FieldValidation left, FieldValidation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
