/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Plan : IEquatable<Plan>
    { 
        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [Required]

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Cycle
        /// </summary>
        /// <value>Cycle</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CycleEnum
        {
            /// <summary>
            /// Enum DAYEnum for DAY
            /// </summary>
            [EnumMember(Value = "DAY")]
            DAYEnum = 0,
            /// <summary>
            /// Enum MONTHEnum for MONTH
            /// </summary>
            [EnumMember(Value = "MONTH")]
            MONTHEnum = 1,
            /// <summary>
            /// Enum YEAREnum for YEAR
            /// </summary>
            [EnumMember(Value = "YEAR")]
            YEAREnum = 2        }

        /// <summary>
        /// Cycle
        /// </summary>
        /// <value>Cycle</value>
        [Required]

        [DataMember(Name="cycle")]
        public CycleEnum? Cycle { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [Required]

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Features
        /// </summary>
        /// <value>Features</value>

        [DataMember(Name="features")]
        public Dictionary<string, Object> Features { get; set; }

        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [Required]

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Data
        /// </summary>
        /// <value>Data</value>

        [DataMember(Name="data")]
        public Dictionary<string, Object> Data { get; set; }

        /// <summary>
        /// Group
        /// </summary>
        /// <value>Group</value>
        [Required]

        [DataMember(Name="group")]
        public string Group { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [Required]

        [DataMember(Name="price")]
        public Price Price { get; set; }

        /// <summary>
        /// Contract
        /// </summary>
        /// <value>Contract</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContractEnum
        {
            /// <summary>
            /// Enum DAYEnum for DAY
            /// </summary>
            [EnumMember(Value = "DAY")]
            DAYEnum = 0,
            /// <summary>
            /// Enum MONTHEnum for MONTH
            /// </summary>
            [EnumMember(Value = "MONTH")]
            MONTHEnum = 1,
            /// <summary>
            /// Enum YEAREnum for YEAR
            /// </summary>
            [EnumMember(Value = "YEAR")]
            YEAREnum = 2        }

        /// <summary>
        /// Contract
        /// </summary>
        /// <value>Contract</value>

        [DataMember(Name="contract")]
        public ContractEnum? Contract { get; set; }

        /// <summary>
        /// Gets or Sets FreeCycles
        /// </summary>

        [DataMember(Name="freeCycles")]
        public CycleCount FreeCycles { get; set; }

        /// <summary>
        /// Quotas
        /// </summary>
        /// <value>Quotas</value>
        [Required]

        [DataMember(Name="quotas")]
        public List<Quota> Quotas { get; set; }

        /// <summary>
        /// Original
        /// </summary>
        /// <value>Original</value>

        [DataMember(Name="original")]
        public string Original { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Plan {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Cycle: ").Append(Cycle).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Features: ").Append(Features).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Contract: ").Append(Contract).Append("\n");
            sb.Append("  FreeCycles: ").Append(FreeCycles).Append("\n");
            sb.Append("  Quotas: ").Append(Quotas).Append("\n");
            sb.Append("  Original: ").Append(Original).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Plan)obj);
        }

        /// <summary>
        /// Returns true if Plan instances are equal
        /// </summary>
        /// <param name="other">Instance of Plan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Plan other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Cycle == other.Cycle ||
                    Cycle != null &&
                    Cycle.Equals(other.Cycle)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Features == other.Features ||
                    Features != null &&
                    Features.SequenceEqual(other.Features)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Data == other.Data ||
                    Data != null &&
                    Data.SequenceEqual(other.Data)
                ) && 
                (
                    Group == other.Group ||
                    Group != null &&
                    Group.Equals(other.Group)
                ) && 
                (
                    Price == other.Price ||
                    Price != null &&
                    Price.Equals(other.Price)
                ) && 
                (
                    Contract == other.Contract ||
                    Contract != null &&
                    Contract.Equals(other.Contract)
                ) && 
                (
                    FreeCycles == other.FreeCycles ||
                    FreeCycles != null &&
                    FreeCycles.Equals(other.FreeCycles)
                ) && 
                (
                    Quotas == other.Quotas ||
                    Quotas != null &&
                    Quotas.SequenceEqual(other.Quotas)
                ) && 
                (
                    Original == other.Original ||
                    Original != null &&
                    Original.Equals(other.Original)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Cycle != null)
                    hashCode = hashCode * 59 + Cycle.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Features != null)
                    hashCode = hashCode * 59 + Features.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                    if (Group != null)
                    hashCode = hashCode * 59 + Group.GetHashCode();
                    if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (Contract != null)
                    hashCode = hashCode * 59 + Contract.GetHashCode();
                    if (FreeCycles != null)
                    hashCode = hashCode * 59 + FreeCycles.GetHashCode();
                    if (Quotas != null)
                    hashCode = hashCode * 59 + Quotas.GetHashCode();
                    if (Original != null)
                    hashCode = hashCode * 59 + Original.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Plan left, Plan right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Plan left, Plan right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
