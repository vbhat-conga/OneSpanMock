/*
 * ONESPAN SIGN API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 11.51
 * Contact: support@onespan.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Document : IEquatable<Document>
    { 
        /// <summary>
        /// Gets or Sets Status
        /// </summary>

        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Fields
        /// </summary>
        /// <value>Fields</value>
        [Required]

        [DataMember(Name="fields")]
        public List<Field> Fields { get; set; }

        /// <summary>
        /// Fields
        /// </summary>
        /// <value>Fields</value>

        [DataMember(Name="imprintFields")]
        public List<ImprintField> ImprintFields { get; set; }

        /// <summary>
        /// Name
        /// </summary>
        /// <value>Name</value>
        [Required]

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Size
        /// </summary>
        /// <value>Size</value>
        [Required]

        [DataMember(Name="size")]
        public int? Size { get; set; }

        /// <summary>
        /// Description
        /// </summary>
        /// <value>Description</value>
        [Required]

        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Index
        /// </summary>
        /// <value>Index</value>
        [Required]

        [DataMember(Name="index")]
        public int? Index { get; set; }

        /// <summary>
        /// Id
        /// </summary>
        /// <value>Id</value>
        [Required]

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Data
        /// </summary>
        /// <value>Data</value>

        [DataMember(Name="data")]
        public Dictionary<string, Object> Data { get; set; }

        /// <summary>
        /// SignedHash
        /// </summary>
        /// <value>SignedHash</value>

        [DataMember(Name="signedHash")]
        public string SignedHash { get; set; }

        /// <summary>
        /// Extract
        /// </summary>
        /// <value>Extract</value>
        [Required]

        [DataMember(Name="extract")]
        public bool? Extract { get; set; }

        /// <summary>
        /// ExtractionTypes
        /// </summary>
        /// <value>ExtractionTypes</value>
        [Required]

        [DataMember(Name="extractionTypes")]
        public List<string> ExtractionTypes { get; set; }

        /// <summary>
        /// Tagged
        /// </summary>
        /// <value>Tagged</value>
        [Required]

        [DataMember(Name="tagged")]
        public bool? Tagged { get; set; }

        /// <summary>
        /// External Signed Document
        /// </summary>
        /// <value>External Signed Document</value>

        [DataMember(Name="externalSigned")]
        public bool? ExternalSigned { get; set; }

        /// <summary>
        /// Gets or Sets External
        /// </summary>

        [DataMember(Name="external")]
        public External External { get; set; }

        /// <summary>
        /// Approvals
        /// </summary>
        /// <value>Approvals</value>
        [Required]

        [DataMember(Name="approvals")]
        public List<Approval> Approvals { get; set; }

        /// <summary>
        /// SignerVerificationToken
        /// </summary>
        /// <value>SignerVerificationToken</value>

        [DataMember(Name="signerVerificationToken")]
        public string SignerVerificationToken { get; set; }

        /// <summary>
        /// Pages
        /// </summary>
        /// <value>Pages</value>
        [Required]

        [DataMember(Name="pages")]
        public List<Page> Pages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Document {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  ImprintFields: ").Append(ImprintFields).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  SignedHash: ").Append(SignedHash).Append("\n");
            sb.Append("  Extract: ").Append(Extract).Append("\n");
            sb.Append("  ExtractionTypes: ").Append(ExtractionTypes).Append("\n");
            sb.Append("  Tagged: ").Append(Tagged).Append("\n");
            sb.Append("  ExternalSigned: ").Append(ExternalSigned).Append("\n");
            sb.Append("  External: ").Append(External).Append("\n");
            sb.Append("  Approvals: ").Append(Approvals).Append("\n");
            sb.Append("  SignerVerificationToken: ").Append(SignerVerificationToken).Append("\n");
            sb.Append("  Pages: ").Append(Pages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Document)obj);
        }

        /// <summary>
        /// Returns true if Document instances are equal
        /// </summary>
        /// <param name="other">Instance of Document to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Document other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Fields == other.Fields ||
                    Fields != null &&
                    Fields.SequenceEqual(other.Fields)
                ) && 
                (
                    ImprintFields == other.ImprintFields ||
                    ImprintFields != null &&
                    ImprintFields.SequenceEqual(other.ImprintFields)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Index == other.Index ||
                    Index != null &&
                    Index.Equals(other.Index)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Data == other.Data ||
                    Data != null &&
                    Data.SequenceEqual(other.Data)
                ) && 
                (
                    SignedHash == other.SignedHash ||
                    SignedHash != null &&
                    SignedHash.Equals(other.SignedHash)
                ) && 
                (
                    Extract == other.Extract ||
                    Extract != null &&
                    Extract.Equals(other.Extract)
                ) && 
                (
                    ExtractionTypes == other.ExtractionTypes ||
                    ExtractionTypes != null &&
                    ExtractionTypes.SequenceEqual(other.ExtractionTypes)
                ) && 
                (
                    Tagged == other.Tagged ||
                    Tagged != null &&
                    Tagged.Equals(other.Tagged)
                ) && 
                (
                    ExternalSigned == other.ExternalSigned ||
                    ExternalSigned != null &&
                    ExternalSigned.Equals(other.ExternalSigned)
                ) && 
                (
                    External == other.External ||
                    External != null &&
                    External.Equals(other.External)
                ) && 
                (
                    Approvals == other.Approvals ||
                    Approvals != null &&
                    Approvals.SequenceEqual(other.Approvals)
                ) && 
                (
                    SignerVerificationToken == other.SignerVerificationToken ||
                    SignerVerificationToken != null &&
                    SignerVerificationToken.Equals(other.SignerVerificationToken)
                ) && 
                (
                    Pages == other.Pages ||
                    Pages != null &&
                    Pages.SequenceEqual(other.Pages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Fields != null)
                    hashCode = hashCode * 59 + Fields.GetHashCode();
                    if (ImprintFields != null)
                    hashCode = hashCode * 59 + ImprintFields.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Index != null)
                    hashCode = hashCode * 59 + Index.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                    if (SignedHash != null)
                    hashCode = hashCode * 59 + SignedHash.GetHashCode();
                    if (Extract != null)
                    hashCode = hashCode * 59 + Extract.GetHashCode();
                    if (ExtractionTypes != null)
                    hashCode = hashCode * 59 + ExtractionTypes.GetHashCode();
                    if (Tagged != null)
                    hashCode = hashCode * 59 + Tagged.GetHashCode();
                    if (ExternalSigned != null)
                    hashCode = hashCode * 59 + ExternalSigned.GetHashCode();
                    if (External != null)
                    hashCode = hashCode * 59 + External.GetHashCode();
                    if (Approvals != null)
                    hashCode = hashCode * 59 + Approvals.GetHashCode();
                    if (SignerVerificationToken != null)
                    hashCode = hashCode * 59 + SignerVerificationToken.GetHashCode();
                    if (Pages != null)
                    hashCode = hashCode * 59 + Pages.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Document left, Document right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Document left, Document right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
